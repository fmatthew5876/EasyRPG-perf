<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="998.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="981" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="981" > </text>
<g id="frames">
<g >
<title>__do_page_fault (1 samples, 0.01%)</title><rect x="160.1" y="293" width="0.1" height="15.0" fill="rgb(245,199,30)" rx="2" ry="2" />
<text  x="163.08" y="303.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="320.3" y="741" width="0.1" height="15.0" fill="rgb(248,16,35)" rx="2" ry="2" />
<text  x="323.28" y="751.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="940.0" y="485" width="0.1" height="15.0" fill="rgb(219,190,8)" rx="2" ry="2" />
<text  x="942.95" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.02%)</title><rect x="170.8" y="725" width="0.3" height="15.0" fill="rgb(244,98,50)" rx="2" ry="2" />
<text  x="173.85" y="735.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="175.6" y="725" width="0.1" height="15.0" fill="rgb(211,225,4)" rx="2" ry="2" />
<text  x="178.59" y="735.5" ></text>
</g>
<g >
<title>Scene::HasRequestedScene (34 samples, 0.37%)</title><rect x="1073.8" y="709" width="4.3" height="15.0" fill="rgb(227,129,37)" rx="2" ry="2" />
<text  x="1076.76" y="719.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul, 2ul, 3ul&gt; (1 samples, 0.01%)</title><rect x="159.6" y="741" width="0.1" height="15.0" fill="rgb(235,172,2)" rx="2" ry="2" />
<text  x="162.57" y="751.5" ></text>
</g>
<g >
<title>std::bitset&lt;36ul&gt;::_M_copy_to_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (5 samples, 0.05%)</title><rect x="481.8" y="773" width="0.6" height="15.0" fill="rgb(242,136,53)" rx="2" ry="2" />
<text  x="484.77" y="783.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="155.5" y="677" width="0.2" height="15.0" fill="rgb(253,77,15)" rx="2" ry="2" />
<text  x="158.47" y="687.5" ></text>
</g>
<g >
<title>__x64_sys_read (4 samples, 0.04%)</title><rect x="71.3" y="885" width="0.5" height="15.0" fill="rgb(226,143,34)" rx="2" ry="2" />
<text  x="74.26" y="895.5" ></text>
</g>
<g >
<title>new_sync_read (1 samples, 0.01%)</title><rect x="71.5" y="821" width="0.1" height="15.0" fill="rgb(233,111,25)" rx="2" ry="2" />
<text  x="74.52" y="831.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (2 samples, 0.02%)</title><rect x="251.1" y="677" width="0.2" height="15.0" fill="rgb(205,122,52)" rx="2" ry="2" />
<text  x="254.08" y="687.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="918.4" y="645" width="0.2" height="15.0" fill="rgb(252,107,39)" rx="2" ry="2" />
<text  x="921.42" y="655.5" ></text>
</g>
<g >
<title>apic_ack_irq (1 samples, 0.01%)</title><rect x="59.6" y="773" width="0.1" height="15.0" fill="rgb(252,209,31)" rx="2" ry="2" />
<text  x="62.60" y="783.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="1188.2" y="741" width="0.1" height="15.0" fill="rgb(240,228,18)" rx="2" ry="2" />
<text  x="1191.21" y="751.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="229.7" y="421" width="0.1" height="15.0" fill="rgb(250,139,20)" rx="2" ry="2" />
<text  x="232.67" y="431.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="806.4" y="597" width="0.1" height="15.0" fill="rgb(218,11,46)" rx="2" ry="2" />
<text  x="809.41" y="607.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (1 samples, 0.01%)</title><rect x="168.9" y="629" width="0.2" height="15.0" fill="rgb(212,73,8)" rx="2" ry="2" />
<text  x="171.92" y="639.5" ></text>
</g>
<g >
<title>__fget_light (2 samples, 0.02%)</title><rect x="71.8" y="837" width="0.2" height="15.0" fill="rgb(220,25,2)" rx="2" ry="2" />
<text  x="74.77" y="847.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (6 samples, 0.07%)</title><rect x="155.7" y="789" width="0.8" height="15.0" fill="rgb(229,134,14)" rx="2" ry="2" />
<text  x="158.72" y="799.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="943.7" y="453" width="0.4" height="15.0" fill="rgb(215,84,32)" rx="2" ry="2" />
<text  x="946.67" y="463.5" ></text>
</g>
<g >
<title>__libc_recvmsg (6 samples, 0.07%)</title><rect x="1119.1" y="597" width="0.8" height="15.0" fill="rgb(242,123,27)" rx="2" ry="2" />
<text  x="1122.13" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;Sprite&gt;::operator() (15 samples, 0.16%)</title><rect x="954.6" y="405" width="1.9" height="15.0" fill="rgb(238,15,2)" rx="2" ry="2" />
<text  x="957.56" y="415.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="477.9" y="661" width="0.2" height="15.0" fill="rgb(236,38,27)" rx="2" ry="2" />
<text  x="480.92" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (2 samples, 0.02%)</title><rect x="161.1" y="597" width="0.3" height="15.0" fill="rgb(225,156,51)" rx="2" ry="2" />
<text  x="164.10" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;Game_Event, std::allocator&lt;Game_Event&gt; &gt;::end (1 samples, 0.01%)</title><rect x="1082.5" y="709" width="0.1" height="15.0" fill="rgb(231,118,29)" rx="2" ry="2" />
<text  x="1085.47" y="719.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.01%)</title><rect x="940.0" y="373" width="0.1" height="15.0" fill="rgb(212,213,37)" rx="2" ry="2" />
<text  x="942.95" y="383.5" ></text>
</g>
<g >
<title>Sdl2Ui::GetTicks (4 samples, 0.04%)</title><rect x="1130.8" y="789" width="0.5" height="15.0" fill="rgb(234,229,4)" rx="2" ry="2" />
<text  x="1133.79" y="799.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.01%)</title><rect x="159.6" y="373" width="0.1" height="15.0" fill="rgb(240,0,22)" rx="2" ry="2" />
<text  x="162.57" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::operator (42 samples, 0.46%)</title><rect x="249.0" y="725" width="5.4" height="15.0" fill="rgb(220,50,30)" rx="2" ry="2" />
<text  x="252.02" y="735.5" ></text>
</g>
<g >
<title>finish_td (1 samples, 0.01%)</title><rect x="582.5" y="501" width="0.1" height="15.0" fill="rgb(237,213,23)" rx="2" ry="2" />
<text  x="585.51" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::operator bool (1 samples, 0.01%)</title><rect x="231.3" y="741" width="0.2" height="15.0" fill="rgb(251,46,53)" rx="2" ry="2" />
<text  x="234.34" y="751.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1051.8" y="629" width="0.2" height="15.0" fill="rgb(222,224,43)" rx="2" ry="2" />
<text  x="1054.84" y="639.5" ></text>
</g>
<g >
<title>prepare_transfer (1 samples, 0.01%)</title><rect x="957.6" y="293" width="0.2" height="15.0" fill="rgb(207,10,36)" rx="2" ry="2" />
<text  x="960.64" y="303.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.01%)</title><rect x="70.7" y="517" width="0.2" height="15.0" fill="rgb(228,37,54)" rx="2" ry="2" />
<text  x="73.75" y="527.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.01%)</title><rect x="956.4" y="341" width="0.1" height="15.0" fill="rgb(254,201,24)" rx="2" ry="2" />
<text  x="959.36" y="351.5" ></text>
</g>
<g >
<title>Utils::Tokenize (2 samples, 0.02%)</title><rect x="155.0" y="853" width="0.2" height="15.0" fill="rgb(227,107,29)" rx="2" ry="2" />
<text  x="157.95" y="863.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (2 samples, 0.02%)</title><rect x="166.0" y="421" width="0.2" height="15.0" fill="rgb(244,100,38)" rx="2" ry="2" />
<text  x="168.97" y="431.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (2 samples, 0.02%)</title><rect x="114.2" y="885" width="0.3" height="15.0" fill="rgb(251,84,24)" rx="2" ry="2" />
<text  x="117.20" y="895.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="957.4" y="613" width="0.2" height="15.0" fill="rgb(223,187,28)" rx="2" ry="2" />
<text  x="960.38" y="623.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::operator()&lt;FileRequestResult*, void&gt; (1 samples, 0.01%)</title><rect x="159.1" y="741" width="0.1" height="15.0" fill="rgb(245,47,40)" rx="2" ry="2" />
<text  x="162.05" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (6 samples, 0.07%)</title><rect x="660.8" y="629" width="0.8" height="15.0" fill="rgb(248,70,24)" rx="2" ry="2" />
<text  x="663.81" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (2 samples, 0.02%)</title><rect x="484.2" y="709" width="0.3" height="15.0" fill="rgb(227,130,30)" rx="2" ry="2" />
<text  x="487.20" y="719.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandConditionalBranch (1 samples, 0.01%)</title><rect x="628.9" y="693" width="0.1" height="15.0" fill="rgb(234,134,21)" rx="2" ry="2" />
<text  x="631.90" y="703.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="945.0" y="501" width="0.2" height="15.0" fill="rgb(228,184,48)" rx="2" ry="2" />
<text  x="947.95" y="511.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="159.6" y="389" width="0.1" height="15.0" fill="rgb(219,50,0)" rx="2" ry="2" />
<text  x="162.57" y="399.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (1 samples, 0.01%)</title><rect x="1119.5" y="469" width="0.1" height="15.0" fill="rgb(233,66,9)" rx="2" ry="2" />
<text  x="1122.51" y="479.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1148.7" y="741" width="0.2" height="15.0" fill="rgb(226,64,48)" rx="2" ry="2" />
<text  x="1151.73" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator* (26 samples, 0.28%)</title><rect x="529.3" y="677" width="3.4" height="15.0" fill="rgb(237,124,18)" rx="2" ry="2" />
<text  x="532.32" y="687.5" ></text>
</g>
<g >
<title>Game_Map::UpdateForegroundEvents (11 samples, 0.12%)</title><rect x="1096.3" y="757" width="1.4" height="15.0" fill="rgb(246,15,24)" rx="2" ry="2" />
<text  x="1099.31" y="767.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;::_M_ptr (2 samples, 0.02%)</title><rect x="933.9" y="613" width="0.3" height="15.0" fill="rgb(253,216,30)" rx="2" ry="2" />
<text  x="936.93" y="623.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="175.8" y="853" width="0.3" height="15.0" fill="rgb(223,150,21)" rx="2" ry="2" />
<text  x="178.84" y="863.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="946.0" y="517" width="0.4" height="15.0" fill="rgb(235,154,4)" rx="2" ry="2" />
<text  x="948.98" y="527.5" ></text>
</g>
<g >
<title>__sys_recvmsg (3 samples, 0.03%)</title><rect x="1119.4" y="517" width="0.4" height="15.0" fill="rgb(228,187,25)" rx="2" ry="2" />
<text  x="1122.38" y="527.5" ></text>
</g>
<g >
<title>Cache::System (10 samples, 0.11%)</title><rect x="1110.8" y="693" width="1.3" height="15.0" fill="rgb(235,202,52)" rx="2" ry="2" />
<text  x="1113.80" y="703.5" ></text>
</g>
<g >
<title>FileFinder::SplitPath(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)::{lambda(char32_t)#1}::operator() (1 samples, 0.01%)</title><rect x="75.6" y="901" width="0.1" height="15.0" fill="rgb(250,43,18)" rx="2" ry="2" />
<text  x="78.62" y="911.5" ></text>
</g>
<g >
<title>ip_rcv (1 samples, 0.01%)</title><rect x="121.8" y="565" width="0.1" height="15.0" fill="rgb(224,224,1)" rx="2" ry="2" />
<text  x="124.76" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (5 samples, 0.05%)</title><rect x="756.6" y="597" width="0.6" height="15.0" fill="rgb(219,188,43)" rx="2" ry="2" />
<text  x="759.55" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Scene, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (31 samples, 0.34%)</title><rect x="1078.5" y="709" width="4.0" height="15.0" fill="rgb(214,195,54)" rx="2" ry="2" />
<text  x="1081.50" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Node_iterator_base (1 samples, 0.01%)</title><rect x="97.2" y="901" width="0.1" height="15.0" fill="rgb(245,103,23)" rx="2" ry="2" />
<text  x="100.15" y="911.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (1 samples, 0.01%)</title><rect x="73.1" y="757" width="0.1" height="15.0" fill="rgb(236,34,10)" rx="2" ry="2" />
<text  x="76.06" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::lower_bound (1 samples, 0.01%)</title><rect x="951.4" y="373" width="0.1" height="15.0" fill="rgb(235,183,53)" rx="2" ry="2" />
<text  x="954.36" y="383.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandMovePicture (1 samples, 0.01%)</title><rect x="77.0" y="901" width="0.2" height="15.0" fill="rgb(253,78,24)" rx="2" ry="2" />
<text  x="80.03" y="911.5" ></text>
</g>
<g >
<title>XGetModifierMapping (9 samples, 0.10%)</title><rect x="1121.0" y="661" width="1.2" height="15.0" fill="rgb(235,156,11)" rx="2" ry="2" />
<text  x="1124.05" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::function (2 samples, 0.02%)</title><rect x="942.9" y="565" width="0.3" height="15.0" fill="rgb(249,59,16)" rx="2" ry="2" />
<text  x="945.90" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector (1 samples, 0.01%)</title><rect x="175.6" y="581" width="0.1" height="15.0" fill="rgb(245,104,49)" rx="2" ry="2" />
<text  x="178.59" y="591.5" ></text>
</g>
<g >
<title>Game_Picture::UpdateSprite (35 samples, 0.38%)</title><rect x="1100.9" y="725" width="4.5" height="15.0" fill="rgb(240,51,34)" rx="2" ry="2" />
<text  x="1103.93" y="735.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="155.2" y="629" width="0.1" height="15.0" fill="rgb(250,73,7)" rx="2" ry="2" />
<text  x="158.21" y="639.5" ></text>
</g>
<g >
<title>Game_Character::UpdateAnimation (1 samples, 0.01%)</title><rect x="1098.1" y="741" width="0.1" height="15.0" fill="rgb(228,108,48)" rx="2" ry="2" />
<text  x="1101.11" y="751.5" ></text>
</g>
<g >
<title>Bitmap::GetWidth (1 samples, 0.01%)</title><rect x="959.8" y="629" width="0.1" height="15.0" fill="rgb(218,6,16)" rx="2" ry="2" />
<text  x="962.82" y="639.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;Drawable* const&gt; &gt; (3 samples, 0.03%)</title><rect x="955.1" y="325" width="0.4" height="15.0" fill="rgb(220,199,18)" rx="2" ry="2" />
<text  x="958.08" y="335.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (5 samples, 0.05%)</title><rect x="169.8" y="901" width="0.7" height="15.0" fill="rgb(224,65,48)" rx="2" ry="2" />
<text  x="172.82" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="175.8" y="613" width="0.3" height="15.0" fill="rgb(205,72,12)" rx="2" ry="2" />
<text  x="178.84" y="623.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="176.0" y="517" width="0.1" height="15.0" fill="rgb(225,179,28)" rx="2" ry="2" />
<text  x="178.97" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_addr (2 samples, 0.02%)</title><rect x="1181.8" y="709" width="0.3" height="15.0" fill="rgb(247,55,16)" rx="2" ry="2" />
<text  x="1184.80" y="719.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (7 samples, 0.08%)</title><rect x="121.0" y="789" width="0.9" height="15.0" fill="rgb(231,181,30)" rx="2" ry="2" />
<text  x="123.99" y="799.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.01%)</title><rect x="940.0" y="405" width="0.1" height="15.0" fill="rgb(223,140,30)" rx="2" ry="2" />
<text  x="942.95" y="415.5" ></text>
</g>
<g >
<title>ttwu_do_activate (6 samples, 0.07%)</title><rect x="72.2" y="725" width="0.7" height="15.0" fill="rgb(237,190,52)" rx="2" ry="2" />
<text  x="75.16" y="735.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="548.5" y="549" width="0.2" height="15.0" fill="rgb(252,123,32)" rx="2" ry="2" />
<text  x="551.54" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="155.7" y="421" width="0.8" height="15.0" fill="rgb(247,159,37)" rx="2" ry="2" />
<text  x="158.72" y="431.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;BaseUi, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (1 samples, 0.01%)</title><rect x="177.1" y="901" width="0.2" height="15.0" fill="rgb(208,184,33)" rx="2" ry="2" />
<text  x="180.13" y="911.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;*, std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="957.1" y="549" width="0.3" height="15.0" fill="rgb(220,179,26)" rx="2" ry="2" />
<text  x="960.13" y="559.5" ></text>
</g>
<g >
<title>Game_Map::LoopVertical (59 samples, 0.64%)</title><rect x="246.8" y="741" width="7.6" height="15.0" fill="rgb(244,81,39)" rx="2" ry="2" />
<text  x="249.85" y="751.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="122.5" y="885" width="0.2" height="15.0" fill="rgb(207,87,51)" rx="2" ry="2" />
<text  x="125.53" y="895.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="1051.7" y="597" width="0.1" height="15.0" fill="rgb(236,56,28)" rx="2" ry="2" />
<text  x="1054.71" y="607.5" ></text>
</g>
<g >
<title>enqueue_hrtimer (1 samples, 0.01%)</title><rect x="1129.1" y="661" width="0.2" height="15.0" fill="rgb(247,135,39)" rx="2" ry="2" />
<text  x="1132.12" y="671.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.02%)</title><rect x="953.9" y="309" width="0.3" height="15.0" fill="rgb(233,148,2)" rx="2" ry="2" />
<text  x="956.92" y="319.5" ></text>
</g>
<g >
<title>Scene::GetRequestedScene (2 samples, 0.02%)</title><rect x="1073.5" y="709" width="0.3" height="15.0" fill="rgb(244,198,40)" rx="2" ry="2" />
<text  x="1076.50" y="719.5" ></text>
</g>
<g >
<title>FileFinder::MakeCanonical (2 samples, 0.02%)</title><rect x="155.0" y="885" width="0.2" height="15.0" fill="rgb(218,228,18)" rx="2" ry="2" />
<text  x="157.95" y="895.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (2 samples, 0.02%)</title><rect x="189.6" y="677" width="0.2" height="15.0" fill="rgb(220,75,1)" rx="2" ry="2" />
<text  x="192.56" y="687.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="943.7" y="421" width="0.1" height="15.0" fill="rgb(248,2,1)" rx="2" ry="2" />
<text  x="946.67" y="431.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="177.0" y="549" width="0.1" height="15.0" fill="rgb(227,73,23)" rx="2" ry="2" />
<text  x="180.00" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::resize (5 samples, 0.05%)</title><rect x="158.0" y="437" width="0.7" height="15.0" fill="rgb(241,47,32)" rx="2" ry="2" />
<text  x="161.03" y="447.5" ></text>
</g>
<g >
<title>xhci_td_cleanup (1 samples, 0.01%)</title><rect x="582.5" y="485" width="0.1" height="15.0" fill="rgb(234,42,9)" rx="2" ry="2" />
<text  x="585.51" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::~shared_ptr (19 samples, 0.21%)</title><rect x="302.3" y="725" width="2.5" height="15.0" fill="rgb(253,228,54)" rx="2" ry="2" />
<text  x="305.34" y="735.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (1 samples, 0.01%)</title><rect x="175.8" y="549" width="0.2" height="15.0" fill="rgb(230,109,3)" rx="2" ry="2" />
<text  x="178.84" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::empty (2 samples, 0.02%)</title><rect x="1109.8" y="741" width="0.2" height="15.0" fill="rgb(216,184,12)" rx="2" ry="2" />
<text  x="1112.77" y="751.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.01%)</title><rect x="175.6" y="357" width="0.1" height="15.0" fill="rgb(252,128,2)" rx="2" ry="2" />
<text  x="178.59" y="367.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (1 samples, 0.01%)</title><rect x="166.5" y="805" width="0.1" height="15.0" fill="rgb(247,218,35)" rx="2" ry="2" />
<text  x="169.49" y="815.5" ></text>
</g>
<g >
<title>MessageOverlay::Draw (2 samples, 0.02%)</title><rect x="180.3" y="773" width="0.3" height="15.0" fill="rgb(216,182,36)" rx="2" ry="2" />
<text  x="183.33" y="783.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.04%)</title><rect x="944.3" y="565" width="0.5" height="15.0" fill="rgb(251,119,19)" rx="2" ry="2" />
<text  x="947.31" y="575.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Sprite*, std::default_delete&lt;Sprite&gt; &gt; (1 samples, 0.01%)</title><rect x="1104.9" y="661" width="0.1" height="15.0" fill="rgb(222,171,31)" rx="2" ry="2" />
<text  x="1107.90" y="671.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="166.5" y="741" width="0.1" height="15.0" fill="rgb(245,111,31)" rx="2" ry="2" />
<text  x="169.49" y="751.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="468.4" y="629" width="0.2" height="15.0" fill="rgb(240,109,37)" rx="2" ry="2" />
<text  x="471.44" y="639.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="582.5" y="629" width="0.1" height="15.0" fill="rgb(251,164,9)" rx="2" ry="2" />
<text  x="585.51" y="639.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="957.6" y="581" width="0.2" height="15.0" fill="rgb(239,72,5)" rx="2" ry="2" />
<text  x="960.64" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (9 samples, 0.10%)</title><rect x="754.9" y="613" width="1.1" height="15.0" fill="rgb(220,151,12)" rx="2" ry="2" />
<text  x="757.89" y="623.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (6 samples, 0.07%)</title><rect x="160.0" y="741" width="0.7" height="15.0" fill="rgb(238,8,19)" rx="2" ry="2" />
<text  x="162.95" y="751.5" ></text>
</g>
<g >
<title>perf_pmu_disable.part.103 (1 samples, 0.01%)</title><rect x="156.1" y="165" width="0.1" height="15.0" fill="rgb(250,36,41)" rx="2" ry="2" />
<text  x="159.11" y="175.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;int, std::allocator&lt;int&gt;, int&gt; (6 samples, 0.07%)</title><rect x="943.3" y="581" width="0.8" height="15.0" fill="rgb(242,118,39)" rx="2" ry="2" />
<text  x="946.29" y="591.5" ></text>
</g>
<g >
<title>__GI___pthread_getspecific (1 samples, 0.01%)</title><rect x="943.0" y="437" width="0.2" height="15.0" fill="rgb(234,41,30)" rx="2" ry="2" />
<text  x="946.03" y="447.5" ></text>
</g>
<g >
<title>std::max&lt;int&gt; (25 samples, 0.27%)</title><rect x="884.7" y="645" width="3.2" height="15.0" fill="rgb(210,173,27)" rx="2" ry="2" />
<text  x="887.71" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (2 samples, 0.02%)</title><rect x="161.1" y="549" width="0.3" height="15.0" fill="rgb(245,95,48)" rx="2" ry="2" />
<text  x="164.10" y="559.5" ></text>
</g>
<g >
<title>icu_63::UnicodeString::caseMap (1 samples, 0.01%)</title><rect x="158.7" y="597" width="0.1" height="15.0" fill="rgb(238,132,17)" rx="2" ry="2" />
<text  x="161.67" y="607.5" ></text>
</g>
<g >
<title>Player::IsRPG2k3 (1 samples, 0.01%)</title><rect x="884.5" y="645" width="0.1" height="15.0" fill="rgb(219,174,21)" rx="2" ry="2" />
<text  x="887.46" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul, 2ul, 3ul&gt; (1 samples, 0.01%)</title><rect x="159.1" y="725" width="0.1" height="15.0" fill="rgb(208,136,18)" rx="2" ry="2" />
<text  x="162.05" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="115.2" y="901" width="0.2" height="15.0" fill="rgb(217,46,20)" rx="2" ry="2" />
<text  x="118.22" y="911.5" ></text>
</g>
<g >
<title>std::_Temporary_buffer&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable*&gt;::_Temporary_buffer (5 samples, 0.05%)</title><rect x="323.5" y="741" width="0.6" height="15.0" fill="rgb(240,220,40)" rx="2" ry="2" />
<text  x="326.49" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Window_Gold, std::default_delete&lt;Window_Gold&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="1112.1" y="757" width="0.1" height="15.0" fill="rgb(208,198,15)" rx="2" ry="2" />
<text  x="1115.08" y="767.5" ></text>
</g>
<g >
<title>Game_System::OnSeReady (13 samples, 0.14%)</title><rect x="167.3" y="597" width="1.6" height="15.0" fill="rgb(244,105,31)" rx="2" ry="2" />
<text  x="170.26" y="607.5" ></text>
</g>
<g >
<title>AudioResampler::FillBuffer (1 samples, 0.01%)</title><rect x="161.0" y="565" width="0.1" height="15.0" fill="rgb(239,73,52)" rx="2" ry="2" />
<text  x="163.98" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="174.9" y="421" width="0.2" height="15.0" fill="rgb(230,47,12)" rx="2" ry="2" />
<text  x="177.95" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (1 samples, 0.01%)</title><rect x="484.3" y="693" width="0.2" height="15.0" fill="rgb(230,190,50)" rx="2" ry="2" />
<text  x="487.33" y="703.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.01%)</title><rect x="175.8" y="293" width="0.2" height="15.0" fill="rgb(222,51,29)" rx="2" ry="2" />
<text  x="178.84" y="303.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandBreakLoop (3 samples, 0.03%)</title><rect x="641.7" y="677" width="0.4" height="15.0" fill="rgb(233,69,2)" rx="2" ry="2" />
<text  x="644.72" y="687.5" ></text>
</g>
<g >
<title>Player::Update (2 samples, 0.02%)</title><rect x="174.8" y="821" width="0.3" height="15.0" fill="rgb(242,161,32)" rx="2" ry="2" />
<text  x="177.82" y="831.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="806.4" y="581" width="0.1" height="15.0" fill="rgb(208,205,20)" rx="2" ry="2" />
<text  x="809.41" y="591.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (4 samples, 0.04%)</title><rect x="476.5" y="693" width="0.5" height="15.0" fill="rgb(241,74,30)" rx="2" ry="2" />
<text  x="479.51" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_allocate (1 samples, 0.01%)</title><rect x="177.0" y="613" width="0.1" height="15.0" fill="rgb(210,170,41)" rx="2" ry="2" />
<text  x="180.00" y="623.5" ></text>
</g>
<g >
<title>hrtimer_nanosleep (27 samples, 0.29%)</title><rect x="1123.1" y="661" width="3.5" height="15.0" fill="rgb(250,34,5)" rx="2" ry="2" />
<text  x="1126.10" y="671.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (40 samples, 0.43%)</title><rect x="161.4" y="757" width="5.1" height="15.0" fill="rgb(243,39,19)" rx="2" ry="2" />
<text  x="164.36" y="767.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (1 samples, 0.01%)</title><rect x="925.6" y="613" width="0.1" height="15.0" fill="rgb(239,205,16)" rx="2" ry="2" />
<text  x="928.60" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;TilemapLayer::TileData, std::allocator&lt;TilemapLayer::TileData&gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="323.0" y="757" width="0.1" height="15.0" fill="rgb(235,127,31)" rx="2" ry="2" />
<text  x="325.97" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="1111.6" y="661" width="0.1" height="15.0" fill="rgb(235,87,37)" rx="2" ry="2" />
<text  x="1114.56" y="671.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1119.6" y="405" width="0.2" height="15.0" fill="rgb(208,185,9)" rx="2" ry="2" />
<text  x="1122.64" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (1 samples, 0.01%)</title><rect x="661.6" y="645" width="0.1" height="15.0" fill="rgb(247,151,48)" rx="2" ry="2" />
<text  x="664.58" y="655.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (7 samples, 0.08%)</title><rect x="1119.1" y="645" width="0.9" height="15.0" fill="rgb(223,38,12)" rx="2" ry="2" />
<text  x="1122.13" y="655.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (1 samples, 0.01%)</title><rect x="177.0" y="869" width="0.1" height="15.0" fill="rgb(205,159,38)" rx="2" ry="2" />
<text  x="180.00" y="879.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="1004.9" y="597" width="0.2" height="15.0" fill="rgb(212,191,14)" rx="2" ry="2" />
<text  x="1007.93" y="607.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="957.6" y="613" width="0.2" height="15.0" fill="rgb(210,1,50)" rx="2" ry="2" />
<text  x="960.64" y="623.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="226.1" y="645" width="0.2" height="15.0" fill="rgb(245,127,25)" rx="2" ry="2" />
<text  x="229.08" y="655.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (50 samples, 0.54%)</title><rect x="469.1" y="693" width="6.4" height="15.0" fill="rgb(207,43,6)" rx="2" ry="2" />
<text  x="472.08" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (1 samples, 0.01%)</title><rect x="1111.9" y="661" width="0.2" height="15.0" fill="rgb(211,2,50)" rx="2" ry="2" />
<text  x="1114.95" y="671.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1158.9" y="645" width="0.1" height="15.0" fill="rgb(222,41,32)" rx="2" ry="2" />
<text  x="1161.86" y="655.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="189.4" y="629" width="0.2" height="15.0" fill="rgb(251,36,46)" rx="2" ry="2" />
<text  x="192.43" y="639.5" ></text>
</g>
<g >
<title>__sys_recvmsg (4 samples, 0.04%)</title><rect x="1127.2" y="549" width="0.5" height="15.0" fill="rgb(236,106,36)" rx="2" ry="2" />
<text  x="1130.20" y="559.5" ></text>
</g>
<g >
<title>FileFinder::FindImage (1 samples, 0.01%)</title><rect x="175.7" y="757" width="0.1" height="15.0" fill="rgb(221,10,35)" rx="2" ry="2" />
<text  x="178.72" y="767.5" ></text>
</g>
<g >
<title>std::min&lt;int&gt; (16 samples, 0.17%)</title><rect x="887.9" y="645" width="2.1" height="15.0" fill="rgb(219,142,37)" rx="2" ry="2" />
<text  x="890.92" y="655.5" ></text>
</g>
<g >
<title>account_entity_enqueue (1 samples, 0.01%)</title><rect x="948.9" y="181" width="0.2" height="15.0" fill="rgb(235,188,24)" rx="2" ry="2" />
<text  x="951.92" y="191.5" ></text>
</g>
<g >
<title>TilemapLayer::Draw(int)::{lambda(int, int)#1}::operator() (16 samples, 0.17%)</title><rect x="254.4" y="741" width="2.1" height="15.0" fill="rgb(234,138,49)" rx="2" ry="2" />
<text  x="257.41" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (28 samples, 0.30%)</title><rect x="1162.4" y="757" width="3.6" height="15.0" fill="rgb(230,95,38)" rx="2" ry="2" />
<text  x="1165.44" y="767.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="998.5" y="597" width="0.2" height="15.0" fill="rgb(239,174,21)" rx="2" ry="2" />
<text  x="1001.52" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="161.1" y="485" width="0.3" height="15.0" fill="rgb(250,127,6)" rx="2" ry="2" />
<text  x="164.10" y="495.5" ></text>
</g>
<g >
<title>std::swap&lt;Bitmap*&gt; (1 samples, 0.01%)</title><rect x="117.4" y="901" width="0.1" height="15.0" fill="rgb(228,98,8)" rx="2" ry="2" />
<text  x="120.40" y="911.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (2 samples, 0.02%)</title><rect x="169.3" y="453" width="0.3" height="15.0" fill="rgb(216,8,31)" rx="2" ry="2" />
<text  x="172.31" y="463.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, (anonymous namespace)::CacheItem, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::find (2 samples, 0.02%)</title><rect x="1110.2" y="661" width="0.2" height="15.0" fill="rgb(222,222,25)" rx="2" ry="2" />
<text  x="1113.15" y="671.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="1158.9" y="709" width="0.1" height="15.0" fill="rgb(220,20,1)" rx="2" ry="2" />
<text  x="1161.86" y="719.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, Drawable**, Drawable**&gt; (1 samples, 0.01%)</title><rect x="181.2" y="677" width="0.2" height="15.0" fill="rgb(246,127,51)" rx="2" ry="2" />
<text  x="184.23" y="687.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="168.9" y="485" width="0.2" height="15.0" fill="rgb(216,142,21)" rx="2" ry="2" />
<text  x="171.92" y="495.5" ></text>
</g>
<g >
<title>ReadPalettedData (1 samples, 0.01%)</title><rect x="159.4" y="405" width="0.2" height="15.0" fill="rgb(207,93,43)" rx="2" ry="2" />
<text  x="162.44" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="73.4" y="853" width="0.3" height="15.0" fill="rgb(208,22,24)" rx="2" ry="2" />
<text  x="76.44" y="863.5" ></text>
</g>
<g >
<title>Game_Screen::GetPicture (6 samples, 0.07%)</title><rect x="926.5" y="661" width="0.8" height="15.0" fill="rgb(254,125,17)" rx="2" ry="2" />
<text  x="929.50" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::get (1 samples, 0.01%)</title><rect x="1104.0" y="677" width="0.1" height="15.0" fill="rgb(217,200,27)" rx="2" ry="2" />
<text  x="1107.00" y="687.5" ></text>
</g>
<g >
<title>do_mmap (1 samples, 0.01%)</title><rect x="174.9" y="197" width="0.2" height="15.0" fill="rgb(231,158,7)" rx="2" ry="2" />
<text  x="177.95" y="207.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (1 samples, 0.01%)</title><rect x="1128.4" y="709" width="0.1" height="15.0" fill="rgb(216,194,23)" rx="2" ry="2" />
<text  x="1131.35" y="719.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandShowPicture (6 samples, 0.07%)</title><rect x="160.0" y="805" width="0.7" height="15.0" fill="rgb(232,63,25)" rx="2" ry="2" />
<text  x="162.95" y="815.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (2 samples, 0.02%)</title><rect x="155.5" y="821" width="0.2" height="15.0" fill="rgb(236,193,53)" rx="2" ry="2" />
<text  x="158.47" y="831.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (4 samples, 0.04%)</title><rect x="190.2" y="677" width="0.5" height="15.0" fill="rgb(218,117,25)" rx="2" ry="2" />
<text  x="193.20" y="687.5" ></text>
</g>
<g >
<title>ktime_get_raw_ts64 (1 samples, 0.01%)</title><rect x="1122.5" y="581" width="0.1" height="15.0" fill="rgb(250,59,16)" rx="2" ry="2" />
<text  x="1125.46" y="591.5" ></text>
</g>
<g >
<title>do_sys_poll (89 samples, 0.97%)</title><rect x="59.7" y="869" width="11.4" height="15.0" fill="rgb(227,90,43)" rx="2" ry="2" />
<text  x="62.73" y="879.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator* (4 samples, 0.04%)</title><rect x="1012.5" y="677" width="0.5" height="15.0" fill="rgb(251,191,39)" rx="2" ry="2" />
<text  x="1015.49" y="687.5" ></text>
</g>
<g >
<title>__GI__IO_file_xsgetn (6 samples, 0.07%)</title><rect x="155.7" y="485" width="0.8" height="15.0" fill="rgb(254,133,33)" rx="2" ry="2" />
<text  x="158.72" y="495.5" ></text>
</g>
<g >
<title>__vfs_read (5 samples, 0.05%)</title><rect x="155.8" y="341" width="0.7" height="15.0" fill="rgb(206,2,2)" rx="2" ry="2" />
<text  x="158.85" y="351.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandStoreEventID (1 samples, 0.01%)</title><rect x="961.0" y="677" width="0.1" height="15.0" fill="rgb(209,14,44)" rx="2" ry="2" />
<text  x="963.97" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy (1 samples, 0.01%)</title><rect x="1111.9" y="629" width="0.2" height="15.0" fill="rgb(224,96,47)" rx="2" ry="2" />
<text  x="1114.95" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (29 samples, 0.31%)</title><rect x="1113.7" y="709" width="3.8" height="15.0" fill="rgb(247,15,54)" rx="2" ry="2" />
<text  x="1116.74" y="719.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="944.6" y="501" width="0.2" height="15.0" fill="rgb(214,204,9)" rx="2" ry="2" />
<text  x="947.57" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (31 samples, 0.34%)</title><rect x="161.4" y="485" width="3.9" height="15.0" fill="rgb(214,133,10)" rx="2" ry="2" />
<text  x="164.36" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt; (1 samples, 0.01%)</title><rect x="952.5" y="357" width="0.1" height="15.0" fill="rgb(225,101,24)" rx="2" ry="2" />
<text  x="955.51" y="367.5" ></text>
</g>
<g >
<title>MessageOverlay::IsAnyMessageVisible (1 samples, 0.01%)</title><rect x="478.1" y="773" width="0.1" height="15.0" fill="rgb(251,97,39)" rx="2" ry="2" />
<text  x="481.05" y="783.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (1 samples, 0.01%)</title><rect x="1109.1" y="581" width="0.2" height="15.0" fill="rgb(225,39,13)" rx="2" ry="2" />
<text  x="1112.13" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::operator++ (1 samples, 0.01%)</title><rect x="85.1" y="901" width="0.1" height="15.0" fill="rgb(245,63,49)" rx="2" ry="2" />
<text  x="88.10" y="911.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::get (1 samples, 0.01%)</title><rect x="1103.9" y="693" width="0.1" height="15.0" fill="rgb(231,41,27)" rx="2" ry="2" />
<text  x="1106.87" y="703.5" ></text>
</g>
<g >
<title>Game_Interpreter_Map::ExecuteCommand (8 samples, 0.09%)</title><rect x="159.7" y="837" width="1.0" height="15.0" fill="rgb(234,50,18)" rx="2" ry="2" />
<text  x="162.69" y="847.5" ></text>
</g>
<g >
<title>Game_CommonEvent::IsWaitingBackgroundExecution (7 samples, 0.08%)</title><rect x="483.3" y="725" width="0.9" height="15.0" fill="rgb(229,97,29)" rx="2" ry="2" />
<text  x="486.31" y="735.5" ></text>
</g>
<g >
<title>Game_System::SePlay (5 samples, 0.05%)</title><rect x="160.7" y="805" width="0.7" height="15.0" fill="rgb(208,202,16)" rx="2" ry="2" />
<text  x="163.72" y="815.5" ></text>
</g>
<g >
<title>Player::MainLoop (2 samples, 0.02%)</title><rect x="174.8" y="853" width="0.3" height="15.0" fill="rgb(244,207,52)" rx="2" ry="2" />
<text  x="177.82" y="863.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;int, (__gnu_cxx::_Lock_policy)2&gt;::__weak_ptr (1 samples, 0.01%)</title><rect x="943.2" y="549" width="0.1" height="15.0" fill="rgb(228,99,29)" rx="2" ry="2" />
<text  x="946.16" y="559.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="943.0" y="389" width="0.2" height="15.0" fill="rgb(212,171,10)" rx="2" ry="2" />
<text  x="946.03" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (38 samples, 0.41%)</title><rect x="543.8" y="661" width="4.9" height="15.0" fill="rgb(243,10,54)" rx="2" ry="2" />
<text  x="546.80" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="160.7" y="501" width="0.1" height="15.0" fill="rgb(213,138,46)" rx="2" ry="2" />
<text  x="163.72" y="511.5" ></text>
</g>
<g >
<title>Game_Picture::SetNonEffectParams (5 samples, 0.05%)</title><rect x="933.0" y="645" width="0.7" height="15.0" fill="rgb(235,167,53)" rx="2" ry="2" />
<text  x="936.03" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (5 samples, 0.05%)</title><rect x="891.5" y="645" width="0.6" height="15.0" fill="rgb(222,142,17)" rx="2" ry="2" />
<text  x="894.51" y="655.5" ></text>
</g>
<g >
<title>std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;::_Mem_fn_base (1 samples, 0.01%)</title><rect x="946.4" y="597" width="0.1" height="15.0" fill="rgb(237,111,42)" rx="2" ry="2" />
<text  x="949.36" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="1189.0" y="917" width="0.1" height="15.0" fill="rgb(234,118,47)" rx="2" ry="2" />
<text  x="1191.97" y="927.5" ></text>
</g>
<g >
<title>FileFinder::SplitPath(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)::{lambda(char32_t)#1}::operator() (1 samples, 0.01%)</title><rect x="155.3" y="613" width="0.2" height="15.0" fill="rgb(239,101,45)" rx="2" ry="2" />
<text  x="158.34" y="623.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="227.2" y="597" width="0.2" height="15.0" fill="rgb(207,60,30)" rx="2" ry="2" />
<text  x="230.24" y="607.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (2 samples, 0.02%)</title><rect x="170.8" y="757" width="0.3" height="15.0" fill="rgb(216,138,21)" rx="2" ry="2" />
<text  x="173.85" y="767.5" ></text>
</g>
<g >
<title>SdlMixerAudio::SE_Play (15 samples, 0.16%)</title><rect x="936.0" y="485" width="1.9" height="15.0" fill="rgb(249,32,32)" rx="2" ry="2" />
<text  x="938.98" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (1 samples, 0.01%)</title><rect x="1107.2" y="709" width="0.1" height="15.0" fill="rgb(238,58,12)" rx="2" ry="2" />
<text  x="1110.21" y="719.5" ></text>
</g>
<g >
<title>update_cfs_group (1 samples, 0.01%)</title><rect x="1123.2" y="549" width="0.2" height="15.0" fill="rgb(246,99,23)" rx="2" ry="2" />
<text  x="1126.23" y="559.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="958.5" y="469" width="0.3" height="15.0" fill="rgb(235,13,0)" rx="2" ry="2" />
<text  x="961.54" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (1 samples, 0.01%)</title><rect x="828.8" y="645" width="0.2" height="15.0" fill="rgb(213,218,28)" rx="2" ry="2" />
<text  x="831.84" y="655.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="482.2" y="661" width="0.1" height="15.0" fill="rgb(239,131,23)" rx="2" ry="2" />
<text  x="485.15" y="671.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.01%)</title><rect x="942.8" y="469" width="0.1" height="15.0" fill="rgb(212,100,23)" rx="2" ry="2" />
<text  x="945.77" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;Input::UiSource::Update()::{lambda(int)#1}&gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (9 samples, 0.10%)</title><rect x="479.5" y="693" width="1.1" height="15.0" fill="rgb(210,70,33)" rx="2" ry="2" />
<text  x="482.46" y="703.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, (anonymous namespace)::CacheItem, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::lower_bound (1 samples, 0.01%)</title><rect x="951.4" y="389" width="0.1" height="15.0" fill="rgb(227,125,46)" rx="2" ry="2" />
<text  x="954.36" y="399.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.01%)</title><rect x="1120.4" y="485" width="0.1" height="15.0" fill="rgb(240,97,8)" rx="2" ry="2" />
<text  x="1123.41" y="495.5" ></text>
</g>
<g >
<title>std::none_of&lt;std::_Deque_iterator&lt;MessageOverlayItem, MessageOverlayItem const&amp;, MessageOverlayItem const*&gt;, MessageOverlay::IsAnyMessageVisible() const::{lambda(MessageOverlayItem const&amp;)#1}&gt; (1 samples, 0.01%)</title><rect x="180.5" y="725" width="0.1" height="15.0" fill="rgb(226,47,30)" rx="2" ry="2" />
<text  x="183.46" y="735.5" ></text>
</g>
<g >
<title>std::swap&lt;RPG::SaveEventExecFrame*&gt; (1 samples, 0.01%)</title><rect x="1097.2" y="661" width="0.1" height="15.0" fill="rgb(220,24,22)" rx="2" ry="2" />
<text  x="1100.21" y="671.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="122.4" y="901" width="0.1" height="15.0" fill="rgb(220,45,35)" rx="2" ry="2" />
<text  x="125.40" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="324.4" y="693" width="0.1" height="15.0" fill="rgb(227,74,7)" rx="2" ry="2" />
<text  x="327.38" y="703.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="160.3" y="181" width="0.2" height="15.0" fill="rgb(242,226,34)" rx="2" ry="2" />
<text  x="163.34" y="191.5" ></text>
</g>
<g >
<title>submit_bio (1 samples, 0.01%)</title><rect x="156.4" y="165" width="0.1" height="15.0" fill="rgb(215,40,54)" rx="2" ry="2" />
<text  x="159.36" y="175.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (4 samples, 0.04%)</title><rect x="476.5" y="709" width="0.5" height="15.0" fill="rgb(247,108,4)" rx="2" ry="2" />
<text  x="479.51" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char32_t&gt; &gt;::allocate (2 samples, 0.02%)</title><rect x="155.0" y="773" width="0.2" height="15.0" fill="rgb(209,109,51)" rx="2" ry="2" />
<text  x="157.95" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::end (1 samples, 0.01%)</title><rect x="483.8" y="677" width="0.1" height="15.0" fill="rgb(227,124,31)" rx="2" ry="2" />
<text  x="486.82" y="687.5" ></text>
</g>
<g >
<title>__sched_text_start (8 samples, 0.09%)</title><rect x="1121.0" y="421" width="1.1" height="15.0" fill="rgb(240,128,14)" rx="2" ry="2" />
<text  x="1124.05" y="431.5" ></text>
</g>
<g >
<title>RPG::SavePicture::SavePicture (5 samples, 0.05%)</title><rect x="1105.4" y="725" width="0.7" height="15.0" fill="rgb(220,46,34)" rx="2" ry="2" />
<text  x="1108.41" y="735.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.01%)</title><rect x="943.0" y="357" width="0.2" height="15.0" fill="rgb(230,99,47)" rx="2" ry="2" />
<text  x="946.03" y="367.5" ></text>
</g>
<g >
<title>[libX11.so.6.3.0] (2 samples, 0.02%)</title><rect x="1118.9" y="677" width="0.2" height="15.0" fill="rgb(228,2,53)" rx="2" ry="2" />
<text  x="1121.87" y="687.5" ></text>
</g>
<g >
<title>pipe_poll (2 samples, 0.02%)</title><rect x="60.5" y="853" width="0.3" height="15.0" fill="rgb(231,1,26)" rx="2" ry="2" />
<text  x="63.50" y="863.5" ></text>
</g>
<g >
<title>RPG::SaveEventExecState::SaveEventExecState (2 samples, 0.02%)</title><rect x="1096.7" y="725" width="0.3" height="15.0" fill="rgb(214,6,23)" rx="2" ry="2" />
<text  x="1099.70" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;BaseUi, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (1 samples, 0.01%)</title><rect x="227.5" y="725" width="0.1" height="15.0" fill="rgb(246,30,24)" rx="2" ry="2" />
<text  x="230.49" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;short&gt;::_M_valptr (4 samples, 0.04%)</title><rect x="317.2" y="677" width="0.5" height="15.0" fill="rgb(244,24,13)" rx="2" ry="2" />
<text  x="320.21" y="687.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (2 samples, 0.02%)</title><rect x="155.2" y="837" width="0.3" height="15.0" fill="rgb(253,87,18)" rx="2" ry="2" />
<text  x="158.21" y="847.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;int&gt;::weak_ptr&lt;int, void&gt; (1 samples, 0.01%)</title><rect x="111.9" y="901" width="0.1" height="15.0" fill="rgb(206,225,22)" rx="2" ry="2" />
<text  x="114.89" y="911.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (17 samples, 0.18%)</title><rect x="156.5" y="613" width="2.2" height="15.0" fill="rgb(243,165,10)" rx="2" ry="2" />
<text  x="159.49" y="623.5" ></text>
</g>
<g >
<title>x86_pmu_enable (72 samples, 0.78%)</title><rect x="61.5" y="725" width="9.2" height="15.0" fill="rgb(240,115,28)" rx="2" ry="2" />
<text  x="64.52" y="735.5" ></text>
</g>
<g >
<title>Bitmap::Create (3 samples, 0.03%)</title><rect x="159.2" y="581" width="0.4" height="15.0" fill="rgb(230,38,7)" rx="2" ry="2" />
<text  x="162.18" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (5 samples, 0.05%)</title><rect x="248.4" y="725" width="0.6" height="15.0" fill="rgb(208,93,45)" rx="2" ry="2" />
<text  x="251.38" y="735.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.02%)</title><rect x="953.9" y="357" width="0.3" height="15.0" fill="rgb(221,192,33)" rx="2" ry="2" />
<text  x="956.92" y="367.5" ></text>
</g>
<g >
<title>interrupt_entry (1 samples, 0.01%)</title><rect x="158.9" y="885" width="0.2" height="15.0" fill="rgb(220,75,31)" rx="2" ry="2" />
<text  x="161.93" y="895.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="117.9" y="901" width="0.1" height="15.0" fill="rgb(233,164,31)" rx="2" ry="2" />
<text  x="120.91" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;short&gt;::operator== (1 samples, 0.01%)</title><rect x="93.8" y="901" width="0.1" height="15.0" fill="rgb(215,68,17)" rx="2" ry="2" />
<text  x="96.82" y="911.5" ></text>
</g>
<g >
<title>Cache::Picture (1 samples, 0.01%)</title><rect x="177.0" y="853" width="0.1" height="15.0" fill="rgb(250,26,0)" rx="2" ry="2" />
<text  x="180.00" y="863.5" ></text>
</g>
<g >
<title>Bitmap::Create (1 samples, 0.01%)</title><rect x="177.3" y="725" width="0.1" height="15.0" fill="rgb(247,184,34)" rx="2" ry="2" />
<text  x="180.25" y="735.5" ></text>
</g>
<g >
<title>poll_schedule_timeout.constprop.14 (1 samples, 0.01%)</title><rect x="71.1" y="869" width="0.2" height="15.0" fill="rgb(240,138,26)" rx="2" ry="2" />
<text  x="74.13" y="879.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (8 samples, 0.09%)</title><rect x="1121.0" y="341" width="1.1" height="15.0" fill="rgb(210,190,37)" rx="2" ry="2" />
<text  x="1124.05" y="351.5" ></text>
</g>
<g >
<title>__floor_sse41 (1 samples, 0.01%)</title><rect x="227.4" y="693" width="0.1" height="15.0" fill="rgb(231,18,8)" rx="2" ry="2" />
<text  x="230.37" y="703.5" ></text>
</g>
<g >
<title>Game_System::SePlay (17 samples, 0.18%)</title><rect x="935.7" y="661" width="2.2" height="15.0" fill="rgb(211,74,44)" rx="2" ry="2" />
<text  x="938.72" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::_Vector_impl::_M_swap_data (1 samples, 0.01%)</title><rect x="1097.2" y="677" width="0.1" height="15.0" fill="rgb(207,61,28)" rx="2" ry="2" />
<text  x="1100.21" y="687.5" ></text>
</g>
<g >
<title>_IO_new_file_write (1 samples, 0.01%)</title><rect x="935.9" y="325" width="0.1" height="15.0" fill="rgb(231,148,25)" rx="2" ry="2" />
<text  x="938.85" y="335.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (45 samples, 0.49%)</title><rect x="160.7" y="837" width="5.8" height="15.0" fill="rgb(242,189,13)" rx="2" ry="2" />
<text  x="163.72" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::find (2 samples, 0.02%)</title><rect x="166.0" y="533" width="0.2" height="15.0" fill="rgb(247,24,8)" rx="2" ry="2" />
<text  x="168.97" y="543.5" ></text>
</g>
<g >
<title>pixman_transform_point_31_16 (1 samples, 0.01%)</title><rect x="225.4" y="613" width="0.2" height="15.0" fill="rgb(213,140,48)" rx="2" ry="2" />
<text  x="228.44" y="623.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, FileRequestResult*&amp;&amp;, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="947.5" y="437" width="0.1" height="15.0" fill="rgb(241,165,18)" rx="2" ry="2" />
<text  x="950.51" y="447.5" ></text>
</g>
<g >
<title>std::swap&lt;Sprite*&gt; (1 samples, 0.01%)</title><rect x="926.4" y="629" width="0.1" height="15.0" fill="rgb(246,130,34)" rx="2" ry="2" />
<text  x="929.37" y="639.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="189.9" y="645" width="0.2" height="15.0" fill="rgb(217,63,34)" rx="2" ry="2" />
<text  x="192.94" y="655.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (3 samples, 0.03%)</title><rect x="159.2" y="773" width="0.4" height="15.0" fill="rgb(221,45,11)" rx="2" ry="2" />
<text  x="162.18" y="783.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, Sprite*, std::default_delete&lt;Sprite&gt; &gt; (2 samples, 0.02%)</title><rect x="926.1" y="597" width="0.3" height="15.0" fill="rgb(208,83,43)" rx="2" ry="2" />
<text  x="929.11" y="607.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.01%)</title><rect x="957.5" y="597" width="0.1" height="15.0" fill="rgb(253,12,11)" rx="2" ry="2" />
<text  x="960.51" y="607.5" ></text>
</g>
<g >
<title>Sdl2Ui::GetTicks (3 samples, 0.03%)</title><rect x="169.2" y="517" width="0.4" height="15.0" fill="rgb(233,177,19)" rx="2" ry="2" />
<text  x="172.18" y="527.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="943.0" y="469" width="0.2" height="15.0" fill="rgb(240,204,4)" rx="2" ry="2" />
<text  x="946.03" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (4 samples, 0.04%)</title><rect x="761.7" y="597" width="0.5" height="15.0" fill="rgb(217,204,10)" rx="2" ry="2" />
<text  x="764.68" y="607.5" ></text>
</g>
<g >
<title>__GI___close_nocancel (2 samples, 0.02%)</title><rect x="160.2" y="325" width="0.3" height="15.0" fill="rgb(215,110,53)" rx="2" ry="2" />
<text  x="163.21" y="335.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt;, std::weak_ptr&lt;Bitmap&gt;, std::less&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt; const, std::weak_ptr&lt;Bitmap&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="229.9" y="709" width="0.2" height="15.0" fill="rgb(234,163,1)" rx="2" ry="2" />
<text  x="232.93" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="175.6" y="629" width="0.1" height="15.0" fill="rgb(250,105,25)" rx="2" ry="2" />
<text  x="178.59" y="639.5" ></text>
</g>
<g >
<title>Rect::IsOutOfBounds (1 samples, 0.01%)</title><rect x="182.3" y="741" width="0.1" height="15.0" fill="rgb(212,129,17)" rx="2" ry="2" />
<text  x="185.25" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (1 samples, 0.01%)</title><rect x="961.6" y="597" width="0.1" height="15.0" fill="rgb(241,68,4)" rx="2" ry="2" />
<text  x="964.61" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;Game_Event, std::allocator&lt;Game_Event&gt; &gt;::end (31 samples, 0.34%)</title><rect x="1069.5" y="693" width="4.0" height="15.0" fill="rgb(248,171,29)" rx="2" ry="2" />
<text  x="1072.53" y="703.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (1 samples, 0.01%)</title><rect x="155.2" y="565" width="0.1" height="15.0" fill="rgb(211,74,29)" rx="2" ry="2" />
<text  x="158.21" y="575.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (1 samples, 0.01%)</title><rect x="1119.6" y="453" width="0.2" height="15.0" fill="rgb(242,24,14)" rx="2" ry="2" />
<text  x="1122.64" y="463.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (4 samples, 0.04%)</title><rect x="323.5" y="677" width="0.5" height="15.0" fill="rgb(219,145,44)" rx="2" ry="2" />
<text  x="326.49" y="687.5" ></text>
</g>
<g >
<title>__libc_open64 (2 samples, 0.02%)</title><rect x="155.5" y="437" width="0.2" height="15.0" fill="rgb(214,9,12)" rx="2" ry="2" />
<text  x="158.47" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_S_left (2 samples, 0.02%)</title><rect x="314.5" y="693" width="0.3" height="15.0" fill="rgb(222,61,25)" rx="2" ry="2" />
<text  x="317.52" y="703.5" ></text>
</g>
<g >
<title>___sys_recvmsg (2 samples, 0.02%)</title><rect x="1120.0" y="517" width="0.3" height="15.0" fill="rgb(230,93,44)" rx="2" ry="2" />
<text  x="1123.02" y="527.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (6 samples, 0.07%)</title><rect x="155.7" y="757" width="0.8" height="15.0" fill="rgb(208,69,7)" rx="2" ry="2" />
<text  x="158.72" y="767.5" ></text>
</g>
<g >
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.01%)</title><rect x="1111.3" y="645" width="0.1" height="15.0" fill="rgb(250,188,54)" rx="2" ry="2" />
<text  x="1114.31" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt;::_M_erase (2 samples, 0.02%)</title><rect x="166.2" y="469" width="0.3" height="15.0" fill="rgb(233,38,40)" rx="2" ry="2" />
<text  x="169.23" y="479.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandShowPicture (180 samples, 1.96%)</title><rect x="937.9" y="677" width="23.1" height="15.0" fill="rgb(228,98,51)" rx="2" ry="2" />
<text  x="940.90" y="687.5" >G..</text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (31 samples, 0.34%)</title><rect x="161.4" y="533" width="3.9" height="15.0" fill="rgb(237,114,10)" rx="2" ry="2" />
<text  x="164.36" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy (1 samples, 0.01%)</title><rect x="951.5" y="357" width="0.1" height="15.0" fill="rgb(217,153,11)" rx="2" ry="2" />
<text  x="954.49" y="367.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="155.2" y="661" width="0.1" height="15.0" fill="rgb(244,226,51)" rx="2" ry="2" />
<text  x="158.21" y="671.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="477.9" y="709" width="0.2" height="15.0" fill="rgb(213,4,30)" rx="2" ry="2" />
<text  x="480.92" y="719.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="828.6" y="581" width="0.1" height="15.0" fill="rgb(205,10,7)" rx="2" ry="2" />
<text  x="831.58" y="591.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="229.7" y="453" width="0.1" height="15.0" fill="rgb(219,46,26)" rx="2" ry="2" />
<text  x="232.67" y="463.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="167.1" y="437" width="0.2" height="15.0" fill="rgb(215,113,29)" rx="2" ry="2" />
<text  x="170.13" y="447.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="225.8" y="613" width="0.2" height="15.0" fill="rgb(207,215,48)" rx="2" ry="2" />
<text  x="228.83" y="623.5" ></text>
</g>
<g >
<title>Game_Picture::RequestPictureSprite (40 samples, 0.43%)</title><rect x="161.4" y="789" width="5.1" height="15.0" fill="rgb(250,110,20)" rx="2" ry="2" />
<text  x="164.36" y="799.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="160.0" y="341" width="0.2" height="15.0" fill="rgb(216,50,31)" rx="2" ry="2" />
<text  x="162.95" y="351.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="892.0" y="581" width="0.1" height="15.0" fill="rgb(250,215,28)" rx="2" ry="2" />
<text  x="895.02" y="591.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.01%)</title><rect x="943.0" y="309" width="0.2" height="15.0" fill="rgb(215,76,19)" rx="2" ry="2" />
<text  x="946.03" y="319.5" ></text>
</g>
<g >
<title>Graphics::IsTransitionErased (1 samples, 0.01%)</title><rect x="80.5" y="901" width="0.1" height="15.0" fill="rgb(219,221,41)" rx="2" ry="2" />
<text  x="83.49" y="911.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (1 samples, 0.01%)</title><rect x="121.8" y="581" width="0.1" height="15.0" fill="rgb(243,160,5)" rx="2" ry="2" />
<text  x="124.76" y="591.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (3 samples, 0.03%)</title><rect x="159.2" y="645" width="0.4" height="15.0" fill="rgb(210,18,24)" rx="2" ry="2" />
<text  x="162.18" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Interpreter_Map, std::default_delete&lt;Game_Interpreter_Map&gt; &gt;::get (2 samples, 0.02%)</title><rect x="1095.3" y="709" width="0.2" height="15.0" fill="rgb(243,155,24)" rx="2" ry="2" />
<text  x="1098.29" y="719.5" ></text>
</g>
<g >
<title>Graphics::IsTransitionPending (2 samples, 0.02%)</title><rect x="179.3" y="837" width="0.3" height="15.0" fill="rgb(225,118,12)" rx="2" ry="2" />
<text  x="182.30" y="847.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.01%)</title><rect x="943.0" y="325" width="0.2" height="15.0" fill="rgb(230,172,30)" rx="2" ry="2" />
<text  x="946.03" y="335.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="155.2" y="789" width="0.3" height="15.0" fill="rgb(246,71,8)" rx="2" ry="2" />
<text  x="158.21" y="799.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;int&gt;::~weak_ptr (1 samples, 0.01%)</title><rect x="112.0" y="901" width="0.1" height="15.0" fill="rgb(214,131,23)" rx="2" ry="2" />
<text  x="115.02" y="911.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="1111.1" y="597" width="0.1" height="15.0" fill="rgb(219,110,18)" rx="2" ry="2" />
<text  x="1114.05" y="607.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (5 samples, 0.05%)</title><rect x="169.2" y="629" width="0.6" height="15.0" fill="rgb(251,53,5)" rx="2" ry="2" />
<text  x="172.18" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (1 samples, 0.01%)</title><rect x="98.3" y="901" width="0.1" height="15.0" fill="rgb(226,91,4)" rx="2" ry="2" />
<text  x="101.30" y="911.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, Game_Picture*, std::_Placeholder&lt;1&gt; &gt;::_Tuple_impl (1 samples, 0.01%)</title><rect x="945.2" y="533" width="0.1" height="15.0" fill="rgb(223,154,28)" rx="2" ry="2" />
<text  x="948.21" y="543.5" ></text>
</g>
<g >
<title>__libc_recvmsg (4 samples, 0.04%)</title><rect x="1127.2" y="629" width="0.5" height="15.0" fill="rgb(226,42,31)" rx="2" ry="2" />
<text  x="1130.20" y="639.5" ></text>
</g>
<g >
<title>Scene_Map::AsyncNext&lt;Scene_Map::UpdateStage1(MapUpdateAsyncContext)::{lambda()#2}&gt; (6 samples, 0.07%)</title><rect x="1106.4" y="773" width="0.8" height="15.0" fill="rgb(244,157,40)" rx="2" ry="2" />
<text  x="1109.44" y="783.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="955.8" y="293" width="0.2" height="15.0" fill="rgb(244,156,37)" rx="2" ry="2" />
<text  x="958.85" y="303.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.01%)</title><rect x="229.7" y="229" width="0.1" height="15.0" fill="rgb(254,52,49)" rx="2" ry="2" />
<text  x="232.67" y="239.5" ></text>
</g>
<g >
<title>std::__move_merge_adaptive_backward&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (1 samples, 0.01%)</title><rect x="324.5" y="709" width="0.1" height="15.0" fill="rgb(235,122,37)" rx="2" ry="2" />
<text  x="327.51" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_M_insert_node (1 samples, 0.01%)</title><rect x="174.8" y="373" width="0.1" height="15.0" fill="rgb(219,101,45)" rx="2" ry="2" />
<text  x="177.82" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="642.0" y="645" width="0.1" height="15.0" fill="rgb(222,164,31)" rx="2" ry="2" />
<text  x="644.97" y="655.5" ></text>
</g>
<g >
<title>operator&lt; (1 samples, 0.01%)</title><rect x="229.9" y="629" width="0.2" height="15.0" fill="rgb(240,18,28)" rx="2" ry="2" />
<text  x="232.93" y="639.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, (anonymous namespace)::CacheItem, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::find (10 samples, 0.11%)</title><rect x="950.1" y="405" width="1.3" height="15.0" fill="rgb(226,9,38)" rx="2" ry="2" />
<text  x="953.08" y="415.5" ></text>
</g>
<g >
<title>__fopen_internal (2 samples, 0.02%)</title><rect x="155.5" y="485" width="0.2" height="15.0" fill="rgb(224,178,2)" rx="2" ry="2" />
<text  x="158.47" y="495.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (2 samples, 0.02%)</title><rect x="169.3" y="469" width="0.3" height="15.0" fill="rgb(206,145,41)" rx="2" ry="2" />
<text  x="172.31" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt;::erase (2 samples, 0.02%)</title><rect x="166.2" y="485" width="0.3" height="15.0" fill="rgb(237,155,14)" rx="2" ry="2" />
<text  x="169.23" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="918.4" y="661" width="0.2" height="15.0" fill="rgb(248,49,9)" rx="2" ry="2" />
<text  x="921.42" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_ptr (5 samples, 0.05%)</title><rect x="1180.4" y="741" width="0.6" height="15.0" fill="rgb(216,21,30)" rx="2" ry="2" />
<text  x="1183.39" y="751.5" ></text>
</g>
<g >
<title>path_openat (1 samples, 0.01%)</title><rect x="155.6" y="357" width="0.1" height="15.0" fill="rgb(209,28,21)" rx="2" ry="2" />
<text  x="158.59" y="367.5" ></text>
</g>
<g >
<title>AudioSeCache::Create (1 samples, 0.01%)</title><rect x="160.8" y="613" width="0.2" height="15.0" fill="rgb(235,102,38)" rx="2" ry="2" />
<text  x="163.85" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt;::construct&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="944.1" y="549" width="0.1" height="15.0" fill="rgb(254,113,35)" rx="2" ry="2" />
<text  x="947.05" y="559.5" ></text>
</g>
<g >
<title>strcmp (1 samples, 0.01%)</title><rect x="482.7" y="725" width="0.1" height="15.0" fill="rgb(248,177,21)" rx="2" ry="2" />
<text  x="485.67" y="735.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (3 samples, 0.03%)</title><rect x="159.2" y="501" width="0.4" height="15.0" fill="rgb(243,114,30)" rx="2" ry="2" />
<text  x="162.18" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;::get (1 samples, 0.01%)</title><rect x="926.6" y="645" width="0.2" height="15.0" fill="rgb(228,149,32)" rx="2" ry="2" />
<text  x="929.62" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;int&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="958.8" y="629" width="0.1" height="15.0" fill="rgb(237,37,26)" rx="2" ry="2" />
<text  x="961.79" y="639.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="954.9" y="293" width="0.2" height="15.0" fill="rgb(229,105,52)" rx="2" ry="2" />
<text  x="957.95" y="303.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (18 samples, 0.20%)</title><rect x="156.5" y="757" width="2.3" height="15.0" fill="rgb(250,204,29)" rx="2" ry="2" />
<text  x="159.49" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (1 samples, 0.01%)</title><rect x="227.7" y="661" width="0.2" height="15.0" fill="rgb(226,52,9)" rx="2" ry="2" />
<text  x="230.75" y="671.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (2 samples, 0.02%)</title><rect x="174.8" y="437" width="0.3" height="15.0" fill="rgb(211,194,33)" rx="2" ry="2" />
<text  x="177.82" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Scene, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (1 samples, 0.01%)</title><rect x="99.8" y="901" width="0.2" height="15.0" fill="rgb(230,113,51)" rx="2" ry="2" />
<text  x="102.84" y="911.5" ></text>
</g>
<g >
<title>__libc_recvmsg (4 samples, 0.04%)</title><rect x="1120.0" y="597" width="0.5" height="15.0" fill="rgb(251,59,46)" rx="2" ry="2" />
<text  x="1123.02" y="607.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.01%)</title><rect x="1110.2" y="549" width="0.1" height="15.0" fill="rgb(249,226,39)" rx="2" ry="2" />
<text  x="1113.15" y="559.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 1ul, 3ul&gt;::__less (2 samples, 0.02%)</title><rect x="950.1" y="309" width="0.2" height="15.0" fill="rgb(216,46,2)" rx="2" ry="2" />
<text  x="953.08" y="319.5" ></text>
</g>
<g >
<title>poll_schedule_timeout.constprop.14 (80 samples, 0.87%)</title><rect x="60.9" y="853" width="10.2" height="15.0" fill="rgb(229,59,54)" rx="2" ry="2" />
<text  x="63.88" y="863.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::size (10 samples, 0.11%)</title><rect x="1082.9" y="709" width="1.2" height="15.0" fill="rgb(250,56,47)" rx="2" ry="2" />
<text  x="1085.86" y="719.5" ></text>
</g>
<g >
<title>Input::IsPressed (1 samples, 0.01%)</title><rect x="929.7" y="645" width="0.1" height="15.0" fill="rgb(230,145,31)" rx="2" ry="2" />
<text  x="932.70" y="655.5" ></text>
</g>
<g >
<title>Game_CommonEvent::IsWaitingForegroundExecution (1 samples, 0.01%)</title><rect x="1096.4" y="741" width="0.2" height="15.0" fill="rgb(240,112,30)" rx="2" ry="2" />
<text  x="1099.44" y="751.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned@plt (1 samples, 0.01%)</title><rect x="1120.8" y="517" width="0.1" height="15.0" fill="rgb(233,202,45)" rx="2" ry="2" />
<text  x="1123.79" y="527.5" ></text>
</g>
<g >
<title>pixman_transform_point (1 samples, 0.01%)</title><rect x="225.4" y="629" width="0.2" height="15.0" fill="rgb(245,114,12)" rx="2" ry="2" />
<text  x="228.44" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (2 samples, 0.02%)</title><rect x="178.4" y="901" width="0.3" height="15.0" fill="rgb(242,32,20)" rx="2" ry="2" />
<text  x="181.41" y="911.5" ></text>
</g>
<g >
<title>std::__merge_adaptive&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, long, Drawable**, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (1 samples, 0.01%)</title><rect x="181.2" y="725" width="0.2" height="15.0" fill="rgb(242,21,13)" rx="2" ry="2" />
<text  x="184.23" y="735.5" ></text>
</g>
<g >
<title>Game_CommonEvent::Update (4,781 samples, 51.93%)</title><rect x="483.3" y="741" width="612.8" height="15.0" fill="rgb(250,140,35)" rx="2" ry="2" />
<text  x="486.31" y="751.5" >Game_CommonEvent::Update</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="952.3" y="373" width="0.1" height="15.0" fill="rgb(238,194,6)" rx="2" ry="2" />
<text  x="955.26" y="383.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, FileRequestAsync, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="1111.1" y="661" width="0.1" height="15.0" fill="rgb(252,183,32)" rx="2" ry="2" />
<text  x="1114.05" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_S_value (2 samples, 0.02%)</title><rect x="176.1" y="901" width="0.3" height="15.0" fill="rgb(214,22,40)" rx="2" ry="2" />
<text  x="179.10" y="911.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.01%)</title><rect x="72.8" y="645" width="0.1" height="15.0" fill="rgb(212,196,27)" rx="2" ry="2" />
<text  x="75.80" y="655.5" ></text>
</g>
<g >
<title>__vfs_read (1 samples, 0.01%)</title><rect x="71.5" y="837" width="0.1" height="15.0" fill="rgb(214,107,43)" rx="2" ry="2" />
<text  x="74.52" y="847.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.01%)</title><rect x="161.2" y="389" width="0.2" height="15.0" fill="rgb(245,23,29)" rx="2" ry="2" />
<text  x="164.23" y="399.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (1 samples, 0.01%)</title><rect x="159.3" y="373" width="0.1" height="15.0" fill="rgb(218,189,48)" rx="2" ry="2" />
<text  x="162.31" y="383.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="161.1" y="469" width="0.3" height="15.0" fill="rgb(252,66,42)" rx="2" ry="2" />
<text  x="164.10" y="479.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="942.8" y="517" width="0.1" height="15.0" fill="rgb(219,191,38)" rx="2" ry="2" />
<text  x="945.77" y="527.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="884.6" y="645" width="0.1" height="15.0" fill="rgb(229,83,33)" rx="2" ry="2" />
<text  x="887.59" y="655.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (6 samples, 0.07%)</title><rect x="160.0" y="613" width="0.7" height="15.0" fill="rgb(206,175,45)" rx="2" ry="2" />
<text  x="162.95" y="623.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="189.4" y="565" width="0.2" height="15.0" fill="rgb(227,78,38)" rx="2" ry="2" />
<text  x="192.43" y="575.5" ></text>
</g>
<g >
<title>Bitmap::CheckPixels (1 samples, 0.01%)</title><rect x="159.2" y="421" width="0.1" height="15.0" fill="rgb(228,77,39)" rx="2" ry="2" />
<text  x="162.18" y="431.5" ></text>
</g>
<g >
<title>std::endl&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="935.9" y="437" width="0.1" height="15.0" fill="rgb(249,48,51)" rx="2" ry="2" />
<text  x="938.85" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.01%)</title><rect x="1111.7" y="629" width="0.1" height="15.0" fill="rgb(252,178,26)" rx="2" ry="2" />
<text  x="1114.69" y="639.5" ></text>
</g>
<g >
<title>task_tick_fair (1 samples, 0.01%)</title><rect x="948.9" y="213" width="0.2" height="15.0" fill="rgb(223,215,27)" rx="2" ry="2" />
<text  x="951.92" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (4 samples, 0.04%)</title><rect x="160.0" y="421" width="0.5" height="15.0" fill="rgb(210,163,42)" rx="2" ry="2" />
<text  x="162.95" y="431.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Bitmap, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (6 samples, 0.07%)</title><rect x="296.8" y="725" width="0.8" height="15.0" fill="rgb(247,52,2)" rx="2" ry="2" />
<text  x="299.83" y="735.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (5 samples, 0.05%)</title><rect x="160.7" y="789" width="0.7" height="15.0" fill="rgb(225,145,53)" rx="2" ry="2" />
<text  x="163.72" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="115.6" y="901" width="0.1" height="15.0" fill="rgb(251,99,36)" rx="2" ry="2" />
<text  x="118.61" y="911.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Graphics::State, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (1 samples, 0.01%)</title><rect x="180.7" y="773" width="0.1" height="15.0" fill="rgb(240,35,30)" rx="2" ry="2" />
<text  x="183.71" y="783.5" ></text>
</g>
<g >
<title>wp_page_copy (1 samples, 0.01%)</title><rect x="73.6" y="821" width="0.1" height="15.0" fill="rgb(241,161,4)" rx="2" ry="2" />
<text  x="76.57" y="831.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1051.7" y="565" width="0.1" height="15.0" fill="rgb(219,118,35)" rx="2" ry="2" />
<text  x="1054.71" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator++ (3 samples, 0.03%)</title><rect x="1106.8" y="709" width="0.4" height="15.0" fill="rgb(207,24,7)" rx="2" ry="2" />
<text  x="1109.82" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (31 samples, 0.34%)</title><rect x="161.4" y="501" width="3.9" height="15.0" fill="rgb(219,70,9)" rx="2" ry="2" />
<text  x="164.36" y="511.5" ></text>
</g>
<g >
<title>FileFinder::fopenUTF8 (2 samples, 0.02%)</title><rect x="155.5" y="533" width="0.2" height="15.0" fill="rgb(247,77,45)" rx="2" ry="2" />
<text  x="158.47" y="543.5" ></text>
</g>
<g >
<title>Cache::Picture (6 samples, 0.07%)</title><rect x="155.7" y="693" width="0.8" height="15.0" fill="rgb(210,74,19)" rx="2" ry="2" />
<text  x="158.72" y="703.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_clone (2 samples, 0.02%)</title><rect x="942.9" y="533" width="0.3" height="15.0" fill="rgb(246,125,26)" rx="2" ry="2" />
<text  x="945.90" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="155.5" y="405" width="0.2" height="15.0" fill="rgb(207,14,11)" rx="2" ry="2" />
<text  x="158.47" y="415.5" ></text>
</g>
<g >
<title>Scene::OnFinishAsync (143 samples, 1.55%)</title><rect x="1170.0" y="821" width="18.3" height="15.0" fill="rgb(248,90,1)" rx="2" ry="2" />
<text  x="1173.01" y="831.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="169.1" y="341" width="0.1" height="15.0" fill="rgb(205,105,6)" rx="2" ry="2" />
<text  x="172.05" y="351.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="1189.9" y="773" width="0.1" height="15.0" fill="rgb(222,197,49)" rx="2" ry="2" />
<text  x="1192.87" y="783.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.01%)</title><rect x="948.9" y="261" width="0.2" height="15.0" fill="rgb(206,91,37)" rx="2" ry="2" />
<text  x="951.92" y="271.5" ></text>
</g>
<g >
<title>rb_insert_color (1 samples, 0.01%)</title><rect x="1129.1" y="645" width="0.2" height="15.0" fill="rgb(230,5,34)" rx="2" ry="2" />
<text  x="1132.12" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (1 samples, 0.01%)</title><rect x="900.9" y="661" width="0.1" height="15.0" fill="rgb(209,148,8)" rx="2" ry="2" />
<text  x="903.86" y="671.5" ></text>
</g>
<g >
<title>Window_Message::Update (27 samples, 0.29%)</title><rect x="1108.9" y="773" width="3.4" height="15.0" fill="rgb(243,143,33)" rx="2" ry="2" />
<text  x="1111.87" y="783.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1004.9" y="613" width="0.2" height="15.0" fill="rgb(247,32,42)" rx="2" ry="2" />
<text  x="1007.93" y="623.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (2 samples, 0.02%)</title><rect x="159.7" y="757" width="0.3" height="15.0" fill="rgb(243,61,4)" rx="2" ry="2" />
<text  x="162.69" y="767.5" ></text>
</g>
<g >
<title>__interceptor_free (2 samples, 0.02%)</title><rect x="1127.7" y="661" width="0.3" height="15.0" fill="rgb(239,184,12)" rx="2" ry="2" />
<text  x="1130.71" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::operator= (1 samples, 0.01%)</title><rect x="954.4" y="421" width="0.2" height="15.0" fill="rgb(233,44,4)" rx="2" ry="2" />
<text  x="957.44" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::CommonEvent, std::allocator&lt;RPG::CommonEvent&gt; &gt;::size (1 samples, 0.01%)</title><rect x="484.1" y="693" width="0.1" height="15.0" fill="rgb(254,204,16)" rx="2" ry="2" />
<text  x="487.08" y="703.5" ></text>
</g>
<g >
<title>Player::IsRPG2k3 (3 samples, 0.03%)</title><rect x="895.2" y="661" width="0.4" height="15.0" fill="rgb(230,89,6)" rx="2" ry="2" />
<text  x="898.22" y="671.5" ></text>
</g>
<g >
<title>native_write_msr (71 samples, 0.77%)</title><rect x="61.5" y="677" width="9.1" height="15.0" fill="rgb(235,166,50)" rx="2" ry="2" />
<text  x="64.52" y="687.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (3 samples, 0.03%)</title><rect x="1127.2" y="501" width="0.4" height="15.0" fill="rgb(242,155,34)" rx="2" ry="2" />
<text  x="1130.20" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::operator (2 samples, 0.02%)</title><rect x="952.6" y="405" width="0.3" height="15.0" fill="rgb(223,77,31)" rx="2" ry="2" />
<text  x="955.64" y="415.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="155.0" y="725" width="0.2" height="15.0" fill="rgb(232,63,11)" rx="2" ry="2" />
<text  x="157.95" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Window_NumberInput, std::default_delete&lt;Window_NumberInput&gt; &gt;::get (1 samples, 0.01%)</title><rect x="1112.2" y="741" width="0.1" height="15.0" fill="rgb(224,55,48)" rx="2" ry="2" />
<text  x="1115.20" y="751.5" ></text>
</g>
<g >
<title>std::return_temporary_buffer&lt;Drawable*&gt; (1 samples, 0.01%)</title><rect x="324.1" y="725" width="0.2" height="15.0" fill="rgb(236,8,54)" rx="2" ry="2" />
<text  x="327.13" y="735.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="170.6" y="837" width="0.1" height="15.0" fill="rgb(221,212,37)" rx="2" ry="2" />
<text  x="173.59" y="847.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (7 samples, 0.08%)</title><rect x="77.5" y="901" width="0.9" height="15.0" fill="rgb(221,188,43)" rx="2" ry="2" />
<text  x="80.54" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="159.8" y="485" width="0.2" height="15.0" fill="rgb(236,90,52)" rx="2" ry="2" />
<text  x="162.82" y="495.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (37 samples, 0.40%)</title><rect x="470.7" y="613" width="4.8" height="15.0" fill="rgb(221,126,32)" rx="2" ry="2" />
<text  x="473.75" y="623.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="941.4" y="549" width="0.3" height="15.0" fill="rgb(234,6,47)" rx="2" ry="2" />
<text  x="944.36" y="559.5" ></text>
</g>
<g >
<title>Game_Interpreter::ValueOrVariable (1 samples, 0.01%)</title><rect x="112.8" y="901" width="0.1" height="15.0" fill="rgb(230,204,9)" rx="2" ry="2" />
<text  x="115.79" y="911.5" ></text>
</g>
<g >
<title>__x64_sys_newstat (1 samples, 0.01%)</title><rect x="160.7" y="469" width="0.1" height="15.0" fill="rgb(249,211,30)" rx="2" ry="2" />
<text  x="163.72" y="479.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="548.7" y="645" width="0.1" height="15.0" fill="rgb(224,92,2)" rx="2" ry="2" />
<text  x="551.67" y="655.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="805.9" y="597" width="0.1" height="15.0" fill="rgb(233,180,10)" rx="2" ry="2" />
<text  x="808.89" y="607.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandConditionalBranch (1 samples, 0.01%)</title><rect x="76.8" y="901" width="0.1" height="15.0" fill="rgb(213,151,8)" rx="2" ry="2" />
<text  x="79.77" y="911.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, RPG::Map*, false&gt;::_M_head (6 samples, 0.07%)</title><rect x="253.3" y="629" width="0.7" height="15.0" fill="rgb(237,14,50)" rx="2" ry="2" />
<text  x="256.25" y="639.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.01%)</title><rect x="1111.6" y="517" width="0.1" height="15.0" fill="rgb(253,139,6)" rx="2" ry="2" />
<text  x="1114.56" y="527.5" ></text>
</g>
<g >
<title>smp_call_function_many (1 samples, 0.01%)</title><rect x="165.7" y="149" width="0.1" height="15.0" fill="rgb(207,0,38)" rx="2" ry="2" />
<text  x="168.72" y="159.5" ></text>
</g>
<g >
<title>Graphics::RemoveDrawable (10 samples, 0.11%)</title><rect x="954.7" y="357" width="1.3" height="15.0" fill="rgb(240,114,25)" rx="2" ry="2" />
<text  x="957.69" y="367.5" ></text>
</g>
<g >
<title>Output::DebugStr (1 samples, 0.01%)</title><rect x="160.7" y="613" width="0.1" height="15.0" fill="rgb(213,188,48)" rx="2" ry="2" />
<text  x="163.72" y="623.5" ></text>
</g>
<g >
<title>FileFinder::MakeCanonical (1 samples, 0.01%)</title><rect x="166.6" y="709" width="0.1" height="15.0" fill="rgb(219,42,19)" rx="2" ry="2" />
<text  x="169.62" y="719.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="174.9" y="373" width="0.2" height="15.0" fill="rgb(213,50,24)" rx="2" ry="2" />
<text  x="177.95" y="383.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="225.8" y="645" width="0.2" height="15.0" fill="rgb(254,143,52)" rx="2" ry="2" />
<text  x="228.83" y="655.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.01%)</title><rect x="943.9" y="405" width="0.2" height="15.0" fill="rgb(238,167,39)" rx="2" ry="2" />
<text  x="946.93" y="415.5" ></text>
</g>
<g >
<title>Graphics::SortDrawableList (1 samples, 0.01%)</title><rect x="324.3" y="677" width="0.1" height="15.0" fill="rgb(210,206,30)" rx="2" ry="2" />
<text  x="327.26" y="687.5" ></text>
</g>
<g >
<title>std::make_shared&lt;int, int&gt; (1 samples, 0.01%)</title><rect x="103.4" y="901" width="0.2" height="15.0" fill="rgb(213,199,51)" rx="2" ry="2" />
<text  x="106.43" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="942.9" y="501" width="0.3" height="15.0" fill="rgb(220,191,13)" rx="2" ry="2" />
<text  x="945.90" y="511.5" ></text>
</g>
<g >
<title>glXSwapBuffers (5 samples, 0.05%)</title><rect x="477.0" y="757" width="0.7" height="15.0" fill="rgb(251,82,18)" rx="2" ry="2" />
<text  x="480.03" y="767.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="1051.7" y="517" width="0.1" height="15.0" fill="rgb(206,109,50)" rx="2" ry="2" />
<text  x="1054.71" y="527.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.01%)</title><rect x="1082.3" y="581" width="0.2" height="15.0" fill="rgb(238,63,18)" rx="2" ry="2" />
<text  x="1085.34" y="591.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (5 samples, 0.05%)</title><rect x="169.2" y="709" width="0.6" height="15.0" fill="rgb(231,75,9)" rx="2" ry="2" />
<text  x="172.18" y="719.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="582.5" y="533" width="0.1" height="15.0" fill="rgb(221,181,24)" rx="2" ry="2" />
<text  x="585.51" y="543.5" ></text>
</g>
<g >
<title>Game_Map::IsValid (1 samples, 0.01%)</title><rect x="79.2" y="901" width="0.1" height="15.0" fill="rgb(251,176,31)" rx="2" ry="2" />
<text  x="82.21" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare@plt (1 samples, 0.01%)</title><rect x="942.5" y="533" width="0.1" height="15.0" fill="rgb(247,108,13)" rx="2" ry="2" />
<text  x="945.52" y="543.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 0ul, 3ul&gt;::__less (1 samples, 0.01%)</title><rect x="1111.6" y="597" width="0.1" height="15.0" fill="rgb(217,33,2)" rx="2" ry="2" />
<text  x="1114.56" y="607.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="889.8" y="581" width="0.2" height="15.0" fill="rgb(208,120,38)" rx="2" ry="2" />
<text  x="892.84" y="591.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.01%)</title><rect x="1120.5" y="677" width="0.2" height="15.0" fill="rgb(219,122,38)" rx="2" ry="2" />
<text  x="1123.54" y="687.5" ></text>
</g>
<g >
<title>AudioSeCache::Decode (2 samples, 0.02%)</title><rect x="159.7" y="597" width="0.3" height="15.0" fill="rgb(248,216,15)" rx="2" ry="2" />
<text  x="162.69" y="607.5" ></text>
</g>
<g >
<title>new_sync_read (5 samples, 0.05%)</title><rect x="155.8" y="325" width="0.7" height="15.0" fill="rgb(215,204,9)" rx="2" ry="2" />
<text  x="158.85" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (3 samples, 0.03%)</title><rect x="1016.3" y="661" width="0.4" height="15.0" fill="rgb(244,117,7)" rx="2" ry="2" />
<text  x="1019.34" y="671.5" ></text>
</g>
<g >
<title>__fdget_pos (2 samples, 0.02%)</title><rect x="71.8" y="853" width="0.2" height="15.0" fill="rgb(237,16,3)" rx="2" ry="2" />
<text  x="74.77" y="863.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="122.7" y="885" width="0.7" height="15.0" fill="rgb(219,32,4)" rx="2" ry="2" />
<text  x="125.66" y="895.5" ></text>
</g>
<g >
<title>Opacity::IsSplit (1 samples, 0.01%)</title><rect x="191.1" y="661" width="0.1" height="15.0" fill="rgb(212,203,37)" rx="2" ry="2" />
<text  x="194.09" y="671.5" ></text>
</g>
<g >
<title>finish_task_switch (7 samples, 0.08%)</title><rect x="1129.4" y="645" width="0.9" height="15.0" fill="rgb(235,7,30)" rx="2" ry="2" />
<text  x="1132.38" y="655.5" ></text>
</g>
<g >
<title>Player::Update (1 samples, 0.01%)</title><rect x="166.9" y="853" width="0.1" height="15.0" fill="rgb(213,88,52)" rx="2" ry="2" />
<text  x="169.87" y="863.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="582.5" y="661" width="0.1" height="15.0" fill="rgb(233,85,39)" rx="2" ry="2" />
<text  x="585.51" y="671.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (4 samples, 0.04%)</title><rect x="173.5" y="869" width="0.5" height="15.0" fill="rgb(245,54,35)" rx="2" ry="2" />
<text  x="176.54" y="879.5" ></text>
</g>
<g >
<title>Sprite::SetOx (1 samples, 0.01%)</title><rect x="952.3" y="405" width="0.1" height="15.0" fill="rgb(217,137,42)" rx="2" ry="2" />
<text  x="955.26" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="953.9" y="293" width="0.3" height="15.0" fill="rgb(207,5,18)" rx="2" ry="2" />
<text  x="956.92" y="303.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (2 samples, 0.02%)</title><rect x="159.7" y="661" width="0.3" height="15.0" fill="rgb(234,107,42)" rx="2" ry="2" />
<text  x="162.69" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (5 samples, 0.05%)</title><rect x="941.2" y="597" width="0.7" height="15.0" fill="rgb(208,19,25)" rx="2" ry="2" />
<text  x="944.23" y="607.5" ></text>
</g>
<g >
<title>__interceptor_free (1 samples, 0.01%)</title><rect x="169.1" y="389" width="0.1" height="15.0" fill="rgb(209,70,29)" rx="2" ry="2" />
<text  x="172.05" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;BaseUi, (__gnu_cxx::_Lock_policy)2&gt;::get (1 samples, 0.01%)</title><rect x="295.7" y="709" width="0.1" height="15.0" fill="rgb(247,170,42)" rx="2" ry="2" />
<text  x="298.68" y="719.5" ></text>
</g>
<g >
<title>Sprite::SetZoomX (1 samples, 0.01%)</title><rect x="1103.7" y="709" width="0.2" height="15.0" fill="rgb(209,204,31)" rx="2" ry="2" />
<text  x="1106.75" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;short&gt;::_Rb_tree_const_iterator (1 samples, 0.01%)</title><rect x="304.9" y="741" width="0.1" height="15.0" fill="rgb(250,70,10)" rx="2" ry="2" />
<text  x="307.90" y="751.5" ></text>
</g>
<g >
<title>__sched_text_start (79 samples, 0.86%)</title><rect x="61.0" y="789" width="10.1" height="15.0" fill="rgb(226,71,16)" rx="2" ry="2" />
<text  x="64.01" y="799.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandPlaySound (17 samples, 0.18%)</title><rect x="935.7" y="677" width="2.2" height="15.0" fill="rgb(245,88,1)" rx="2" ry="2" />
<text  x="938.72" y="687.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandStoreTerrainID (13 samples, 0.14%)</title><rect x="961.1" y="677" width="1.7" height="15.0" fill="rgb(245,165,38)" rx="2" ry="2" />
<text  x="964.10" y="687.5" ></text>
</g>
<g >
<title>Graphics::IsTransitionPending (3 samples, 0.03%)</title><rect x="1187.9" y="789" width="0.4" height="15.0" fill="rgb(206,146,54)" rx="2" ry="2" />
<text  x="1190.95" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::get (1 samples, 0.01%)</title><rect x="1188.2" y="757" width="0.1" height="15.0" fill="rgb(225,202,30)" rx="2" ry="2" />
<text  x="1191.21" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;TilemapLayer::TileData, std::allocator&lt;TilemapLayer::TileData&gt; &gt;, std::allocator&lt;std::vector&lt;TilemapLayer::TileData, std::allocator&lt;TilemapLayer::TileData&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.02%)</title><rect x="322.5" y="741" width="0.2" height="15.0" fill="rgb(209,30,4)" rx="2" ry="2" />
<text  x="325.46" y="751.5" ></text>
</g>
<g >
<title>__GI___writev (1 samples, 0.01%)</title><rect x="1120.9" y="565" width="0.1" height="15.0" fill="rgb(246,169,29)" rx="2" ry="2" />
<text  x="1123.92" y="575.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.02%)</title><rect x="953.9" y="325" width="0.3" height="15.0" fill="rgb(206,208,17)" rx="2" ry="2" />
<text  x="956.92" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="1106.7" y="709" width="0.1" height="15.0" fill="rgb(223,179,50)" rx="2" ry="2" />
<text  x="1109.69" y="719.5" ></text>
</g>
<g >
<title>ip_route_input_noref (1 samples, 0.01%)</title><rect x="121.8" y="517" width="0.1" height="15.0" fill="rgb(226,209,12)" rx="2" ry="2" />
<text  x="124.76" y="527.5" ></text>
</g>
<g >
<title>usb_hcd_giveback_urb (1 samples, 0.01%)</title><rect x="582.5" y="453" width="0.1" height="15.0" fill="rgb(217,227,46)" rx="2" ry="2" />
<text  x="585.51" y="463.5" ></text>
</g>
<g >
<title>xhci_get_frame (1 samples, 0.01%)</title><rect x="998.5" y="309" width="0.2" height="15.0" fill="rgb(211,14,41)" rx="2" ry="2" />
<text  x="1001.52" y="319.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (4 samples, 0.04%)</title><rect x="805.9" y="629" width="0.5" height="15.0" fill="rgb(228,179,13)" rx="2" ry="2" />
<text  x="808.89" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.04%)</title><rect x="1120.0" y="565" width="0.5" height="15.0" fill="rgb(239,104,20)" rx="2" ry="2" />
<text  x="1123.02" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_ppoll (1 samples, 0.01%)</title><rect x="57.8" y="901" width="0.1" height="15.0" fill="rgb(220,223,44)" rx="2" ry="2" />
<text  x="60.80" y="911.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::_M_ptr (2 samples, 0.02%)</title><rect x="1104.1" y="677" width="0.3" height="15.0" fill="rgb(234,112,27)" rx="2" ry="2" />
<text  x="1107.13" y="687.5" ></text>
</g>
<g >
<title>__GI___pthread_getspecific (1 samples, 0.01%)</title><rect x="940.1" y="517" width="0.1" height="15.0" fill="rgb(245,195,39)" rx="2" ry="2" />
<text  x="943.08" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (6 samples, 0.07%)</title><rect x="958.0" y="581" width="0.8" height="15.0" fill="rgb(206,47,46)" rx="2" ry="2" />
<text  x="961.02" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;::~_Tuple_impl (1 samples, 0.01%)</title><rect x="951.7" y="389" width="0.2" height="15.0" fill="rgb(241,203,21)" rx="2" ry="2" />
<text  x="954.74" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (47 samples, 0.51%)</title><rect x="556.0" y="661" width="6.0" height="15.0" fill="rgb(214,46,24)" rx="2" ry="2" />
<text  x="558.98" y="671.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, FileRequestAsync, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::begin (3 samples, 0.03%)</title><rect x="1167.2" y="773" width="0.4" height="15.0" fill="rgb(227,25,33)" rx="2" ry="2" />
<text  x="1170.19" y="783.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (1 samples, 0.01%)</title><rect x="957.6" y="325" width="0.2" height="15.0" fill="rgb(216,142,28)" rx="2" ry="2" />
<text  x="960.64" y="335.5" ></text>
</g>
<g >
<title>update_curr (2 samples, 0.02%)</title><rect x="61.1" y="725" width="0.3" height="15.0" fill="rgb(224,1,47)" rx="2" ry="2" />
<text  x="64.14" y="735.5" ></text>
</g>
<g >
<title>std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;::operator() (2 samples, 0.02%)</title><rect x="166.0" y="501" width="0.2" height="15.0" fill="rgb(221,165,30)" rx="2" ry="2" />
<text  x="168.97" y="511.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.01%)</title><rect x="161.1" y="277" width="0.1" height="15.0" fill="rgb(238,171,35)" rx="2" ry="2" />
<text  x="164.10" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::operator (2 samples, 0.02%)</title><rect x="1104.1" y="709" width="0.3" height="15.0" fill="rgb(251,166,35)" rx="2" ry="2" />
<text  x="1107.13" y="719.5" ></text>
</g>
<g >
<title>Bitmap::height (2 samples, 0.02%)</title><rect x="228.6" y="709" width="0.3" height="15.0" fill="rgb(243,147,3)" rx="2" ry="2" />
<text  x="231.65" y="719.5" ></text>
</g>
<g >
<title>Game_Map::UpdateCommonEvents (2 samples, 0.02%)</title><rect x="167.0" y="837" width="0.3" height="15.0" fill="rgb(254,166,46)" rx="2" ry="2" />
<text  x="170.00" y="847.5" ></text>
</g>
<g >
<title>Sprite::Draw (391 samples, 4.25%)</title><rect x="181.6" y="773" width="50.1" height="15.0" fill="rgb(254,112,2)" rx="2" ry="2" />
<text  x="184.61" y="783.5" >Sprit..</text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::swap (3 samples, 0.03%)</title><rect x="231.0" y="709" width="0.3" height="15.0" fill="rgb(241,184,23)" rx="2" ry="2" />
<text  x="233.95" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="948.7" y="357" width="0.1" height="15.0" fill="rgb(235,205,26)" rx="2" ry="2" />
<text  x="951.67" y="367.5" ></text>
</g>
<g >
<title>std::_Temporary_buffer&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable*&gt;::_Temporary_buffer (2 samples, 0.02%)</title><rect x="181.0" y="741" width="0.2" height="15.0" fill="rgb(219,213,16)" rx="2" ry="2" />
<text  x="183.97" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::base (11 samples, 0.12%)</title><rect x="581.1" y="661" width="1.4" height="15.0" fill="rgb(254,24,51)" rx="2" ry="2" />
<text  x="584.10" y="671.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.01%)</title><rect x="1119.8" y="565" width="0.1" height="15.0" fill="rgb(244,55,7)" rx="2" ry="2" />
<text  x="1122.77" y="575.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="225.7" y="613" width="0.1" height="15.0" fill="rgb(246,120,2)" rx="2" ry="2" />
<text  x="228.70" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (1 samples, 0.01%)</title><rect x="925.6" y="629" width="0.1" height="15.0" fill="rgb(247,16,35)" rx="2" ry="2" />
<text  x="928.60" y="639.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.01%)</title><rect x="1004.9" y="533" width="0.2" height="15.0" fill="rgb(205,100,50)" rx="2" ry="2" />
<text  x="1007.93" y="543.5" ></text>
</g>
<g >
<title>ondemand_readahead (2 samples, 0.02%)</title><rect x="156.2" y="245" width="0.3" height="15.0" fill="rgb(247,164,32)" rx="2" ry="2" />
<text  x="159.23" y="255.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="259.4" y="709" width="0.1" height="15.0" fill="rgb(236,156,24)" rx="2" ry="2" />
<text  x="262.41" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::base (1 samples, 0.01%)</title><rect x="1040.6" y="661" width="0.1" height="15.0" fill="rgb(237,75,36)" rx="2" ry="2" />
<text  x="1043.56" y="671.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.01%)</title><rect x="548.7" y="597" width="0.1" height="15.0" fill="rgb(212,163,23)" rx="2" ry="2" />
<text  x="551.67" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.8" y="517" width="0.2" height="15.0" fill="rgb(219,80,28)" rx="2" ry="2" />
<text  x="178.84" y="527.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.01%)</title><rect x="1082.3" y="565" width="0.2" height="15.0" fill="rgb(222,139,16)" rx="2" ry="2" />
<text  x="1085.34" y="575.5" ></text>
</g>
<g >
<title>Game_Map::Update (2 samples, 0.02%)</title><rect x="174.8" y="773" width="0.3" height="15.0" fill="rgb(229,187,21)" rx="2" ry="2" />
<text  x="177.82" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_ptr (15 samples, 0.16%)</title><rect x="1157.1" y="741" width="1.9" height="15.0" fill="rgb(245,1,33)" rx="2" ry="2" />
<text  x="1160.06" y="751.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (8 samples, 0.09%)</title><rect x="120.9" y="837" width="1.0" height="15.0" fill="rgb(252,123,7)" rx="2" ry="2" />
<text  x="123.86" y="847.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (3 samples, 0.03%)</title><rect x="117.0" y="901" width="0.4" height="15.0" fill="rgb(216,221,26)" rx="2" ry="2" />
<text  x="120.02" y="911.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (9 samples, 0.10%)</title><rect x="120.7" y="853" width="1.2" height="15.0" fill="rgb(234,207,23)" rx="2" ry="2" />
<text  x="123.73" y="863.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="548.7" y="661" width="0.1" height="15.0" fill="rgb(254,22,6)" rx="2" ry="2" />
<text  x="551.67" y="671.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="155.5" y="661" width="0.2" height="15.0" fill="rgb(206,88,12)" rx="2" ry="2" />
<text  x="158.47" y="671.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="1110.4" y="661" width="0.1" height="15.0" fill="rgb(220,20,5)" rx="2" ry="2" />
<text  x="1113.41" y="671.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="477.9" y="565" width="0.2" height="15.0" fill="rgb(213,23,8)" rx="2" ry="2" />
<text  x="480.92" y="575.5" ></text>
</g>
<g >
<title>do_sys_poll (8 samples, 0.09%)</title><rect x="1121.0" y="501" width="1.1" height="15.0" fill="rgb(240,212,39)" rx="2" ry="2" />
<text  x="1124.05" y="511.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.03%)</title><rect x="165.6" y="309" width="0.4" height="15.0" fill="rgb(209,144,19)" rx="2" ry="2" />
<text  x="168.59" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="933.8" y="629" width="0.1" height="15.0" fill="rgb(226,60,34)" rx="2" ry="2" />
<text  x="936.80" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::function&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;, void, void&gt; (4 samples, 0.04%)</title><rect x="944.8" y="613" width="0.5" height="15.0" fill="rgb(233,123,39)" rx="2" ry="2" />
<text  x="947.82" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (6 samples, 0.07%)</title><rect x="155.7" y="581" width="0.8" height="15.0" fill="rgb(216,158,45)" rx="2" ry="2" />
<text  x="158.72" y="591.5" ></text>
</g>
<g >
<title>pixman_transform_point_3d (1 samples, 0.01%)</title><rect x="225.6" y="645" width="0.1" height="15.0" fill="rgb(231,193,52)" rx="2" ry="2" />
<text  x="228.57" y="655.5" ></text>
</g>
<g >
<title>Game_Character::GetScreenY (1 samples, 0.01%)</title><rect x="1108.0" y="709" width="0.1" height="15.0" fill="rgb(216,223,39)" rx="2" ry="2" />
<text  x="1110.98" y="719.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*, unsigned char&gt; (1 samples, 0.01%)</title><rect x="159.6" y="597" width="0.1" height="15.0" fill="rgb(231,47,52)" rx="2" ry="2" />
<text  x="162.57" y="607.5" ></text>
</g>
<g >
<title>calloc (1 samples, 0.01%)</title><rect x="175.8" y="533" width="0.2" height="15.0" fill="rgb(226,123,30)" rx="2" ry="2" />
<text  x="178.84" y="543.5" ></text>
</g>
<g >
<title>__fopen_internal (1 samples, 0.01%)</title><rect x="166.5" y="453" width="0.1" height="15.0" fill="rgb(216,132,49)" rx="2" ry="2" />
<text  x="169.49" y="463.5" ></text>
</g>
<g >
<title>TilemapLayer::Draw(int)::{lambda(int, int)#2}::operator() (3 samples, 0.03%)</title><rect x="112.9" y="901" width="0.4" height="15.0" fill="rgb(235,164,42)" rx="2" ry="2" />
<text  x="115.92" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::allocate (1 samples, 0.01%)</title><rect x="175.6" y="501" width="0.1" height="15.0" fill="rgb(226,44,33)" rx="2" ry="2" />
<text  x="178.59" y="511.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*&gt; (1 samples, 0.01%)</title><rect x="159.6" y="581" width="0.1" height="15.0" fill="rgb(216,167,41)" rx="2" ry="2" />
<text  x="162.57" y="591.5" ></text>
</g>
<g >
<title>AudioResampler::Open (1 samples, 0.01%)</title><rect x="936.0" y="453" width="0.1" height="15.0" fill="rgb(253,194,1)" rx="2" ry="2" />
<text  x="938.98" y="463.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (1 samples, 0.01%)</title><rect x="177.3" y="869" width="0.1" height="15.0" fill="rgb(211,216,40)" rx="2" ry="2" />
<text  x="180.25" y="879.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (2 samples, 0.02%)</title><rect x="950.3" y="309" width="0.3" height="15.0" fill="rgb(226,175,41)" rx="2" ry="2" />
<text  x="953.33" y="319.5" ></text>
</g>
<g >
<title>Cache::Picture (1 samples, 0.01%)</title><rect x="166.5" y="677" width="0.1" height="15.0" fill="rgb(215,91,2)" rx="2" ry="2" />
<text  x="169.49" y="687.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandControlVariables (1 samples, 0.01%)</title><rect x="76.9" y="901" width="0.1" height="15.0" fill="rgb(211,52,15)" rx="2" ry="2" />
<text  x="79.90" y="911.5" ></text>
</g>
<g >
<title>Cache::Picture (1 samples, 0.01%)</title><rect x="168.9" y="517" width="0.2" height="15.0" fill="rgb(236,81,5)" rx="2" ry="2" />
<text  x="171.92" y="527.5" ></text>
</g>
<g >
<title>std::move&lt;Bitmap*&amp;&gt; (1 samples, 0.01%)</title><rect x="231.1" y="693" width="0.1" height="15.0" fill="rgb(244,36,11)" rx="2" ry="2" />
<text  x="234.08" y="703.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="1148.7" y="725" width="0.2" height="15.0" fill="rgb(231,68,39)" rx="2" ry="2" />
<text  x="1151.73" y="735.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (2 samples, 0.02%)</title><rect x="175.8" y="901" width="0.3" height="15.0" fill="rgb(214,11,49)" rx="2" ry="2" />
<text  x="178.84" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.01%)</title><rect x="169.7" y="501" width="0.1" height="15.0" fill="rgb(236,40,6)" rx="2" ry="2" />
<text  x="172.69" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_M_lower_bound (8 samples, 0.09%)</title><rect x="950.1" y="373" width="1.0" height="15.0" fill="rgb(216,128,17)" rx="2" ry="2" />
<text  x="953.08" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Game_Event*, std::vector&lt;Game_Event, std::allocator&lt;Game_Event&gt; &gt; &gt;::__normal_iterator (7 samples, 0.08%)</title><rect x="1068.6" y="677" width="0.9" height="15.0" fill="rgb(214,29,31)" rx="2" ry="2" />
<text  x="1071.63" y="687.5" ></text>
</g>
<g >
<title>xcb_poll_for_event (1 samples, 0.01%)</title><rect x="1128.0" y="677" width="0.1" height="15.0" fill="rgb(232,50,25)" rx="2" ry="2" />
<text  x="1130.97" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="941.0" y="581" width="0.1" height="15.0" fill="rgb(230,55,24)" rx="2" ry="2" />
<text  x="943.98" y="591.5" ></text>
</g>
<g >
<title>xhci_giveback_urb_in_irq.isra.43 (1 samples, 0.01%)</title><rect x="74.1" y="725" width="0.1" height="15.0" fill="rgb(241,194,34)" rx="2" ry="2" />
<text  x="77.08" y="735.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="998.5" y="501" width="0.2" height="15.0" fill="rgb(214,44,5)" rx="2" ry="2" />
<text  x="1001.52" y="511.5" ></text>
</g>
<g >
<title>std::__stable_sort&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (40 samples, 0.43%)</title><rect x="323.5" y="757" width="5.1" height="15.0" fill="rgb(235,105,46)" rx="2" ry="2" />
<text  x="326.49" y="767.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="1155.9" y="677" width="0.1" height="15.0" fill="rgb(252,43,49)" rx="2" ry="2" />
<text  x="1158.91" y="687.5" ></text>
</g>
<g >
<title>read_pages (2 samples, 0.02%)</title><rect x="156.2" y="213" width="0.3" height="15.0" fill="rgb(251,60,44)" rx="2" ry="2" />
<text  x="159.23" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (18 samples, 0.20%)</title><rect x="658.5" y="629" width="2.3" height="15.0" fill="rgb(248,106,50)" rx="2" ry="2" />
<text  x="661.51" y="639.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.01%)</title><rect x="950.0" y="389" width="0.1" height="15.0" fill="rgb(213,214,5)" rx="2" ry="2" />
<text  x="952.95" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_recvmsg (3 samples, 0.03%)</title><rect x="1119.4" y="533" width="0.4" height="15.0" fill="rgb(217,172,39)" rx="2" ry="2" />
<text  x="1122.38" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::get (1 samples, 0.01%)</title><rect x="960.2" y="629" width="0.1" height="15.0" fill="rgb(248,164,13)" rx="2" ry="2" />
<text  x="963.20" y="639.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (2 samples, 0.02%)</title><rect x="74.0" y="821" width="0.2" height="15.0" fill="rgb(239,228,50)" rx="2" ry="2" />
<text  x="76.95" y="831.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="70.7" y="757" width="0.2" height="15.0" fill="rgb(241,206,0)" rx="2" ry="2" />
<text  x="73.75" y="767.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="174.9" y="389" width="0.2" height="15.0" fill="rgb(248,160,47)" rx="2" ry="2" />
<text  x="177.95" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.02%)</title><rect x="482.2" y="741" width="0.2" height="15.0" fill="rgb(245,171,37)" rx="2" ry="2" />
<text  x="485.15" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator!= (12 samples, 0.13%)</title><rect x="1177.8" y="757" width="1.6" height="15.0" fill="rgb(247,149,50)" rx="2" ry="2" />
<text  x="1180.82" y="767.5" ></text>
</g>
<g >
<title>pixman_image_composite32 (1 samples, 0.01%)</title><rect x="159.3" y="389" width="0.1" height="15.0" fill="rgb(253,58,30)" rx="2" ry="2" />
<text  x="162.31" y="399.5" ></text>
</g>
<g >
<title>do_page_fault (4 samples, 0.04%)</title><rect x="73.3" y="901" width="0.5" height="15.0" fill="rgb(243,91,14)" rx="2" ry="2" />
<text  x="76.31" y="911.5" ></text>
</g>
<g >
<title>Graphics::SortDrawableList (2 samples, 0.02%)</title><rect x="326.2" y="645" width="0.2" height="15.0" fill="rgb(251,56,19)" rx="2" ry="2" />
<text  x="329.18" y="655.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (6 samples, 0.07%)</title><rect x="169.1" y="805" width="0.7" height="15.0" fill="rgb(212,192,11)" rx="2" ry="2" />
<text  x="172.05" y="815.5" ></text>
</g>
<g >
<title>Game_Picture::GetData (1 samples, 0.01%)</title><rect x="959.2" y="629" width="0.1" height="15.0" fill="rgb(218,79,18)" rx="2" ry="2" />
<text  x="962.18" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (4 samples, 0.04%)</title><rect x="177.8" y="901" width="0.5" height="15.0" fill="rgb(206,27,11)" rx="2" ry="2" />
<text  x="180.77" y="911.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="1051.7" y="581" width="0.1" height="15.0" fill="rgb(251,17,41)" rx="2" ry="2" />
<text  x="1054.71" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (103 samples, 1.12%)</title><rect x="548.8" y="677" width="13.2" height="15.0" fill="rgb(209,142,19)" rx="2" ry="2" />
<text  x="551.80" y="687.5" ></text>
</g>
<g >
<title>Game_Map::Update (6 samples, 0.07%)</title><rect x="169.1" y="885" width="0.7" height="15.0" fill="rgb(224,53,32)" rx="2" ry="2" />
<text  x="172.05" y="895.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1189.2" y="901" width="0.2" height="15.0" fill="rgb(218,204,45)" rx="2" ry="2" />
<text  x="1192.23" y="911.5" ></text>
</g>
<g >
<title>Sprite::SetX (1 samples, 0.01%)</title><rect x="82.4" y="901" width="0.1" height="15.0" fill="rgb(212,206,14)" rx="2" ry="2" />
<text  x="85.41" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::size (1 samples, 0.01%)</title><rect x="178.3" y="901" width="0.1" height="15.0" fill="rgb(239,183,24)" rx="2" ry="2" />
<text  x="181.28" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::reset (3 samples, 0.03%)</title><rect x="926.1" y="645" width="0.4" height="15.0" fill="rgb(215,17,23)" rx="2" ry="2" />
<text  x="929.11" y="655.5" ></text>
</g>
<g >
<title>do_IRQ (2 samples, 0.02%)</title><rect x="468.3" y="693" width="0.3" height="15.0" fill="rgb(210,93,25)" rx="2" ry="2" />
<text  x="471.31" y="703.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (62 samples, 0.67%)</title><rect x="1118.7" y="741" width="8.0" height="15.0" fill="rgb(242,75,41)" rx="2" ry="2" />
<text  x="1121.74" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="1111.3" y="677" width="0.1" height="15.0" fill="rgb(243,29,33)" rx="2" ry="2" />
<text  x="1114.31" y="687.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (74 samples, 0.80%)</title><rect x="947.3" y="533" width="9.4" height="15.0" fill="rgb(206,158,40)" rx="2" ry="2" />
<text  x="950.26" y="543.5" ></text>
</g>
<g >
<title>__GI___poll (2 samples, 0.02%)</title><rect x="1128.5" y="709" width="0.2" height="15.0" fill="rgb(239,79,36)" rx="2" ry="2" />
<text  x="1131.48" y="719.5" ></text>
</g>
<g >
<title>Game_Interpreter::Update (45 samples, 0.49%)</title><rect x="160.7" y="869" width="5.8" height="15.0" fill="rgb(215,76,31)" rx="2" ry="2" />
<text  x="163.72" y="879.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (2 samples, 0.02%)</title><rect x="155.5" y="853" width="0.2" height="15.0" fill="rgb(237,112,40)" rx="2" ry="2" />
<text  x="158.47" y="863.5" ></text>
</g>
<g >
<title>__calc_delta (1 samples, 0.01%)</title><rect x="942.8" y="405" width="0.1" height="15.0" fill="rgb(216,98,43)" rx="2" ry="2" />
<text  x="945.77" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (14 samples, 0.15%)</title><rect x="244.4" y="677" width="1.8" height="15.0" fill="rgb(228,181,11)" rx="2" ry="2" />
<text  x="247.41" y="687.5" ></text>
</g>
<g >
<title>poll (2 samples, 0.02%)</title><rect x="1128.5" y="725" width="0.2" height="15.0" fill="rgb(242,4,46)" rx="2" ry="2" />
<text  x="1131.48" y="735.5" ></text>
</g>
<g >
<title>pthread_getspecific@plt (1 samples, 0.01%)</title><rect x="189.2" y="629" width="0.1" height="15.0" fill="rgb(251,1,20)" rx="2" ry="2" />
<text  x="192.17" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator* (8 samples, 0.09%)</title><rect x="94.2" y="901" width="1.0" height="15.0" fill="rgb(216,14,7)" rx="2" ry="2" />
<text  x="97.20" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt;::emplace_back&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="944.1" y="581" width="0.1" height="15.0" fill="rgb(206,26,52)" rx="2" ry="2" />
<text  x="947.05" y="591.5" ></text>
</g>
<g >
<title>ReaderUtil::Normalize (2 samples, 0.02%)</title><rect x="160.5" y="517" width="0.2" height="15.0" fill="rgb(244,37,40)" rx="2" ry="2" />
<text  x="163.46" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt; (5 samples, 0.05%)</title><rect x="657.9" y="629" width="0.6" height="15.0" fill="rgb(241,139,21)" rx="2" ry="2" />
<text  x="660.87" y="639.5" ></text>
</g>
<g >
<title>_IO_new_file_fopen (2 samples, 0.02%)</title><rect x="155.5" y="469" width="0.2" height="15.0" fill="rgb(228,59,27)" rx="2" ry="2" />
<text  x="158.47" y="479.5" ></text>
</g>
<g >
<title>Game_Character::data (1 samples, 0.01%)</title><rect x="1097.9" y="725" width="0.1" height="15.0" fill="rgb(208,19,17)" rx="2" ry="2" />
<text  x="1100.85" y="735.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="174.8" y="469" width="0.3" height="15.0" fill="rgb(226,161,5)" rx="2" ry="2" />
<text  x="177.82" y="479.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (3 samples, 0.03%)</title><rect x="806.0" y="581" width="0.4" height="15.0" fill="rgb(249,43,0)" rx="2" ry="2" />
<text  x="809.02" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.3" y="661" width="0.1" height="15.0" fill="rgb(238,212,28)" rx="2" ry="2" />
<text  x="180.25" y="671.5" ></text>
</g>
<g >
<title>Player::Run (7,880 samples, 85.59%)</title><rect x="178.9" y="869" width="1009.9" height="15.0" fill="rgb(206,5,29)" rx="2" ry="2" />
<text  x="181.92" y="879.5" >Player::Run</text>
</g>
<g >
<title>Game_Map::Update (14 samples, 0.15%)</title><rect x="167.3" y="869" width="1.8" height="15.0" fill="rgb(248,153,9)" rx="2" ry="2" />
<text  x="170.26" y="879.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="166.0" y="405" width="0.2" height="15.0" fill="rgb(240,146,40)" rx="2" ry="2" />
<text  x="168.97" y="415.5" ></text>
</g>
<g >
<title>usb_hcd_get_frame_number (1 samples, 0.01%)</title><rect x="74.1" y="629" width="0.1" height="15.0" fill="rgb(248,91,15)" rx="2" ry="2" />
<text  x="77.08" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (2 samples, 0.02%)</title><rect x="1111.7" y="661" width="0.2" height="15.0" fill="rgb(217,114,26)" rx="2" ry="2" />
<text  x="1114.69" y="671.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (32 samples, 0.35%)</title><rect x="281.4" y="677" width="4.2" height="15.0" fill="rgb(235,220,39)" rx="2" ry="2" />
<text  x="284.45" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;int, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::deallocate (4 samples, 0.04%)</title><rect x="958.3" y="501" width="0.5" height="15.0" fill="rgb(225,174,44)" rx="2" ry="2" />
<text  x="961.28" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;AudioSeCache, std::default_delete&lt;AudioSeCache&gt; &gt;::~unique_ptr (1 samples, 0.01%)</title><rect x="169.1" y="581" width="0.1" height="15.0" fill="rgb(230,130,46)" rx="2" ry="2" />
<text  x="172.05" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.01%)</title><rect x="174.8" y="357" width="0.1" height="15.0" fill="rgb(232,142,19)" rx="2" ry="2" />
<text  x="177.82" y="367.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (35 samples, 0.38%)</title><rect x="471.0" y="597" width="4.5" height="15.0" fill="rgb(234,205,50)" rx="2" ry="2" />
<text  x="474.00" y="607.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="998.5" y="581" width="0.2" height="15.0" fill="rgb(239,139,53)" rx="2" ry="2" />
<text  x="1001.52" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size@plt (1 samples, 0.01%)</title><rect x="1108.2" y="709" width="0.2" height="15.0" fill="rgb(208,19,12)" rx="2" ry="2" />
<text  x="1111.23" y="719.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="948.9" y="293" width="0.2" height="15.0" fill="rgb(251,10,22)" rx="2" ry="2" />
<text  x="951.92" y="303.5" ></text>
</g>
<g >
<title>Screen::GetZ (1 samples, 0.01%)</title><rect x="82.2" y="901" width="0.1" height="15.0" fill="rgb(219,176,5)" rx="2" ry="2" />
<text  x="85.16" y="911.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.01%)</title><rect x="954.3" y="341" width="0.1" height="15.0" fill="rgb(236,130,18)" rx="2" ry="2" />
<text  x="957.31" y="351.5" ></text>
</g>
<g >
<title>std::move&lt;Sprite*&amp;&gt; (1 samples, 0.01%)</title><rect x="103.8" y="901" width="0.1" height="15.0" fill="rgb(239,112,42)" rx="2" ry="2" />
<text  x="106.82" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="189.7" y="645" width="0.1" height="15.0" fill="rgb(207,125,10)" rx="2" ry="2" />
<text  x="192.69" y="655.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (2 samples, 0.02%)</title><rect x="114.2" y="853" width="0.3" height="15.0" fill="rgb(210,154,5)" rx="2" ry="2" />
<text  x="117.20" y="863.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Player, std::default_delete&lt;Game_Player&gt; &gt;::get (1 samples, 0.01%)</title><rect x="104.3" y="901" width="0.2" height="15.0" fill="rgb(217,1,53)" rx="2" ry="2" />
<text  x="107.33" y="911.5" ></text>
</g>
<g >
<title>Sprite_Character::Update (6 samples, 0.07%)</title><rect x="1107.6" y="757" width="0.8" height="15.0" fill="rgb(247,28,18)" rx="2" ry="2" />
<text  x="1110.59" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;Game_CommonEvent, std::allocator&lt;Game_CommonEvent&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="106.4" y="901" width="0.1" height="15.0" fill="rgb(232,17,29)" rx="2" ry="2" />
<text  x="109.38" y="911.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="259.4" y="677" width="0.1" height="15.0" fill="rgb(216,158,2)" rx="2" ry="2" />
<text  x="262.41" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt; &gt;::_M_invoke (2 samples, 0.02%)</title><rect x="167.0" y="661" width="0.3" height="15.0" fill="rgb(240,9,42)" rx="2" ry="2" />
<text  x="170.00" y="671.5" ></text>
</g>
<g >
<title>MessageOverlay::Draw (1 samples, 0.01%)</title><rect x="80.9" y="901" width="0.1" height="15.0" fill="rgb(226,214,0)" rx="2" ry="2" />
<text  x="83.87" y="911.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.01%)</title><rect x="1111.2" y="613" width="0.1" height="15.0" fill="rgb(254,16,7)" rx="2" ry="2" />
<text  x="1114.18" y="623.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (3 samples, 0.03%)</title><rect x="159.2" y="693" width="0.4" height="15.0" fill="rgb(250,3,41)" rx="2" ry="2" />
<text  x="162.18" y="703.5" ></text>
</g>
<g >
<title>SdlMixerAudio::SE_Play (2 samples, 0.02%)</title><rect x="167.0" y="565" width="0.3" height="15.0" fill="rgb(244,102,28)" rx="2" ry="2" />
<text  x="170.00" y="575.5" ></text>
</g>
<g >
<title>Plane::SetOx (1 samples, 0.01%)</title><rect x="1107.5" y="757" width="0.1" height="15.0" fill="rgb(230,121,16)" rx="2" ry="2" />
<text  x="1110.46" y="767.5" ></text>
</g>
<g >
<title>__x64_sys_nanosleep (16 samples, 0.17%)</title><rect x="1128.7" y="725" width="2.1" height="15.0" fill="rgb(211,215,53)" rx="2" ry="2" />
<text  x="1131.74" y="735.5" ></text>
</g>
<g >
<title>update_blocked_averages (3 samples, 0.03%)</title><rect x="806.0" y="549" width="0.4" height="15.0" fill="rgb(252,42,33)" rx="2" ry="2" />
<text  x="809.02" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt;::operator()&lt;Drawable*, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="326.2" y="661" width="0.2" height="15.0" fill="rgb(212,6,15)" rx="2" ry="2" />
<text  x="329.18" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="174.9" y="277" width="0.2" height="15.0" fill="rgb(229,170,8)" rx="2" ry="2" />
<text  x="177.95" y="287.5" ></text>
</g>
<g >
<title>ctx_sched_out (1 samples, 0.01%)</title><rect x="156.1" y="181" width="0.1" height="15.0" fill="rgb(226,146,39)" rx="2" ry="2" />
<text  x="159.11" y="191.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (6 samples, 0.07%)</title><rect x="160.0" y="645" width="0.7" height="15.0" fill="rgb(210,79,7)" rx="2" ry="2" />
<text  x="162.95" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="942.6" y="517" width="0.2" height="15.0" fill="rgb(211,74,50)" rx="2" ry="2" />
<text  x="945.64" y="527.5" ></text>
</g>
<g >
<title>pthread_getspecific@plt (1 samples, 0.01%)</title><rect x="286.6" y="645" width="0.1" height="15.0" fill="rgb(247,156,22)" rx="2" ry="2" />
<text  x="289.58" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_M_get_node (1 samples, 0.01%)</title><rect x="942.6" y="565" width="0.2" height="15.0" fill="rgb(252,60,34)" rx="2" ry="2" />
<text  x="945.64" y="575.5" ></text>
</g>
<g >
<title>put_timespec64 (1 samples, 0.01%)</title><rect x="1117.3" y="693" width="0.2" height="15.0" fill="rgb(246,148,45)" rx="2" ry="2" />
<text  x="1120.33" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="320.2" y="741" width="0.1" height="15.0" fill="rgb(238,39,48)" rx="2" ry="2" />
<text  x="323.16" y="751.5" ></text>
</g>
<g >
<title>__fget (1 samples, 0.01%)</title><rect x="60.2" y="821" width="0.2" height="15.0" fill="rgb(212,75,53)" rx="2" ry="2" />
<text  x="63.24" y="831.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="892.0" y="629" width="0.1" height="15.0" fill="rgb(230,52,1)" rx="2" ry="2" />
<text  x="895.02" y="639.5" ></text>
</g>
<g >
<title>AudioResampler::FillBufferDifferentRate (1 samples, 0.01%)</title><rect x="161.0" y="549" width="0.1" height="15.0" fill="rgb(242,225,37)" rx="2" ry="2" />
<text  x="163.98" y="559.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_out (1 samples, 0.01%)</title><rect x="61.0" y="773" width="0.1" height="15.0" fill="rgb(248,34,13)" rx="2" ry="2" />
<text  x="64.01" y="783.5" ></text>
</g>
<g >
<title>__update_load_avg_cfs_rq (1 samples, 0.01%)</title><rect x="952.3" y="293" width="0.1" height="15.0" fill="rgb(210,99,46)" rx="2" ry="2" />
<text  x="955.26" y="303.5" ></text>
</g>
<g >
<title>Game_Map::GetDisplayX (1 samples, 0.01%)</title><rect x="938.9" y="645" width="0.2" height="15.0" fill="rgb(228,16,17)" rx="2" ry="2" />
<text  x="941.93" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (3 samples, 0.03%)</title><rect x="159.2" y="709" width="0.4" height="15.0" fill="rgb(249,129,4)" rx="2" ry="2" />
<text  x="162.18" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::~shared_ptr (2 samples, 0.02%)</title><rect x="227.9" y="725" width="0.2" height="15.0" fill="rgb(245,30,3)" rx="2" ry="2" />
<text  x="230.88" y="735.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, FpsOverlay*, std::default_delete&lt;FpsOverlay&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="96.3" y="901" width="0.1" height="15.0" fill="rgb(228,33,48)" rx="2" ry="2" />
<text  x="99.25" y="911.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="177.3" y="773" width="0.1" height="15.0" fill="rgb(236,126,12)" rx="2" ry="2" />
<text  x="180.25" y="783.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="956.2" y="357" width="0.3" height="15.0" fill="rgb(226,25,19)" rx="2" ry="2" />
<text  x="959.23" y="367.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (1 samples, 0.01%)</title><rect x="166.5" y="869" width="0.1" height="15.0" fill="rgb(226,94,0)" rx="2" ry="2" />
<text  x="169.49" y="879.5" ></text>
</g>
<g >
<title>Game_Map::IsValid (1 samples, 0.01%)</title><rect x="961.6" y="645" width="0.1" height="15.0" fill="rgb(218,89,53)" rx="2" ry="2" />
<text  x="964.61" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;AudioDecoder, std::default_delete&lt;AudioDecoder&gt; &gt;::~unique_ptr (1 samples, 0.01%)</title><rect x="169.1" y="533" width="0.1" height="15.0" fill="rgb(224,148,49)" rx="2" ry="2" />
<text  x="172.05" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (1 samples, 0.01%)</title><rect x="159.8" y="581" width="0.2" height="15.0" fill="rgb(220,111,47)" rx="2" ry="2" />
<text  x="162.82" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (31 samples, 0.34%)</title><rect x="161.4" y="469" width="3.9" height="15.0" fill="rgb(249,116,37)" rx="2" ry="2" />
<text  x="164.36" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 0.01%)</title><rect x="229.7" y="309" width="0.1" height="15.0" fill="rgb(244,46,34)" rx="2" ry="2" />
<text  x="232.67" y="319.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="1189.9" y="821" width="0.1" height="15.0" fill="rgb(210,12,28)" rx="2" ry="2" />
<text  x="1192.87" y="831.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (1 samples, 0.01%)</title><rect x="951.5" y="373" width="0.1" height="15.0" fill="rgb(210,111,39)" rx="2" ry="2" />
<text  x="954.49" y="383.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="167.0" y="469" width="0.1" height="15.0" fill="rgb(228,221,5)" rx="2" ry="2" />
<text  x="170.00" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (2 samples, 0.02%)</title><rect x="159.7" y="645" width="0.3" height="15.0" fill="rgb(212,61,13)" rx="2" ry="2" />
<text  x="162.69" y="655.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="468.2" y="677" width="0.1" height="15.0" fill="rgb(220,204,19)" rx="2" ry="2" />
<text  x="471.18" y="687.5" ></text>
</g>
<g >
<title>std::operator!=&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="1108.2" y="741" width="0.2" height="15.0" fill="rgb(243,42,36)" rx="2" ry="2" />
<text  x="1111.23" y="751.5" ></text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.01%)</title><rect x="60.8" y="837" width="0.1" height="15.0" fill="rgb(242,149,6)" rx="2" ry="2" />
<text  x="63.75" y="847.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, (anonymous namespace)::CacheItem, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="174.8" y="405" width="0.1" height="15.0" fill="rgb(227,214,5)" rx="2" ry="2" />
<text  x="177.82" y="415.5" ></text>
</g>
<g >
<title>Game_Character::SetProcessed (1 samples, 0.01%)</title><rect x="1097.9" y="741" width="0.1" height="15.0" fill="rgb(252,30,47)" rx="2" ry="2" />
<text  x="1100.85" y="751.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.6" y="421" width="0.1" height="15.0" fill="rgb(248,176,47)" rx="2" ry="2" />
<text  x="178.59" y="431.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="582.5" y="645" width="0.1" height="15.0" fill="rgb(230,206,7)" rx="2" ry="2" />
<text  x="585.51" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="952.5" y="373" width="0.1" height="15.0" fill="rgb(248,144,17)" rx="2" ry="2" />
<text  x="955.51" y="383.5" ></text>
</g>
<g >
<title>Window_Selectable::Update (11 samples, 0.12%)</title><rect x="1110.7" y="757" width="1.4" height="15.0" fill="rgb(225,203,16)" rx="2" ry="2" />
<text  x="1113.67" y="767.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandEndEventProcessing (1 samples, 0.01%)</title><rect x="901.0" y="677" width="0.1" height="15.0" fill="rgb(248,148,7)" rx="2" ry="2" />
<text  x="903.99" y="687.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1006.2" y="645" width="0.1" height="15.0" fill="rgb(211,205,1)" rx="2" ry="2" />
<text  x="1009.21" y="655.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="954.3" y="309" width="0.1" height="15.0" fill="rgb(253,98,30)" rx="2" ry="2" />
<text  x="957.31" y="319.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt;, std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt;, 1ul, 6ul&gt;::__less (1 samples, 0.01%)</title><rect x="229.9" y="645" width="0.2" height="15.0" fill="rgb(249,50,27)" rx="2" ry="2" />
<text  x="232.93" y="655.5" ></text>
</g>
<g >
<title>icu_63::UnicodeString::toUTF8String&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="166.7" y="693" width="0.2" height="15.0" fill="rgb(249,94,14)" rx="2" ry="2" />
<text  x="169.74" y="703.5" ></text>
</g>
<g >
<title>Game_Interpreter::Clear (7 samples, 0.08%)</title><rect x="1096.6" y="741" width="0.9" height="15.0" fill="rgb(238,128,11)" rx="2" ry="2" />
<text  x="1099.57" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (7 samples, 0.08%)</title><rect x="110.4" y="901" width="0.8" height="15.0" fill="rgb(205,94,46)" rx="2" ry="2" />
<text  x="113.35" y="911.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::_Vector_base (2 samples, 0.02%)</title><rect x="1096.7" y="693" width="0.3" height="15.0" fill="rgb(219,96,22)" rx="2" ry="2" />
<text  x="1099.70" y="703.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="954.9" y="261" width="0.2" height="15.0" fill="rgb(237,19,35)" rx="2" ry="2" />
<text  x="957.95" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (11 samples, 0.12%)</title><rect x="759.1" y="613" width="1.4" height="15.0" fill="rgb(246,148,44)" rx="2" ry="2" />
<text  x="762.11" y="623.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (49 samples, 0.53%)</title><rect x="1112.3" y="773" width="6.3" height="15.0" fill="rgb(245,90,0)" rx="2" ry="2" />
<text  x="1115.33" y="783.5" ></text>
</g>
<g >
<title>std::array&lt;int, 36ul&gt;::operator[] (1 samples, 0.01%)</title><rect x="929.7" y="629" width="0.1" height="15.0" fill="rgb(252,213,34)" rx="2" ry="2" />
<text  x="932.70" y="639.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="475.7" y="661" width="0.2" height="15.0" fill="rgb(219,140,16)" rx="2" ry="2" />
<text  x="478.75" y="671.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="892.0" y="549" width="0.1" height="15.0" fill="rgb(234,22,14)" rx="2" ry="2" />
<text  x="895.02" y="559.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1148.6" y="661" width="0.1" height="15.0" fill="rgb(206,60,8)" rx="2" ry="2" />
<text  x="1151.60" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;*&gt; (1 samples, 0.01%)</title><rect x="91.6" y="901" width="0.2" height="15.0" fill="rgb(237,44,19)" rx="2" ry="2" />
<text  x="94.64" y="911.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.02%)</title><rect x="1058.9" y="693" width="0.2" height="15.0" fill="rgb(248,112,45)" rx="2" ry="2" />
<text  x="1061.89" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::allocate (1 samples, 0.01%)</title><rect x="177.3" y="469" width="0.1" height="15.0" fill="rgb(238,210,8)" rx="2" ry="2" />
<text  x="180.25" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; const*, std::vector&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt;, std::allocator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; &gt; &gt; &gt; (9 samples, 0.10%)</title><rect x="288.8" y="693" width="1.1" height="15.0" fill="rgb(211,4,43)" rx="2" ry="2" />
<text  x="291.76" y="703.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="477.9" y="693" width="0.2" height="15.0" fill="rgb(213,202,24)" rx="2" ry="2" />
<text  x="480.92" y="703.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (1 samples, 0.01%)</title><rect x="91.8" y="901" width="0.1" height="15.0" fill="rgb(206,169,10)" rx="2" ry="2" />
<text  x="94.77" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="985.2" y="661" width="0.1" height="15.0" fill="rgb(214,71,27)" rx="2" ry="2" />
<text  x="988.19" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1111.3" y="661" width="0.1" height="15.0" fill="rgb(249,131,1)" rx="2" ry="2" />
<text  x="1114.31" y="671.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, (anonymous namespace)::CacheItem, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::find (2 samples, 0.02%)</title><rect x="1109.4" y="693" width="0.2" height="15.0" fill="rgb(213,203,43)" rx="2" ry="2" />
<text  x="1112.39" y="703.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="468.2" y="661" width="0.1" height="15.0" fill="rgb(212,140,4)" rx="2" ry="2" />
<text  x="471.18" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;TilemapSubLayer&gt; &gt; &gt;::destroy&lt;std::shared_ptr&lt;TilemapSubLayer&gt; &gt; (1 samples, 0.01%)</title><rect x="101.9" y="901" width="0.1" height="15.0" fill="rgb(221,101,21)" rx="2" ry="2" />
<text  x="104.89" y="911.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="805.9" y="581" width="0.1" height="15.0" fill="rgb(229,11,50)" rx="2" ry="2" />
<text  x="808.89" y="591.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="225.7" y="565" width="0.1" height="15.0" fill="rgb(224,127,18)" rx="2" ry="2" />
<text  x="228.70" y="575.5" ></text>
</g>
<g >
<title>Transition::IsActive (2 samples, 0.02%)</title><rect x="1169.4" y="789" width="0.2" height="15.0" fill="rgb(221,43,51)" rx="2" ry="2" />
<text  x="1172.37" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::size (1 samples, 0.01%)</title><rect x="610.4" y="693" width="0.2" height="15.0" fill="rgb(243,216,33)" rx="2" ry="2" />
<text  x="613.45" y="703.5" ></text>
</g>
<g >
<title>finish_task_switch (74 samples, 0.80%)</title><rect x="61.4" y="773" width="9.5" height="15.0" fill="rgb(224,213,41)" rx="2" ry="2" />
<text  x="64.39" y="783.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="561.9" y="581" width="0.1" height="15.0" fill="rgb(239,76,43)" rx="2" ry="2" />
<text  x="564.87" y="591.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (2 samples, 0.02%)</title><rect x="181.4" y="725" width="0.2" height="15.0" fill="rgb(216,134,42)" rx="2" ry="2" />
<text  x="184.35" y="735.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (1 samples, 0.01%)</title><rect x="159.6" y="821" width="0.1" height="15.0" fill="rgb(249,58,31)" rx="2" ry="2" />
<text  x="162.57" y="831.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool (char32_t), FileFinder::SplitPath(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)::{lambda(char32_t)#1}&gt;::_M_invoke (1 samples, 0.01%)</title><rect x="155.3" y="629" width="0.2" height="15.0" fill="rgb(221,99,18)" rx="2" ry="2" />
<text  x="158.34" y="639.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.01%)</title><rect x="475.4" y="549" width="0.1" height="15.0" fill="rgb(226,46,22)" rx="2" ry="2" />
<text  x="478.36" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="175.6" y="645" width="0.1" height="15.0" fill="rgb(241,125,27)" rx="2" ry="2" />
<text  x="178.59" y="655.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.01%)</title><rect x="177.0" y="469" width="0.1" height="15.0" fill="rgb(228,145,25)" rx="2" ry="2" />
<text  x="180.00" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (6 samples, 0.07%)</title><rect x="155.7" y="773" width="0.8" height="15.0" fill="rgb(251,12,20)" rx="2" ry="2" />
<text  x="158.72" y="783.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_destroy (1 samples, 0.01%)</title><rect x="957.1" y="421" width="0.2" height="15.0" fill="rgb(230,155,30)" rx="2" ry="2" />
<text  x="960.13" y="431.5" ></text>
</g>
<g >
<title>Bitmap::Init (1 samples, 0.01%)</title><rect x="162.4" y="357" width="0.1" height="15.0" fill="rgb(237,169,46)" rx="2" ry="2" />
<text  x="165.39" y="367.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="941.4" y="565" width="0.3" height="15.0" fill="rgb(225,8,19)" rx="2" ry="2" />
<text  x="944.36" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (3 samples, 0.03%)</title><rect x="159.2" y="453" width="0.4" height="15.0" fill="rgb(242,94,22)" rx="2" ry="2" />
<text  x="162.18" y="463.5" ></text>
</g>
<g >
<title>handle_tx_event (1 samples, 0.01%)</title><rect x="70.7" y="613" width="0.2" height="15.0" fill="rgb(248,156,11)" rx="2" ry="2" />
<text  x="73.75" y="623.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="548.5" y="597" width="0.2" height="15.0" fill="rgb(239,69,32)" rx="2" ry="2" />
<text  x="551.54" y="607.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, FileRequestAsync, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::end (2 samples, 0.02%)</title><rect x="1167.6" y="773" width="0.2" height="15.0" fill="rgb(210,222,9)" rx="2" ry="2" />
<text  x="1170.57" y="783.5" ></text>
</g>
<g >
<title>std::bitset&lt;36ul&gt;::reference::reference (1 samples, 0.01%)</title><rect x="480.6" y="757" width="0.1" height="15.0" fill="rgb(243,142,11)" rx="2" ry="2" />
<text  x="483.62" y="767.5" ></text>
</g>
<g >
<title>Opacity::IsOpaque (3 samples, 0.03%)</title><rect x="264.9" y="709" width="0.4" height="15.0" fill="rgb(209,132,25)" rx="2" ry="2" />
<text  x="267.92" y="719.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.01%)</title><rect x="175.8" y="325" width="0.2" height="15.0" fill="rgb(223,56,18)" rx="2" ry="2" />
<text  x="178.84" y="335.5" ></text>
</g>
<g >
<title>update_rt_rq_load_avg (1 samples, 0.01%)</title><rect x="918.4" y="565" width="0.2" height="15.0" fill="rgb(221,186,26)" rx="2" ry="2" />
<text  x="921.42" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="179.0" y="837" width="0.2" height="15.0" fill="rgb(222,164,42)" rx="2" ry="2" />
<text  x="182.05" y="847.5" ></text>
</g>
<g >
<title>Game_Picture::UpdateSprite (5 samples, 0.05%)</title><rect x="959.7" y="645" width="0.6" height="15.0" fill="rgb(246,1,53)" rx="2" ry="2" />
<text  x="962.69" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator* (2 samples, 0.02%)</title><rect x="754.6" y="613" width="0.3" height="15.0" fill="rgb(251,62,29)" rx="2" ry="2" />
<text  x="757.63" y="623.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator() (1 samples, 0.01%)</title><rect x="1111.1" y="613" width="0.1" height="15.0" fill="rgb(229,111,31)" rx="2" ry="2" />
<text  x="1114.05" y="623.5" ></text>
</g>
<g >
<title>poll (9 samples, 0.10%)</title><rect x="1121.0" y="581" width="1.2" height="15.0" fill="rgb(254,9,37)" rx="2" ry="2" />
<text  x="1124.05" y="591.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="155.5" y="757" width="0.2" height="15.0" fill="rgb(221,111,50)" rx="2" ry="2" />
<text  x="158.47" y="767.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 2ul, 3ul&gt;::__less (1 samples, 0.01%)</title><rect x="950.1" y="293" width="0.1" height="15.0" fill="rgb(223,187,53)" rx="2" ry="2" />
<text  x="953.08" y="303.5" ></text>
</g>
<g >
<title>Scene::MainFunction (7,872 samples, 85.50%)</title><rect x="179.6" y="837" width="1008.9" height="15.0" fill="rgb(250,162,47)" rx="2" ry="2" />
<text  x="182.56" y="847.5" >Scene::MainFunction</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="179.4" y="789" width="0.2" height="15.0" fill="rgb(232,24,3)" rx="2" ry="2" />
<text  x="182.43" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt;::_Val_comp_iter (1 samples, 0.01%)</title><rect x="174.2" y="901" width="0.1" height="15.0" fill="rgb(224,82,53)" rx="2" ry="2" />
<text  x="177.18" y="911.5" ></text>
</g>
<g >
<title>Game_Picture::RequestPictureSprite (5 samples, 0.05%)</title><rect x="169.2" y="757" width="0.6" height="15.0" fill="rgb(236,45,29)" rx="2" ry="2" />
<text  x="172.18" y="767.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="1111.9" y="677" width="0.2" height="15.0" fill="rgb(245,173,52)" rx="2" ry="2" />
<text  x="1114.95" y="687.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="1189.7" y="773" width="0.2" height="15.0" fill="rgb(249,46,44)" rx="2" ry="2" />
<text  x="1192.74" y="783.5" ></text>
</g>
<g >
<title>Game_Map::LoopVertical (1 samples, 0.01%)</title><rect x="961.9" y="645" width="0.1" height="15.0" fill="rgb(239,86,6)" rx="2" ry="2" />
<text  x="964.87" y="655.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (4 samples, 0.04%)</title><rect x="165.5" y="405" width="0.5" height="15.0" fill="rgb(232,92,36)" rx="2" ry="2" />
<text  x="168.46" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (191 samples, 2.07%)</title><rect x="1034.2" y="677" width="24.4" height="15.0" fill="rgb(205,125,51)" rx="2" ry="2" />
<text  x="1037.15" y="687.5" >s..</text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="166.7" y="629" width="0.2" height="15.0" fill="rgb(254,223,13)" rx="2" ry="2" />
<text  x="169.74" y="639.5" ></text>
</g>
<g >
<title>Game_Interpreter_Map::ExecuteCommand (45 samples, 0.49%)</title><rect x="160.7" y="853" width="5.8" height="15.0" fill="rgb(234,110,26)" rx="2" ry="2" />
<text  x="163.72" y="863.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt; &gt; &gt;::size (3 samples, 0.03%)</title><rect x="926.9" y="645" width="0.4" height="15.0" fill="rgb(223,189,19)" rx="2" ry="2" />
<text  x="929.88" y="655.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="70.7" y="741" width="0.2" height="15.0" fill="rgb(242,136,14)" rx="2" ry="2" />
<text  x="73.75" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_addr (6 samples, 0.07%)</title><rect x="1158.1" y="725" width="0.8" height="15.0" fill="rgb(228,25,53)" rx="2" ry="2" />
<text  x="1161.09" y="735.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (16 samples, 0.17%)</title><rect x="935.9" y="613" width="2.0" height="15.0" fill="rgb(212,66,6)" rx="2" ry="2" />
<text  x="938.85" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (32 samples, 0.35%)</title><rect x="242.7" y="709" width="4.1" height="15.0" fill="rgb(218,116,18)" rx="2" ry="2" />
<text  x="245.74" y="719.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (2 samples, 0.02%)</title><rect x="115.7" y="901" width="0.3" height="15.0" fill="rgb(253,181,44)" rx="2" ry="2" />
<text  x="118.73" y="911.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (1 samples, 0.01%)</title><rect x="159.1" y="789" width="0.1" height="15.0" fill="rgb(247,144,17)" rx="2" ry="2" />
<text  x="162.05" y="799.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;unsigned int*, unsigned long, unsigned int&gt; (4 samples, 0.04%)</title><rect x="158.2" y="405" width="0.5" height="15.0" fill="rgb(248,126,25)" rx="2" ry="2" />
<text  x="161.16" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_S_value (3 samples, 0.03%)</title><rect x="314.1" y="677" width="0.4" height="15.0" fill="rgb(236,10,12)" rx="2" ry="2" />
<text  x="317.13" y="687.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (2 samples, 0.02%)</title><rect x="155.5" y="837" width="0.2" height="15.0" fill="rgb(254,78,31)" rx="2" ry="2" />
<text  x="158.47" y="847.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (4 samples, 0.04%)</title><rect x="170.6" y="869" width="0.5" height="15.0" fill="rgb(214,193,3)" rx="2" ry="2" />
<text  x="173.59" y="879.5" ></text>
</g>
<g >
<title>std::_Mu&lt;std::_Placeholder&lt;1&gt;, false, true&gt;::operator()&lt;std::tuple&lt;FileRequestResult*&amp;&amp;&gt; &gt; (1 samples, 0.01%)</title><rect x="947.5" y="517" width="0.1" height="15.0" fill="rgb(240,173,48)" rx="2" ry="2" />
<text  x="950.51" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (2 samples, 0.02%)</title><rect x="167.0" y="677" width="0.3" height="15.0" fill="rgb(214,92,15)" rx="2" ry="2" />
<text  x="170.00" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="155.2" y="645" width="0.1" height="15.0" fill="rgb(229,11,2)" rx="2" ry="2" />
<text  x="158.21" y="655.5" ></text>
</g>
<g >
<title>__GI__IO_fread (6 samples, 0.07%)</title><rect x="155.7" y="501" width="0.8" height="15.0" fill="rgb(223,207,13)" rx="2" ry="2" />
<text  x="158.72" y="511.5" ></text>
</g>
<g >
<title>_XReply (1 samples, 0.01%)</title><rect x="1120.9" y="661" width="0.1" height="15.0" fill="rgb(207,197,24)" rx="2" ry="2" />
<text  x="1123.92" y="671.5" ></text>
</g>
<g >
<title>current_time (1 samples, 0.01%)</title><rect x="73.1" y="773" width="0.1" height="15.0" fill="rgb(242,76,49)" rx="2" ry="2" />
<text  x="76.06" y="783.5" ></text>
</g>
<g >
<title>Game_Interpreter::SkipTo (2 samples, 0.02%)</title><rect x="74.7" y="917" width="0.3" height="15.0" fill="rgb(231,5,47)" rx="2" ry="2" />
<text  x="77.72" y="927.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt;, std::weak_ptr&lt;Bitmap&gt;, std::less&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt; const, std::weak_ptr&lt;Bitmap&gt; &gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="229.8" y="709" width="0.1" height="15.0" fill="rgb(243,137,7)" rx="2" ry="2" />
<text  x="232.80" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::get (1 samples, 0.01%)</title><rect x="935.0" y="645" width="0.1" height="15.0" fill="rgb(241,87,34)" rx="2" ry="2" />
<text  x="937.95" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (2 samples, 0.02%)</title><rect x="832.3" y="645" width="0.3" height="15.0" fill="rgb(230,14,2)" rx="2" ry="2" />
<text  x="835.30" y="655.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (6 samples, 0.07%)</title><rect x="173.3" y="885" width="0.7" height="15.0" fill="rgb(210,216,46)" rx="2" ry="2" />
<text  x="176.28" y="895.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="582.5" y="565" width="0.1" height="15.0" fill="rgb(215,212,37)" rx="2" ry="2" />
<text  x="585.51" y="575.5" ></text>
</g>
<g >
<title>Game_Map::GetTerrainTag (8 samples, 0.09%)</title><rect x="961.4" y="661" width="1.0" height="15.0" fill="rgb(237,22,10)" rx="2" ry="2" />
<text  x="964.36" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (4 samples, 0.04%)</title><rect x="1040.0" y="661" width="0.6" height="15.0" fill="rgb(241,39,26)" rx="2" ry="2" />
<text  x="1043.05" y="671.5" ></text>
</g>
<g >
<title>TilemapLayer::GetChipset (1 samples, 0.01%)</title><rect x="82.8" y="901" width="0.1" height="15.0" fill="rgb(214,102,3)" rx="2" ry="2" />
<text  x="85.80" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::operator[] (17 samples, 0.18%)</title><rect x="1085.0" y="709" width="2.2" height="15.0" fill="rgb(236,113,23)" rx="2" ry="2" />
<text  x="1088.03" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (7 samples, 0.08%)</title><rect x="1112.7" y="725" width="0.9" height="15.0" fill="rgb(229,127,40)" rx="2" ry="2" />
<text  x="1115.72" y="735.5" ></text>
</g>
<g >
<title>Game_Character::GetScreenY (1 samples, 0.01%)</title><rect x="1107.8" y="741" width="0.2" height="15.0" fill="rgb(216,77,36)" rx="2" ry="2" />
<text  x="1110.85" y="751.5" ></text>
</g>
<g >
<title>__wake_up_common (7 samples, 0.08%)</title><rect x="72.0" y="789" width="0.9" height="15.0" fill="rgb(226,78,8)" rx="2" ry="2" />
<text  x="75.03" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;short&gt;::_M_ptr (3 samples, 0.03%)</title><rect x="314.1" y="645" width="0.4" height="15.0" fill="rgb(214,94,29)" rx="2" ry="2" />
<text  x="317.13" y="655.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (3 samples, 0.03%)</title><rect x="170.7" y="805" width="0.4" height="15.0" fill="rgb(242,110,38)" rx="2" ry="2" />
<text  x="173.72" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (33 samples, 0.36%)</title><rect x="657.4" y="645" width="4.2" height="15.0" fill="rgb(213,112,3)" rx="2" ry="2" />
<text  x="660.35" y="655.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="468.4" y="581" width="0.2" height="15.0" fill="rgb(222,21,44)" rx="2" ry="2" />
<text  x="471.44" y="591.5" ></text>
</g>
<g >
<title>update_curr (1 samples, 0.01%)</title><rect x="942.8" y="421" width="0.1" height="15.0" fill="rgb(216,135,16)" rx="2" ry="2" />
<text  x="945.77" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="961.6" y="549" width="0.1" height="15.0" fill="rgb(244,181,7)" rx="2" ry="2" />
<text  x="964.61" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::find (10 samples, 0.11%)</title><rect x="950.1" y="389" width="1.3" height="15.0" fill="rgb(254,54,45)" rx="2" ry="2" />
<text  x="953.08" y="399.5" ></text>
</g>
<g >
<title>pixman_transform_point_31_16_3d (1 samples, 0.01%)</title><rect x="225.6" y="629" width="0.1" height="15.0" fill="rgb(254,85,12)" rx="2" ry="2" />
<text  x="228.57" y="639.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, FileRequestAsync, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::begin (1 samples, 0.01%)</title><rect x="1186.3" y="757" width="0.1" height="15.0" fill="rgb(230,132,8)" rx="2" ry="2" />
<text  x="1189.28" y="767.5" ></text>
</g>
<g >
<title>Bitmap::~Bitmap (4 samples, 0.04%)</title><rect x="165.5" y="437" width="0.5" height="15.0" fill="rgb(234,111,6)" rx="2" ry="2" />
<text  x="168.46" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="154.8" y="901" width="0.2" height="15.0" fill="rgb(238,148,21)" rx="2" ry="2" />
<text  x="157.82" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="155.2" y="517" width="0.1" height="15.0" fill="rgb(250,132,50)" rx="2" ry="2" />
<text  x="158.21" y="527.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@plt (1 samples, 0.01%)</title><rect x="1119.9" y="629" width="0.1" height="15.0" fill="rgb(230,213,3)" rx="2" ry="2" />
<text  x="1122.89" y="639.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (2 samples, 0.02%)</title><rect x="174.8" y="549" width="0.3" height="15.0" fill="rgb(226,32,4)" rx="2" ry="2" />
<text  x="177.82" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (2 samples, 0.02%)</title><rect x="942.3" y="533" width="0.2" height="15.0" fill="rgb(210,218,15)" rx="2" ry="2" />
<text  x="945.26" y="543.5" ></text>
</g>
<g >
<title>new_sync_write (2 samples, 0.02%)</title><rect x="72.9" y="821" width="0.3" height="15.0" fill="rgb(208,108,17)" rx="2" ry="2" />
<text  x="75.93" y="831.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;int&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="104.1" y="901" width="0.1" height="15.0" fill="rgb(223,121,7)" rx="2" ry="2" />
<text  x="107.07" y="911.5" ></text>
</g>
<g >
<title>speex_resampler_process_int (1 samples, 0.01%)</title><rect x="159.7" y="501" width="0.1" height="15.0" fill="rgb(245,162,0)" rx="2" ry="2" />
<text  x="162.69" y="511.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (33 samples, 0.36%)</title><rect x="1118.7" y="725" width="4.3" height="15.0" fill="rgb(233,195,40)" rx="2" ry="2" />
<text  x="1121.74" y="735.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (65 samples, 0.71%)</title><rect x="268.4" y="693" width="8.3" height="15.0" fill="rgb(223,175,41)" rx="2" ry="2" />
<text  x="271.38" y="703.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, RPG::Map*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="245.4" y="645" width="0.2" height="15.0" fill="rgb(207,146,27)" rx="2" ry="2" />
<text  x="248.44" y="655.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="225.7" y="549" width="0.1" height="15.0" fill="rgb(210,153,25)" rx="2" ry="2" />
<text  x="228.70" y="559.5" ></text>
</g>
<g >
<title>pixman_transform_point_31_16 (1 samples, 0.01%)</title><rect x="175.5" y="901" width="0.1" height="15.0" fill="rgb(251,105,38)" rx="2" ry="2" />
<text  x="178.46" y="911.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.01%)</title><rect x="805.9" y="533" width="0.1" height="15.0" fill="rgb(222,180,31)" rx="2" ry="2" />
<text  x="808.89" y="543.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (1 samples, 0.01%)</title><rect x="1117.2" y="661" width="0.1" height="15.0" fill="rgb(231,80,36)" rx="2" ry="2" />
<text  x="1120.20" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_M_lower_bound (5 samples, 0.05%)</title><rect x="942.0" y="581" width="0.6" height="15.0" fill="rgb(206,17,47)" rx="2" ry="2" />
<text  x="945.00" y="591.5" ></text>
</g>
<g >
<title>MessageOverlay::Update (1 samples, 0.01%)</title><rect x="478.1" y="789" width="0.1" height="15.0" fill="rgb(247,34,12)" rx="2" ry="2" />
<text  x="481.05" y="799.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="225.8" y="629" width="0.2" height="15.0" fill="rgb(244,89,40)" rx="2" ry="2" />
<text  x="228.83" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="166.6" y="677" width="0.1" height="15.0" fill="rgb(227,214,1)" rx="2" ry="2" />
<text  x="169.62" y="687.5" ></text>
</g>
<g >
<title>Game_Map::UpdateCommonEvents (2 samples, 0.02%)</title><rect x="174.8" y="757" width="0.3" height="15.0" fill="rgb(254,52,15)" rx="2" ry="2" />
<text  x="177.82" y="767.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="942.8" y="533" width="0.1" height="15.0" fill="rgb(233,64,5)" rx="2" ry="2" />
<text  x="945.77" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::_M_ptr (4 samples, 0.04%)</title><rect x="1104.5" y="677" width="0.5" height="15.0" fill="rgb(219,194,4)" rx="2" ry="2" />
<text  x="1107.52" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (4 samples, 0.04%)</title><rect x="165.5" y="517" width="0.5" height="15.0" fill="rgb(243,35,36)" rx="2" ry="2" />
<text  x="168.46" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;*, std::vector&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="946.7" y="581" width="0.2" height="15.0" fill="rgb(247,109,51)" rx="2" ry="2" />
<text  x="949.75" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::begin (3 samples, 0.03%)</title><rect x="1167.2" y="757" width="0.4" height="15.0" fill="rgb(248,133,27)" rx="2" ry="2" />
<text  x="1170.19" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (1 samples, 0.01%)</title><rect x="961.9" y="613" width="0.1" height="15.0" fill="rgb(207,13,54)" rx="2" ry="2" />
<text  x="964.87" y="623.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="477.9" y="645" width="0.2" height="15.0" fill="rgb(205,101,8)" rx="2" ry="2" />
<text  x="480.92" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::operator (13 samples, 0.14%)</title><rect x="320.4" y="741" width="1.7" height="15.0" fill="rgb(214,120,32)" rx="2" ry="2" />
<text  x="323.41" y="751.5" ></text>
</g>
<g >
<title>[unknown] (186 samples, 2.02%)</title><rect x="155.0" y="917" width="23.8" height="15.0" fill="rgb(241,19,14)" rx="2" ry="2" />
<text  x="157.95" y="927.5" >[..</text>
</g>
<g >
<title>pixman_image_composite32 (270 samples, 2.93%)</title><rect x="191.2" y="677" width="34.6" height="15.0" fill="rgb(212,27,35)" rx="2" ry="2" />
<text  x="194.22" y="687.5" >pi..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (4 samples, 0.04%)</title><rect x="805.9" y="613" width="0.5" height="15.0" fill="rgb(207,67,44)" rx="2" ry="2" />
<text  x="808.89" y="623.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1148.6" y="677" width="0.1" height="15.0" fill="rgb(251,185,2)" rx="2" ry="2" />
<text  x="1151.60" y="687.5" ></text>
</g>
<g >
<title>Player::Run (1 samples, 0.01%)</title><rect x="166.9" y="901" width="0.1" height="15.0" fill="rgb(253,57,1)" rx="2" ry="2" />
<text  x="169.87" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="174.9" y="325" width="0.2" height="15.0" fill="rgb(205,180,4)" rx="2" ry="2" />
<text  x="177.95" y="335.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (5 samples, 0.05%)</title><rect x="160.7" y="757" width="0.7" height="15.0" fill="rgb(225,147,38)" rx="2" ry="2" />
<text  x="163.72" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_S_value (1 samples, 0.01%)</title><rect x="116.0" y="901" width="0.1" height="15.0" fill="rgb(217,180,49)" rx="2" ry="2" />
<text  x="118.99" y="911.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="155.2" y="485" width="0.1" height="15.0" fill="rgb(220,123,41)" rx="2" ry="2" />
<text  x="158.21" y="495.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (13 samples, 0.14%)</title><rect x="167.3" y="741" width="1.6" height="15.0" fill="rgb(210,89,3)" rx="2" ry="2" />
<text  x="170.26" y="751.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (71 samples, 0.77%)</title><rect x="947.6" y="501" width="9.1" height="15.0" fill="rgb(232,76,46)" rx="2" ry="2" />
<text  x="950.64" y="511.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="943.0" y="485" width="0.2" height="15.0" fill="rgb(244,141,15)" rx="2" ry="2" />
<text  x="946.03" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, FileRequestResult*&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="947.5" y="501" width="0.1" height="15.0" fill="rgb(216,87,25)" rx="2" ry="2" />
<text  x="950.51" y="511.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="828.7" y="629" width="0.1" height="15.0" fill="rgb(220,22,40)" rx="2" ry="2" />
<text  x="831.71" y="639.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded (2 samples, 0.02%)</title><rect x="477.4" y="725" width="0.3" height="15.0" fill="rgb(217,27,14)" rx="2" ry="2" />
<text  x="480.41" y="735.5" ></text>
</g>
<g >
<title>prepare_outbound_urb (1 samples, 0.01%)</title><rect x="74.1" y="661" width="0.1" height="15.0" fill="rgb(212,90,23)" rx="2" ry="2" />
<text  x="77.08" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Scene, (__gnu_cxx::_Lock_policy)2&gt;::get (1 samples, 0.01%)</title><rect x="1188.3" y="821" width="0.2" height="15.0" fill="rgb(227,189,33)" rx="2" ry="2" />
<text  x="1191.33" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;::_M_mutate (2 samples, 0.02%)</title><rect x="155.0" y="805" width="0.2" height="15.0" fill="rgb(217,52,49)" rx="2" ry="2" />
<text  x="157.95" y="815.5" ></text>
</g>
<g >
<title>FpsOverlay::Update (1 samples, 0.01%)</title><rect x="477.7" y="789" width="0.1" height="15.0" fill="rgb(220,167,24)" rx="2" ry="2" />
<text  x="480.67" y="799.5" ></text>
</g>
<g >
<title>FileFinder::fopenUTF8 (1 samples, 0.01%)</title><rect x="166.5" y="501" width="0.1" height="15.0" fill="rgb(253,92,11)" rx="2" ry="2" />
<text  x="169.49" y="511.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.01%)</title><rect x="943.0" y="341" width="0.2" height="15.0" fill="rgb(239,129,27)" rx="2" ry="2" />
<text  x="946.03" y="351.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="1148.6" y="709" width="0.1" height="15.0" fill="rgb(216,148,20)" rx="2" ry="2" />
<text  x="1151.60" y="719.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="1189.7" y="869" width="0.2" height="15.0" fill="rgb(253,43,29)" rx="2" ry="2" />
<text  x="1192.74" y="879.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (38 samples, 0.41%)</title><rect x="470.6" y="629" width="4.9" height="15.0" fill="rgb(245,72,41)" rx="2" ry="2" />
<text  x="473.62" y="639.5" ></text>
</g>
<g >
<title>Bitmap::ConvertImage (1 samples, 0.01%)</title><rect x="159.3" y="421" width="0.1" height="15.0" fill="rgb(231,213,41)" rx="2" ry="2" />
<text  x="162.31" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.01%)</title><rect x="947.0" y="565" width="0.1" height="15.0" fill="rgb(240,211,37)" rx="2" ry="2" />
<text  x="950.00" y="575.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="900.7" y="645" width="0.2" height="15.0" fill="rgb(238,27,20)" rx="2" ry="2" />
<text  x="903.74" y="655.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;Drawable*&gt; (1 samples, 0.01%)</title><rect x="955.8" y="261" width="0.2" height="15.0" fill="rgb(234,28,29)" rx="2" ry="2" />
<text  x="958.85" y="271.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.01%)</title><rect x="74.1" y="693" width="0.1" height="15.0" fill="rgb(228,166,25)" rx="2" ry="2" />
<text  x="77.08" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::swap (2 samples, 0.02%)</title><rect x="960.3" y="629" width="0.3" height="15.0" fill="rgb(209,179,18)" rx="2" ry="2" />
<text  x="963.33" y="639.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1110.4" y="629" width="0.1" height="15.0" fill="rgb(234,194,23)" rx="2" ry="2" />
<text  x="1113.41" y="639.5" ></text>
</g>
<g >
<title>Output::Debug (1 samples, 0.01%)</title><rect x="935.9" y="485" width="0.1" height="15.0" fill="rgb(224,79,45)" rx="2" ry="2" />
<text  x="938.85" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::function (1 samples, 0.01%)</title><rect x="944.1" y="517" width="0.1" height="15.0" fill="rgb(237,160,50)" rx="2" ry="2" />
<text  x="947.05" y="527.5" ></text>
</g>
<g >
<title>Game_System::SePlay (1 samples, 0.01%)</title><rect x="159.1" y="837" width="0.1" height="15.0" fill="rgb(237,28,16)" rx="2" ry="2" />
<text  x="162.05" y="847.5" ></text>
</g>
<g >
<title>ImageBMP::ReadBMP (1 samples, 0.01%)</title><rect x="176.0" y="581" width="0.1" height="15.0" fill="rgb(216,176,25)" rx="2" ry="2" />
<text  x="178.97" y="591.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="229.7" y="405" width="0.1" height="15.0" fill="rgb(216,137,1)" rx="2" ry="2" />
<text  x="232.67" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::size (3 samples, 0.03%)</title><rect x="109.6" y="901" width="0.4" height="15.0" fill="rgb(240,74,42)" rx="2" ry="2" />
<text  x="112.58" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (1 samples, 0.01%)</title><rect x="928.7" y="645" width="0.1" height="15.0" fill="rgb(210,58,52)" rx="2" ry="2" />
<text  x="931.67" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="942.6" y="533" width="0.2" height="15.0" fill="rgb(230,24,19)" rx="2" ry="2" />
<text  x="945.64" y="543.5" ></text>
</g>
<g >
<title>pixman_image_unref (4 samples, 0.04%)</title><rect x="165.5" y="421" width="0.5" height="15.0" fill="rgb(205,220,18)" rx="2" ry="2" />
<text  x="168.46" y="431.5" ></text>
</g>
<g >
<title>Game_Map::Refresh (85 samples, 0.92%)</title><rect x="1062.6" y="709" width="10.9" height="15.0" fill="rgb(232,84,24)" rx="2" ry="2" />
<text  x="1065.61" y="719.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (1 samples, 0.01%)</title><rect x="159.6" y="885" width="0.1" height="15.0" fill="rgb(216,99,31)" rx="2" ry="2" />
<text  x="162.57" y="895.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="944.8" y="517" width="0.4" height="15.0" fill="rgb(220,49,23)" rx="2" ry="2" />
<text  x="947.82" y="527.5" ></text>
</g>
<g >
<title>Game_System::SePlay (2 samples, 0.02%)</title><rect x="159.7" y="789" width="0.3" height="15.0" fill="rgb(234,226,43)" rx="2" ry="2" />
<text  x="162.69" y="799.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="158.5" y="277" width="0.2" height="15.0" fill="rgb(229,131,39)" rx="2" ry="2" />
<text  x="161.54" y="287.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.01%)</title><rect x="477.8" y="613" width="0.1" height="15.0" fill="rgb(254,64,39)" rx="2" ry="2" />
<text  x="480.80" y="623.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="60.8" y="821" width="0.1" height="15.0" fill="rgb(236,212,11)" rx="2" ry="2" />
<text  x="63.75" y="831.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="167.1" y="373" width="0.2" height="15.0" fill="rgb(242,193,7)" rx="2" ry="2" />
<text  x="170.13" y="383.5" ></text>
</g>
<g >
<title>AsyncHandler::IsFilePending (285 samples, 3.10%)</title><rect x="1131.3" y="789" width="36.5" height="15.0" fill="rgb(229,13,44)" rx="2" ry="2" />
<text  x="1134.30" y="799.5" >Asy..</text>
</g>
<g >
<title>irq_entries_start (1 samples, 0.01%)</title><rect x="70.9" y="773" width="0.1" height="15.0" fill="rgb(207,117,42)" rx="2" ry="2" />
<text  x="73.88" y="783.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (2 samples, 0.02%)</title><rect x="174.8" y="533" width="0.3" height="15.0" fill="rgb(235,48,11)" rx="2" ry="2" />
<text  x="177.82" y="543.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="170.7" y="789" width="0.1" height="15.0" fill="rgb(248,7,15)" rx="2" ry="2" />
<text  x="173.72" y="799.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (1 samples, 0.01%)</title><rect x="160.1" y="213" width="0.1" height="15.0" fill="rgb(210,92,43)" rx="2" ry="2" />
<text  x="163.08" y="223.5" ></text>
</g>
<g >
<title>std::tie&lt;int const, int const, int const, int const&gt; (1 samples, 0.01%)</title><rect x="229.9" y="613" width="0.2" height="15.0" fill="rgb(213,166,27)" rx="2" ry="2" />
<text  x="232.93" y="623.5" ></text>
</g>
<g >
<title>Rect::Adjust (1 samples, 0.01%)</title><rect x="230.3" y="725" width="0.1" height="15.0" fill="rgb(205,30,25)" rx="2" ry="2" />
<text  x="233.31" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="1111.1" y="581" width="0.1" height="15.0" fill="rgb(229,27,49)" rx="2" ry="2" />
<text  x="1114.05" y="591.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.01%)</title><rect x="177.0" y="485" width="0.1" height="15.0" fill="rgb(216,72,20)" rx="2" ry="2" />
<text  x="180.00" y="495.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.8" y="501" width="0.2" height="15.0" fill="rgb(211,26,51)" rx="2" ry="2" />
<text  x="178.84" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::end (1 samples, 0.01%)</title><rect x="949.6" y="357" width="0.1" height="15.0" fill="rgb(229,211,16)" rx="2" ry="2" />
<text  x="952.57" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy (1 samples, 0.01%)</title><rect x="227.7" y="677" width="0.2" height="15.0" fill="rgb(254,81,26)" rx="2" ry="2" />
<text  x="230.75" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::operator (34 samples, 0.37%)</title><rect x="242.5" y="725" width="4.3" height="15.0" fill="rgb(230,37,20)" rx="2" ry="2" />
<text  x="245.49" y="735.5" ></text>
</g>
<g >
<title>___sys_recvmsg (3 samples, 0.03%)</title><rect x="1127.2" y="533" width="0.4" height="15.0" fill="rgb(217,183,18)" rx="2" ry="2" />
<text  x="1130.20" y="543.5" ></text>
</g>
<g >
<title>ksys_read (5 samples, 0.05%)</title><rect x="155.8" y="373" width="0.7" height="15.0" fill="rgb(220,138,14)" rx="2" ry="2" />
<text  x="158.85" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::base (1 samples, 0.01%)</title><rect x="758.5" y="613" width="0.1" height="15.0" fill="rgb(231,203,11)" rx="2" ry="2" />
<text  x="761.47" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt;::operator= (1 samples, 0.01%)</title><rect x="941.1" y="597" width="0.1" height="15.0" fill="rgb(226,140,10)" rx="2" ry="2" />
<text  x="944.11" y="607.5" ></text>
</g>
<g >
<title>XFlush (10 samples, 0.11%)</title><rect x="1126.9" y="741" width="1.3" height="15.0" fill="rgb(207,127,13)" rx="2" ry="2" />
<text  x="1129.94" y="751.5" ></text>
</g>
<g >
<title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (15 samples, 0.16%)</title><rect x="324.8" y="693" width="1.9" height="15.0" fill="rgb(226,221,18)" rx="2" ry="2" />
<text  x="327.77" y="703.5" ></text>
</g>
<g >
<title>std::less&lt;short&gt;::operator() (4 samples, 0.04%)</title><rect x="319.3" y="709" width="0.5" height="15.0" fill="rgb(206,164,53)" rx="2" ry="2" />
<text  x="322.26" y="719.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (3 samples, 0.03%)</title><rect x="1108.9" y="645" width="0.4" height="15.0" fill="rgb(246,189,30)" rx="2" ry="2" />
<text  x="1111.87" y="655.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (18 samples, 0.20%)</title><rect x="156.5" y="805" width="2.3" height="15.0" fill="rgb(236,1,36)" rx="2" ry="2" />
<text  x="159.49" y="815.5" ></text>
</g>
<g >
<title>_XEventsQueued (12 samples, 0.13%)</title><rect x="1119.1" y="693" width="1.6" height="15.0" fill="rgb(228,96,50)" rx="2" ry="2" />
<text  x="1122.13" y="703.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1058.5" y="629" width="0.1" height="15.0" fill="rgb(239,147,20)" rx="2" ry="2" />
<text  x="1061.50" y="639.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="166.5" y="629" width="0.1" height="15.0" fill="rgb(250,44,49)" rx="2" ry="2" />
<text  x="169.49" y="639.5" ></text>
</g>
<g >
<title>udev_monitor_get_fd (1 samples, 0.01%)</title><rect x="1128.2" y="709" width="0.2" height="15.0" fill="rgb(252,57,13)" rx="2" ry="2" />
<text  x="1131.23" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (1 samples, 0.01%)</title><rect x="118.7" y="901" width="0.1" height="15.0" fill="rgb(253,21,10)" rx="2" ry="2" />
<text  x="121.68" y="911.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;*&gt; (2 samples, 0.02%)</title><rect x="957.1" y="517" width="0.3" height="15.0" fill="rgb(249,24,33)" rx="2" ry="2" />
<text  x="960.13" y="527.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (1 samples, 0.01%)</title><rect x="168.9" y="533" width="0.2" height="15.0" fill="rgb(214,150,46)" rx="2" ry="2" />
<text  x="171.92" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="114.8" y="885" width="0.2" height="15.0" fill="rgb(238,65,30)" rx="2" ry="2" />
<text  x="117.84" y="895.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.01%)</title><rect x="477.9" y="581" width="0.2" height="15.0" fill="rgb(208,37,20)" rx="2" ry="2" />
<text  x="480.92" y="591.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="468.2" y="693" width="0.1" height="15.0" fill="rgb(205,14,35)" rx="2" ry="2" />
<text  x="471.18" y="703.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (1,144 samples, 12.43%)</title><rect x="328.9" y="741" width="146.6" height="15.0" fill="rgb(235,96,19)" rx="2" ry="2" />
<text  x="331.87" y="751.5" >[libSDL2-2.0.so.0...</text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (1 samples, 0.01%)</title><rect x="168.9" y="661" width="0.2" height="15.0" fill="rgb(224,64,52)" rx="2" ry="2" />
<text  x="171.92" y="671.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="1119.6" y="389" width="0.2" height="15.0" fill="rgb(238,77,39)" rx="2" ry="2" />
<text  x="1122.64" y="399.5" ></text>
</g>
<g >
<title>Sdl2Ui::SetTitle (2 samples, 0.02%)</title><rect x="477.8" y="773" width="0.3" height="15.0" fill="rgb(235,51,37)" rx="2" ry="2" />
<text  x="480.80" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.01%)</title><rect x="1109.4" y="661" width="0.1" height="15.0" fill="rgb(242,55,25)" rx="2" ry="2" />
<text  x="1112.39" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::operator bool (1 samples, 0.01%)</title><rect x="179.2" y="837" width="0.1" height="15.0" fill="rgb(219,73,25)" rx="2" ry="2" />
<text  x="182.18" y="847.5" ></text>
</g>
<g >
<title>std::min&lt;int&gt; (3 samples, 0.03%)</title><rect x="934.6" y="661" width="0.4" height="15.0" fill="rgb(221,56,14)" rx="2" ry="2" />
<text  x="937.57" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;Game_Event, std::allocator&lt;Game_Event&gt; &gt;::begin (19 samples, 0.21%)</title><rect x="1067.1" y="693" width="2.4" height="15.0" fill="rgb(252,178,4)" rx="2" ry="2" />
<text  x="1070.09" y="703.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (1 samples, 0.01%)</title><rect x="166.5" y="789" width="0.1" height="15.0" fill="rgb(246,27,28)" rx="2" ry="2" />
<text  x="169.49" y="799.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (80 samples, 0.87%)</title><rect x="60.9" y="821" width="10.2" height="15.0" fill="rgb(217,93,51)" rx="2" ry="2" />
<text  x="63.88" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; const*, std::vector&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt;, std::allocator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="89.7" y="901" width="0.1" height="15.0" fill="rgb(221,44,47)" rx="2" ry="2" />
<text  x="92.72" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (6 samples, 0.07%)</title><rect x="108.7" y="901" width="0.8" height="15.0" fill="rgb(232,8,23)" rx="2" ry="2" />
<text  x="111.69" y="911.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (6 samples, 0.07%)</title><rect x="160.0" y="565" width="0.7" height="15.0" fill="rgb(208,132,43)" rx="2" ry="2" />
<text  x="162.95" y="575.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="477.8" y="693" width="0.1" height="15.0" fill="rgb(242,17,6)" rx="2" ry="2" />
<text  x="480.80" y="703.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="225.7" y="517" width="0.1" height="15.0" fill="rgb(209,36,12)" rx="2" ry="2" />
<text  x="228.70" y="527.5" ></text>
</g>
<g >
<title>[libspeexdsp.so.1.5.0] (1 samples, 0.01%)</title><rect x="936.0" y="405" width="0.1" height="15.0" fill="rgb(219,172,51)" rx="2" ry="2" />
<text  x="938.98" y="415.5" ></text>
</g>
<g >
<title>poll (3 samples, 0.03%)</title><rect x="1122.6" y="693" width="0.4" height="15.0" fill="rgb(206,74,18)" rx="2" ry="2" />
<text  x="1125.59" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (12 samples, 0.13%)</title><rect x="847.0" y="661" width="1.6" height="15.0" fill="rgb(215,224,52)" rx="2" ry="2" />
<text  x="850.03" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="229.7" y="341" width="0.1" height="15.0" fill="rgb(223,196,7)" rx="2" ry="2" />
<text  x="232.67" y="351.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (2 samples, 0.02%)</title><rect x="155.5" y="901" width="0.2" height="15.0" fill="rgb(251,16,47)" rx="2" ry="2" />
<text  x="158.47" y="911.5" ></text>
</g>
<g >
<title>wp_page_copy (1 samples, 0.01%)</title><rect x="176.0" y="405" width="0.1" height="15.0" fill="rgb(230,229,24)" rx="2" ry="2" />
<text  x="178.97" y="415.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="304.8" y="725" width="0.1" height="15.0" fill="rgb(249,9,38)" rx="2" ry="2" />
<text  x="307.78" y="735.5" ></text>
</g>
<g >
<title>do_mmap (1 samples, 0.01%)</title><rect x="175.8" y="309" width="0.2" height="15.0" fill="rgb(220,169,31)" rx="2" ry="2" />
<text  x="178.84" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="935.0" y="661" width="0.1" height="15.0" fill="rgb(214,77,40)" rx="2" ry="2" />
<text  x="937.95" y="671.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (1 samples, 0.01%)</title><rect x="1127.1" y="645" width="0.1" height="15.0" fill="rgb(239,200,25)" rx="2" ry="2" />
<text  x="1130.07" y="655.5" ></text>
</g>
<g >
<title>Game_CommonEvent::Update (2 samples, 0.02%)</title><rect x="167.0" y="821" width="0.3" height="15.0" fill="rgb(238,124,54)" rx="2" ry="2" />
<text  x="170.00" y="831.5" ></text>
</g>
<g >
<title>Game_System::SePlay (13 samples, 0.14%)</title><rect x="167.3" y="757" width="1.6" height="15.0" fill="rgb(243,136,6)" rx="2" ry="2" />
<text  x="170.26" y="767.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (1 samples, 0.01%)</title><rect x="168.9" y="693" width="0.2" height="15.0" fill="rgb(209,74,40)" rx="2" ry="2" />
<text  x="171.92" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator++ (2 samples, 0.02%)</title><rect x="1169.1" y="789" width="0.3" height="15.0" fill="rgb(254,107,50)" rx="2" ry="2" />
<text  x="1172.11" y="799.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (7 samples, 0.08%)</title><rect x="1129.4" y="581" width="0.9" height="15.0" fill="rgb(218,150,23)" rx="2" ry="2" />
<text  x="1132.38" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="175.6" y="677" width="0.1" height="15.0" fill="rgb(215,179,35)" rx="2" ry="2" />
<text  x="178.59" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;short&gt;::_M_valptr (1 samples, 0.01%)</title><rect x="317.7" y="693" width="0.1" height="15.0" fill="rgb(223,44,17)" rx="2" ry="2" />
<text  x="320.72" y="703.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.03%)</title><rect x="165.6" y="293" width="0.4" height="15.0" fill="rgb(211,66,40)" rx="2" ry="2" />
<text  x="168.59" y="303.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (5 samples, 0.05%)</title><rect x="121.2" y="773" width="0.7" height="15.0" fill="rgb(249,104,24)" rx="2" ry="2" />
<text  x="124.25" y="783.5" ></text>
</g>
<g >
<title>FlagSet&lt;Game_Interpreter::Keys, 32ul&gt;::FlagSet (1 samples, 0.01%)</title><rect x="930.1" y="645" width="0.1" height="15.0" fill="rgb(208,98,30)" rx="2" ry="2" />
<text  x="933.08" y="655.5" ></text>
</g>
<g >
<title>hrtimer_try_to_cancel (1 samples, 0.01%)</title><rect x="1130.7" y="693" width="0.1" height="15.0" fill="rgb(212,212,42)" rx="2" ry="2" />
<text  x="1133.66" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_valptr (4 samples, 0.04%)</title><rect x="1166.7" y="773" width="0.5" height="15.0" fill="rgb(213,155,42)" rx="2" ry="2" />
<text  x="1169.67" y="783.5" ></text>
</g>
<g >
<title>kobject_get (1 samples, 0.01%)</title><rect x="156.2" y="37" width="0.2" height="15.0" fill="rgb(218,99,42)" rx="2" ry="2" />
<text  x="159.23" y="47.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.01%)</title><rect x="828.6" y="533" width="0.1" height="15.0" fill="rgb(230,57,50)" rx="2" ry="2" />
<text  x="831.58" y="543.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (1 samples, 0.01%)</title><rect x="1120.9" y="613" width="0.1" height="15.0" fill="rgb(219,201,10)" rx="2" ry="2" />
<text  x="1123.92" y="623.5" ></text>
</g>
<g >
<title>std::bitset&lt;36ul&gt;::reference::operator= (1 samples, 0.01%)</title><rect x="481.3" y="789" width="0.1" height="15.0" fill="rgb(221,81,46)" rx="2" ry="2" />
<text  x="484.26" y="799.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="175.6" y="485" width="0.1" height="15.0" fill="rgb(212,212,33)" rx="2" ry="2" />
<text  x="178.59" y="495.5" ></text>
</g>
<g >
<title>blk_mq_make_request (1 samples, 0.01%)</title><rect x="156.4" y="133" width="0.1" height="15.0" fill="rgb(247,144,41)" rx="2" ry="2" />
<text  x="159.36" y="143.5" ></text>
</g>
<g >
<title>std::tuple&lt;Game_Picture*, std::_Placeholder&lt;1&gt; &gt;::tuple (1 samples, 0.01%)</title><rect x="945.2" y="549" width="0.1" height="15.0" fill="rgb(239,222,16)" rx="2" ry="2" />
<text  x="948.21" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="1034.0" y="677" width="0.2" height="15.0" fill="rgb(211,33,19)" rx="2" ry="2" />
<text  x="1037.03" y="687.5" ></text>
</g>
<g >
<title>pick_next_task_idle (2 samples, 0.02%)</title><rect x="1130.4" y="661" width="0.3" height="15.0" fill="rgb(233,220,25)" rx="2" ry="2" />
<text  x="1133.40" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_ptr (2 samples, 0.02%)</title><rect x="84.5" y="901" width="0.2" height="15.0" fill="rgb(222,167,38)" rx="2" ry="2" />
<text  x="87.46" y="911.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.01%)</title><rect x="177.0" y="517" width="0.1" height="15.0" fill="rgb(210,60,52)" rx="2" ry="2" />
<text  x="180.00" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="175.6" y="805" width="0.2" height="15.0" fill="rgb(207,137,47)" rx="2" ry="2" />
<text  x="178.59" y="815.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (1 samples, 0.01%)</title><rect x="165.7" y="181" width="0.1" height="15.0" fill="rgb(208,32,34)" rx="2" ry="2" />
<text  x="168.72" y="191.5" ></text>
</g>
<g >
<title>__GI___poll (9 samples, 0.10%)</title><rect x="1121.0" y="565" width="1.2" height="15.0" fill="rgb(228,9,23)" rx="2" ry="2" />
<text  x="1124.05" y="575.5" ></text>
</g>
<g >
<title>link_path_walk.part.42 (1 samples, 0.01%)</title><rect x="160.7" y="373" width="0.1" height="15.0" fill="rgb(212,123,8)" rx="2" ry="2" />
<text  x="163.72" y="383.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandPlaySound (2 samples, 0.02%)</title><rect x="167.0" y="757" width="0.3" height="15.0" fill="rgb(234,73,19)" rx="2" ry="2" />
<text  x="170.00" y="767.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="470.9" y="597" width="0.1" height="15.0" fill="rgb(217,164,19)" rx="2" ry="2" />
<text  x="473.88" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="229.7" y="389" width="0.1" height="15.0" fill="rgb(240,78,16)" rx="2" ry="2" />
<text  x="232.67" y="399.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="74.9" y="789" width="0.1" height="15.0" fill="rgb(238,184,46)" rx="2" ry="2" />
<text  x="77.85" y="799.5" ></text>
</g>
<g >
<title>page_cache_sync_readahead (2 samples, 0.02%)</title><rect x="156.2" y="261" width="0.3" height="15.0" fill="rgb(253,1,1)" rx="2" ry="2" />
<text  x="159.23" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator* (48 samples, 0.52%)</title><rect x="1152.8" y="773" width="6.2" height="15.0" fill="rgb(232,218,10)" rx="2" ry="2" />
<text  x="1155.83" y="783.5" ></text>
</g>
<g >
<title>[libsndfile.so.1.0.28] (1 samples, 0.01%)</title><rect x="174.0" y="901" width="0.2" height="15.0" fill="rgb(235,57,45)" rx="2" ry="2" />
<text  x="177.05" y="911.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (6 samples, 0.07%)</title><rect x="160.0" y="581" width="0.7" height="15.0" fill="rgb(250,62,46)" rx="2" ry="2" />
<text  x="162.95" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Window_NumberInput, std::default_delete&lt;Window_NumberInput&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="1112.2" y="757" width="0.1" height="15.0" fill="rgb(213,102,50)" rx="2" ry="2" />
<text  x="1115.20" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="478.9" y="741" width="0.2" height="15.0" fill="rgb(227,218,35)" rx="2" ry="2" />
<text  x="481.95" y="751.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="189.4" y="613" width="0.2" height="15.0" fill="rgb(254,18,27)" rx="2" ry="2" />
<text  x="192.43" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="229.7" y="597" width="0.1" height="15.0" fill="rgb(218,227,28)" rx="2" ry="2" />
<text  x="232.67" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="944.8" y="533" width="0.4" height="15.0" fill="rgb(214,204,29)" rx="2" ry="2" />
<text  x="947.82" y="543.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (53 samples, 0.58%)</title><rect x="280.2" y="693" width="6.8" height="15.0" fill="rgb(215,65,18)" rx="2" ry="2" />
<text  x="283.17" y="703.5" ></text>
</g>
<g >
<title>std::__chunk_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (1 samples, 0.01%)</title><rect x="181.5" y="709" width="0.1" height="15.0" fill="rgb(221,65,6)" rx="2" ry="2" />
<text  x="184.48" y="719.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (71 samples, 0.77%)</title><rect x="947.6" y="437" width="9.1" height="15.0" fill="rgb(219,145,1)" rx="2" ry="2" />
<text  x="950.64" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (1 samples, 0.01%)</title><rect x="117.8" y="901" width="0.1" height="15.0" fill="rgb(239,151,26)" rx="2" ry="2" />
<text  x="120.79" y="911.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (8 samples, 0.09%)</title><rect x="950.1" y="341" width="1.0" height="15.0" fill="rgb(223,88,42)" rx="2" ry="2" />
<text  x="953.08" y="351.5" ></text>
</g>
<g >
<title>xcb_wait_for_reply64 (1 samples, 0.01%)</title><rect x="1120.8" y="629" width="0.1" height="15.0" fill="rgb(222,118,45)" rx="2" ry="2" />
<text  x="1123.79" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Graphics::State, (__gnu_cxx::_Lock_policy)2&gt;::get (1 samples, 0.01%)</title><rect x="180.7" y="741" width="0.1" height="15.0" fill="rgb(243,153,4)" rx="2" ry="2" />
<text  x="183.71" y="751.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="548.5" y="565" width="0.2" height="15.0" fill="rgb(235,195,1)" rx="2" ry="2" />
<text  x="551.54" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Bitmap, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator* (1 samples, 0.01%)</title><rect x="231.5" y="741" width="0.1" height="15.0" fill="rgb(226,79,34)" rx="2" ry="2" />
<text  x="234.47" y="751.5" ></text>
</g>
<g >
<title>__GI___nanosleep (1 samples, 0.01%)</title><rect x="84.2" y="901" width="0.1" height="15.0" fill="rgb(228,30,29)" rx="2" ry="2" />
<text  x="87.21" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (60 samples, 0.65%)</title><rect x="1044.3" y="661" width="7.7" height="15.0" fill="rgb(251,161,49)" rx="2" ry="2" />
<text  x="1047.28" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (106 samples, 1.15%)</title><rect x="582.6" y="677" width="13.6" height="15.0" fill="rgb(234,93,35)" rx="2" ry="2" />
<text  x="585.63" y="687.5" ></text>
</g>
<g >
<title>Game_Picture::Erase (11 samples, 0.12%)</title><rect x="925.1" y="661" width="1.4" height="15.0" fill="rgb(251,96,4)" rx="2" ry="2" />
<text  x="928.09" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="170.8" y="741" width="0.3" height="15.0" fill="rgb(218,8,10)" rx="2" ry="2" />
<text  x="173.85" y="751.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandPlaySound (1 samples, 0.01%)</title><rect x="169.1" y="789" width="0.1" height="15.0" fill="rgb(246,53,13)" rx="2" ry="2" />
<text  x="172.05" y="799.5" ></text>
</g>
<g >
<title>handle_irq (2 samples, 0.02%)</title><rect x="468.3" y="677" width="0.3" height="15.0" fill="rgb(221,107,54)" rx="2" ry="2" />
<text  x="471.31" y="687.5" ></text>
</g>
<g >
<title>rw_verify_area (1 samples, 0.01%)</title><rect x="71.6" y="837" width="0.2" height="15.0" fill="rgb(219,170,17)" rx="2" ry="2" />
<text  x="74.65" y="847.5" ></text>
</g>
<g >
<title>std::__chunk_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (1 samples, 0.01%)</title><rect x="96.9" y="901" width="0.1" height="15.0" fill="rgb(238,93,30)" rx="2" ry="2" />
<text  x="99.89" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_S_key (1 samples, 0.01%)</title><rect x="93.4" y="901" width="0.2" height="15.0" fill="rgb(254,22,0)" rx="2" ry="2" />
<text  x="96.43" y="911.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="1148.6" y="693" width="0.1" height="15.0" fill="rgb(206,19,47)" rx="2" ry="2" />
<text  x="1151.60" y="703.5" ></text>
</g>
<g >
<title>file_update_time (1 samples, 0.01%)</title><rect x="73.1" y="789" width="0.1" height="15.0" fill="rgb(227,179,20)" rx="2" ry="2" />
<text  x="76.06" y="799.5" ></text>
</g>
<g >
<title>ReaderUtil::GetElement&lt;RPG::SavePicture&gt; (1 samples, 0.01%)</title><rect x="1100.3" y="709" width="0.1" height="15.0" fill="rgb(224,49,32)" rx="2" ry="2" />
<text  x="1103.29" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="944.1" y="565" width="0.1" height="15.0" fill="rgb(227,35,38)" rx="2" ry="2" />
<text  x="947.05" y="575.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (3 samples, 0.03%)</title><rect x="77.2" y="901" width="0.3" height="15.0" fill="rgb(210,41,23)" rx="2" ry="2" />
<text  x="80.16" y="911.5" ></text>
</g>
<g >
<title>std::_Mu&lt;Game_Picture*, false, false&gt;::operator()&lt;Game_Picture*&amp;, std::tuple&lt;FileRequestResult*&amp;&amp;&gt; &gt; (1 samples, 0.01%)</title><rect x="947.4" y="517" width="0.1" height="15.0" fill="rgb(247,66,20)" rx="2" ry="2" />
<text  x="950.39" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (7 samples, 0.08%)</title><rect x="609.4" y="693" width="0.9" height="15.0" fill="rgb(250,134,19)" rx="2" ry="2" />
<text  x="612.42" y="703.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (1 samples, 0.01%)</title><rect x="166.5" y="885" width="0.1" height="15.0" fill="rgb(231,142,26)" rx="2" ry="2" />
<text  x="169.49" y="895.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (4 samples, 0.04%)</title><rect x="170.6" y="885" width="0.5" height="15.0" fill="rgb(253,48,30)" rx="2" ry="2" />
<text  x="173.59" y="895.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="74.9" y="757" width="0.1" height="15.0" fill="rgb(229,37,2)" rx="2" ry="2" />
<text  x="77.85" y="767.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (1 samples, 0.01%)</title><rect x="169.1" y="725" width="0.1" height="15.0" fill="rgb(232,127,5)" rx="2" ry="2" />
<text  x="172.05" y="735.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, Drawable**, Drawable**&gt; (1 samples, 0.01%)</title><rect x="955.8" y="277" width="0.2" height="15.0" fill="rgb(215,30,21)" rx="2" ry="2" />
<text  x="958.85" y="287.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="892.0" y="613" width="0.1" height="15.0" fill="rgb(245,100,52)" rx="2" ry="2" />
<text  x="895.02" y="623.5" ></text>
</g>
<g >
<title>io_schedule (1 samples, 0.01%)</title><rect x="156.1" y="261" width="0.1" height="15.0" fill="rgb(251,42,13)" rx="2" ry="2" />
<text  x="159.11" y="271.5" ></text>
</g>
<g >
<title>MakeFlashColor (1 samples, 0.01%)</title><rect x="959.9" y="613" width="0.2" height="15.0" fill="rgb(244,157,43)" rx="2" ry="2" />
<text  x="962.95" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_S_value (5 samples, 0.05%)</title><rect x="317.1" y="693" width="0.6" height="15.0" fill="rgb(224,42,4)" rx="2" ry="2" />
<text  x="320.08" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="175.6" y="709" width="0.1" height="15.0" fill="rgb(248,48,25)" rx="2" ry="2" />
<text  x="178.59" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::_M_deleter (1 samples, 0.01%)</title><rect x="956.6" y="389" width="0.1" height="15.0" fill="rgb(208,62,50)" rx="2" ry="2" />
<text  x="959.61" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="229.7" y="565" width="0.1" height="15.0" fill="rgb(214,154,36)" rx="2" ry="2" />
<text  x="232.67" y="575.5" ></text>
</g>
<g >
<title>AudioDecoder::Decode (1 samples, 0.01%)</title><rect x="161.0" y="581" width="0.1" height="15.0" fill="rgb(218,96,10)" rx="2" ry="2" />
<text  x="163.98" y="591.5" ></text>
</g>
<g >
<title>update_curr (1 samples, 0.01%)</title><rect x="943.0" y="277" width="0.2" height="15.0" fill="rgb(228,20,42)" rx="2" ry="2" />
<text  x="946.03" y="287.5" ></text>
</g>
<g >
<title>PicPointerPatch::AdjustId (1 samples, 0.01%)</title><rect x="81.0" y="901" width="0.1" height="15.0" fill="rgb(216,87,49)" rx="2" ry="2" />
<text  x="84.00" y="911.5" ></text>
</g>
<g >
<title>xhci_giveback_urb_in_irq.isra.43 (1 samples, 0.01%)</title><rect x="70.7" y="565" width="0.2" height="15.0" fill="rgb(246,166,4)" rx="2" ry="2" />
<text  x="73.75" y="575.5" ></text>
</g>
<g >
<title>pixman_image_composite32 (3 samples, 0.03%)</title><rect x="90.9" y="901" width="0.4" height="15.0" fill="rgb(219,156,50)" rx="2" ry="2" />
<text  x="93.87" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (1 samples, 0.01%)</title><rect x="961.7" y="613" width="0.2" height="15.0" fill="rgb(249,89,14)" rx="2" ry="2" />
<text  x="964.74" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="1127.2" y="597" width="0.5" height="15.0" fill="rgb(249,16,18)" rx="2" ry="2" />
<text  x="1130.20" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector (1 samples, 0.01%)</title><rect x="177.3" y="549" width="0.1" height="15.0" fill="rgb(254,39,51)" rx="2" ry="2" />
<text  x="180.25" y="559.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="174.9" y="405" width="0.2" height="15.0" fill="rgb(221,33,2)" rx="2" ry="2" />
<text  x="177.95" y="415.5" ></text>
</g>
<g >
<title>schedule (11 samples, 0.12%)</title><rect x="1129.3" y="677" width="1.4" height="15.0" fill="rgb(222,104,31)" rx="2" ry="2" />
<text  x="1132.25" y="687.5" ></text>
</g>
<g >
<title>FileFinder::FindImage (1 samples, 0.01%)</title><rect x="158.7" y="629" width="0.1" height="15.0" fill="rgb(240,148,35)" rx="2" ry="2" />
<text  x="161.67" y="639.5" ></text>
</g>
<g >
<title>std::bitset&lt;36ul&gt;::operator[] (1 samples, 0.01%)</title><rect x="480.6" y="773" width="0.1" height="15.0" fill="rgb(254,74,35)" rx="2" ry="2" />
<text  x="483.62" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (1 samples, 0.01%)</title><rect x="89.1" y="901" width="0.1" height="15.0" fill="rgb(211,150,48)" rx="2" ry="2" />
<text  x="92.08" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;short const*, std::vector&lt;short, std::allocator&lt;short&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="90.1" y="901" width="0.1" height="15.0" fill="rgb(211,35,46)" rx="2" ry="2" />
<text  x="93.10" y="911.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (1 samples, 0.01%)</title><rect x="166.5" y="517" width="0.1" height="15.0" fill="rgb(251,140,48)" rx="2" ry="2" />
<text  x="169.49" y="527.5" ></text>
</g>
<g >
<title>filename_lookup.part.60 (1 samples, 0.01%)</title><rect x="160.7" y="405" width="0.1" height="15.0" fill="rgb(216,139,50)" rx="2" ry="2" />
<text  x="163.72" y="415.5" ></text>
</g>
<g >
<title>handle_irq (2 samples, 0.02%)</title><rect x="74.0" y="885" width="0.2" height="15.0" fill="rgb(225,195,47)" rx="2" ry="2" />
<text  x="76.95" y="895.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (4 samples, 0.04%)</title><rect x="121.4" y="757" width="0.5" height="15.0" fill="rgb(207,63,33)" rx="2" ry="2" />
<text  x="124.37" y="767.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (35 samples, 0.38%)</title><rect x="297.9" y="709" width="4.4" height="15.0" fill="rgb(228,147,22)" rx="2" ry="2" />
<text  x="300.85" y="719.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (2 samples, 0.02%)</title><rect x="175.8" y="869" width="0.3" height="15.0" fill="rgb(217,145,19)" rx="2" ry="2" />
<text  x="178.84" y="879.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="954.9" y="229" width="0.2" height="15.0" fill="rgb(230,222,46)" rx="2" ry="2" />
<text  x="957.95" y="239.5" ></text>
</g>
<g >
<title>schedule (79 samples, 0.86%)</title><rect x="61.0" y="805" width="10.1" height="15.0" fill="rgb(253,23,7)" rx="2" ry="2" />
<text  x="64.01" y="815.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="957.1" y="501" width="0.3" height="15.0" fill="rgb(222,165,3)" rx="2" ry="2" />
<text  x="960.13" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="1106.3" y="757" width="0.1" height="15.0" fill="rgb(236,143,46)" rx="2" ry="2" />
<text  x="1109.31" y="767.5" ></text>
</g>
<g >
<title>kthread_blkcg (1 samples, 0.01%)</title><rect x="160.1" y="181" width="0.1" height="15.0" fill="rgb(220,182,20)" rx="2" ry="2" />
<text  x="163.08" y="191.5" ></text>
</g>
<g >
<title>Cache::System (5 samples, 0.05%)</title><rect x="1110.0" y="677" width="0.7" height="15.0" fill="rgb(228,68,39)" rx="2" ry="2" />
<text  x="1113.03" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.3" y="677" width="0.1" height="15.0" fill="rgb(245,173,11)" rx="2" ry="2" />
<text  x="180.25" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;int, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;int&gt; (1 samples, 0.01%)</title><rect x="943.4" y="517" width="0.1" height="15.0" fill="rgb(243,39,7)" rx="2" ry="2" />
<text  x="946.41" y="527.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.03%)</title><rect x="165.6" y="341" width="0.4" height="15.0" fill="rgb(225,222,41)" rx="2" ry="2" />
<text  x="168.59" y="351.5" ></text>
</g>
<g >
<title>Input::Update (35 samples, 0.38%)</title><rect x="478.3" y="805" width="4.5" height="15.0" fill="rgb(247,11,36)" rx="2" ry="2" />
<text  x="481.31" y="815.5" ></text>
</g>
<g >
<title>[libGLX.so.0.0.0] (2 samples, 0.02%)</title><rect x="477.0" y="725" width="0.3" height="15.0" fill="rgb(218,70,14)" rx="2" ry="2" />
<text  x="480.03" y="735.5" ></text>
</g>
<g >
<title>MapUpdateAsyncContext::IsActive (1 samples, 0.01%)</title><rect x="1106.2" y="757" width="0.1" height="15.0" fill="rgb(249,221,45)" rx="2" ry="2" />
<text  x="1109.18" y="767.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (9 samples, 0.10%)</title><rect x="1121.0" y="613" width="1.2" height="15.0" fill="rgb(241,91,29)" rx="2" ry="2" />
<text  x="1124.05" y="623.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.01%)</title><rect x="1004.9" y="517" width="0.2" height="15.0" fill="rgb(252,203,35)" rx="2" ry="2" />
<text  x="1007.93" y="527.5" ></text>
</g>
<g >
<title>Game_Map::SetNeedRefresh (1 samples, 0.01%)</title><rect x="1006.0" y="677" width="0.1" height="15.0" fill="rgb(222,190,10)" rx="2" ry="2" />
<text  x="1008.96" y="687.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.01%)</title><rect x="159.6" y="613" width="0.1" height="15.0" fill="rgb(229,129,52)" rx="2" ry="2" />
<text  x="162.57" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="1110.4" y="645" width="0.1" height="15.0" fill="rgb(221,36,53)" rx="2" ry="2" />
<text  x="1113.41" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::operator= (1 samples, 0.01%)</title><rect x="953.2" y="389" width="0.1" height="15.0" fill="rgb(205,109,52)" rx="2" ry="2" />
<text  x="956.15" y="399.5" ></text>
</g>
<g >
<title>operator!= (1 samples, 0.01%)</title><rect x="952.0" y="373" width="0.1" height="15.0" fill="rgb(213,117,7)" rx="2" ry="2" />
<text  x="955.00" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="957.1" y="405" width="0.2" height="15.0" fill="rgb(213,9,25)" rx="2" ry="2" />
<text  x="960.13" y="415.5" ></text>
</g>
<g >
<title>__libc_start_main (7,880 samples, 85.59%)</title><rect x="178.9" y="901" width="1009.9" height="15.0" fill="rgb(229,108,21)" rx="2" ry="2" />
<text  x="181.92" y="911.5" >__libc_start_main</text>
</g>
<g >
<title>__tls_get_addr@plt (1 samples, 0.01%)</title><rect x="286.8" y="677" width="0.2" height="15.0" fill="rgb(246,108,10)" rx="2" ry="2" />
<text  x="289.83" y="687.5" ></text>
</g>
<g >
<title>Graphics::SortDrawableList (1 samples, 0.01%)</title><rect x="324.8" y="677" width="0.1" height="15.0" fill="rgb(248,22,32)" rx="2" ry="2" />
<text  x="327.77" y="687.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="943.0" y="373" width="0.2" height="15.0" fill="rgb(234,210,4)" rx="2" ry="2" />
<text  x="946.03" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (1 samples, 0.01%)</title><rect x="175.6" y="565" width="0.1" height="15.0" fill="rgb(242,7,3)" rx="2" ry="2" />
<text  x="178.59" y="575.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.02%)</title><rect x="122.1" y="821" width="0.3" height="15.0" fill="rgb(241,70,25)" rx="2" ry="2" />
<text  x="125.14" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;TilemapLayer::TileData, std::allocator&lt;TilemapLayer::TileData&gt; &gt;, std::allocator&lt;std::vector&lt;TilemapLayer::TileData, std::allocator&lt;TilemapLayer::TileData&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="323.1" y="757" width="0.1" height="15.0" fill="rgb(221,13,13)" rx="2" ry="2" />
<text  x="326.10" y="767.5" ></text>
</g>
<g >
<title>operator== (1 samples, 0.01%)</title><rect x="952.0" y="357" width="0.1" height="15.0" fill="rgb(252,11,23)" rx="2" ry="2" />
<text  x="955.00" y="367.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.6" y="373" width="0.1" height="15.0" fill="rgb(252,7,33)" rx="2" ry="2" />
<text  x="178.59" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::swap (3 samples, 0.03%)</title><rect x="925.7" y="629" width="0.4" height="15.0" fill="rgb(236,78,23)" rx="2" ry="2" />
<text  x="928.73" y="639.5" ></text>
</g>
<g >
<title>__vma_adjust (1 samples, 0.01%)</title><rect x="174.9" y="149" width="0.2" height="15.0" fill="rgb(240,181,30)" rx="2" ry="2" />
<text  x="177.95" y="159.5" ></text>
</g>
<g >
<title>__update_load_avg_cfs_rq (2 samples, 0.02%)</title><rect x="762.3" y="549" width="0.3" height="15.0" fill="rgb(213,84,10)" rx="2" ry="2" />
<text  x="765.32" y="559.5" ></text>
</g>
<g >
<title>SDLAudioP2 (505 samples, 5.48%)</title><rect x="10.0" y="933" width="64.7" height="15.0" fill="rgb(228,51,1)" rx="2" ry="2" />
<text  x="13.00" y="943.5" >SDLAudi..</text>
</g>
<g >
<title>pmd_devmap_trans_unstable (1 samples, 0.01%)</title><rect x="940.0" y="341" width="0.1" height="15.0" fill="rgb(207,66,15)" rx="2" ry="2" />
<text  x="942.95" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="229.7" y="325" width="0.1" height="15.0" fill="rgb(226,113,14)" rx="2" ry="2" />
<text  x="232.67" y="335.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="944.4" y="517" width="0.4" height="15.0" fill="rgb(213,168,15)" rx="2" ry="2" />
<text  x="947.44" y="527.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (2 samples, 0.02%)</title><rect x="174.8" y="693" width="0.3" height="15.0" fill="rgb(205,218,44)" rx="2" ry="2" />
<text  x="177.82" y="703.5" ></text>
</g>
<g >
<title>do_mmap (1 samples, 0.01%)</title><rect x="229.7" y="261" width="0.1" height="15.0" fill="rgb(235,125,34)" rx="2" ry="2" />
<text  x="232.67" y="271.5" ></text>
</g>
<g >
<title>Game_Screen::GetFlashColor (1 samples, 0.01%)</title><rect x="1103.1" y="709" width="0.1" height="15.0" fill="rgb(252,122,11)" rx="2" ry="2" />
<text  x="1106.11" y="719.5" ></text>
</g>
<g >
<title>memcmp@plt (1 samples, 0.01%)</title><rect x="950.2" y="261" width="0.1" height="15.0" fill="rgb(213,149,5)" rx="2" ry="2" />
<text  x="953.21" y="271.5" ></text>
</g>
<g >
<title>std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;::operator() (1 samples, 0.01%)</title><rect x="1111.6" y="629" width="0.1" height="15.0" fill="rgb(244,20,44)" rx="2" ry="2" />
<text  x="1114.56" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="1130.9" y="693" width="0.1" height="15.0" fill="rgb(207,139,17)" rx="2" ry="2" />
<text  x="1133.92" y="703.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="177.3" y="789" width="0.1" height="15.0" fill="rgb(235,136,40)" rx="2" ry="2" />
<text  x="180.25" y="799.5" ></text>
</g>
<g >
<title>Game_Picture::Show (171 samples, 1.86%)</title><rect x="938.7" y="661" width="21.9" height="15.0" fill="rgb(238,196,45)" rx="2" ry="2" />
<text  x="941.67" y="671.5" >G..</text>
</g>
<g >
<title>Cache::SpriteEffect(std::shared_ptr&lt;Bitmap&gt; const&amp;, Rect const&amp;, bool, bool, Tone const&amp;, Color const&amp;)::{lambda()#1}::operator() (1 samples, 0.01%)</title><rect x="229.7" y="709" width="0.1" height="15.0" fill="rgb(216,224,46)" rx="2" ry="2" />
<text  x="232.67" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Interpreter_Map, std::default_delete&lt;Game_Interpreter_Map&gt; &gt;::operator (2 samples, 0.02%)</title><rect x="1095.3" y="725" width="0.2" height="15.0" fill="rgb(233,81,2)" rx="2" ry="2" />
<text  x="1098.29" y="735.5" ></text>
</g>
<g >
<title>Sdl2Ui::GetTicks (1 samples, 0.01%)</title><rect x="1111.2" y="677" width="0.1" height="15.0" fill="rgb(229,168,29)" rx="2" ry="2" />
<text  x="1114.18" y="687.5" ></text>
</g>
<g >
<title>__GI___nanosleep (16 samples, 0.17%)</title><rect x="1128.7" y="773" width="2.1" height="15.0" fill="rgb(239,154,34)" rx="2" ry="2" />
<text  x="1131.74" y="783.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (2 samples, 0.02%)</title><rect x="165.7" y="197" width="0.3" height="15.0" fill="rgb(231,113,10)" rx="2" ry="2" />
<text  x="168.72" y="207.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (1,090 samples, 11.84%)</title><rect x="328.9" y="725" width="139.7" height="15.0" fill="rgb(214,133,6)" rx="2" ry="2" />
<text  x="331.87" y="735.5" >[libSDL2-2.0.so.0..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.01%)</title><rect x="96.1" y="901" width="0.2" height="15.0" fill="rgb(217,86,20)" rx="2" ry="2" />
<text  x="99.13" y="911.5" ></text>
</g>
<g >
<title>common_file_perm (1 samples, 0.01%)</title><rect x="71.6" y="789" width="0.2" height="15.0" fill="rgb(231,224,15)" rx="2" ry="2" />
<text  x="74.65" y="799.5" ></text>
</g>
<g >
<title>Bitmap::WaverBlit (5 samples, 0.05%)</title><rect x="190.1" y="709" width="0.6" height="15.0" fill="rgb(207,85,44)" rx="2" ry="2" />
<text  x="193.07" y="719.5" ></text>
</g>
<g >
<title>Bitmap::Init (1 samples, 0.01%)</title><rect x="229.7" y="533" width="0.1" height="15.0" fill="rgb(208,221,46)" rx="2" ry="2" />
<text  x="232.67" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::operator (7 samples, 0.08%)</title><rect x="1104.5" y="709" width="0.9" height="15.0" fill="rgb(210,91,42)" rx="2" ry="2" />
<text  x="1107.52" y="719.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="1100.4" y="677" width="0.1" height="15.0" fill="rgb(224,197,2)" rx="2" ry="2" />
<text  x="1103.41" y="687.5" ></text>
</g>
<g >
<title>__ext4_ext_check (1 samples, 0.01%)</title><rect x="155.5" y="277" width="0.1" height="15.0" fill="rgb(232,160,20)" rx="2" ry="2" />
<text  x="158.47" y="287.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (1 samples, 0.01%)</title><rect x="162.4" y="373" width="0.1" height="15.0" fill="rgb(231,178,38)" rx="2" ry="2" />
<text  x="165.39" y="383.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="189.4" y="549" width="0.2" height="15.0" fill="rgb(247,111,33)" rx="2" ry="2" />
<text  x="192.43" y="559.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, FileRequestAsync, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="935.7" y="629" width="0.2" height="15.0" fill="rgb(212,92,18)" rx="2" ry="2" />
<text  x="938.72" y="639.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="225.7" y="645" width="0.1" height="15.0" fill="rgb(228,178,45)" rx="2" ry="2" />
<text  x="228.70" y="655.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.01%)</title><rect x="943.9" y="389" width="0.2" height="15.0" fill="rgb(232,136,9)" rx="2" ry="2" />
<text  x="946.93" y="399.5" ></text>
</g>
<g >
<title>std::stable_sort&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, bool (*)(Drawable const*, Drawable const*)&gt; (40 samples, 0.43%)</title><rect x="323.5" y="773" width="5.1" height="15.0" fill="rgb(222,109,47)" rx="2" ry="2" />
<text  x="326.49" y="783.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="70.7" y="629" width="0.2" height="15.0" fill="rgb(243,134,31)" rx="2" ry="2" />
<text  x="73.75" y="639.5" ></text>
</g>
<g >
<title>Game_Map::GetBushDepth (2 samples, 0.02%)</title><rect x="1107.6" y="725" width="0.2" height="15.0" fill="rgb(230,27,39)" rx="2" ry="2" />
<text  x="1110.59" y="735.5" ></text>
</g>
<g >
<title>TilemapSubLayer::GetZ (1 samples, 0.01%)</title><rect x="82.9" y="901" width="0.2" height="15.0" fill="rgb(223,198,26)" rx="2" ry="2" />
<text  x="85.92" y="911.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="175.8" y="677" width="0.3" height="15.0" fill="rgb(229,81,31)" rx="2" ry="2" />
<text  x="178.84" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;Game_Event*, std::allocator&lt;Game_Event*&gt; &gt;::vector (1 samples, 0.01%)</title><rect x="961.0" y="661" width="0.1" height="15.0" fill="rgb(231,62,6)" rx="2" ry="2" />
<text  x="963.97" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.8" y="437" width="0.2" height="15.0" fill="rgb(233,212,20)" rx="2" ry="2" />
<text  x="178.84" y="447.5" ></text>
</g>
<g >
<title>operator== (1 samples, 0.01%)</title><rect x="1103.2" y="661" width="0.2" height="15.0" fill="rgb(238,117,34)" rx="2" ry="2" />
<text  x="1106.23" y="671.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (2 samples, 0.02%)</title><rect x="121.5" y="741" width="0.3" height="15.0" fill="rgb(222,221,52)" rx="2" ry="2" />
<text  x="124.50" y="751.5" ></text>
</g>
<g >
<title>deactivate_task (1 samples, 0.01%)</title><rect x="1129.3" y="645" width="0.1" height="15.0" fill="rgb(221,67,14)" rx="2" ry="2" />
<text  x="1132.25" y="655.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="952.3" y="309" width="0.1" height="15.0" fill="rgb(238,0,41)" rx="2" ry="2" />
<text  x="955.26" y="319.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_manager (1 samples, 0.01%)</title><rect x="957.1" y="437" width="0.2" height="15.0" fill="rgb(249,210,27)" rx="2" ry="2" />
<text  x="960.13" y="447.5" ></text>
</g>
<g >
<title>__fdget (1 samples, 0.01%)</title><rect x="1127.6" y="517" width="0.1" height="15.0" fill="rgb(216,178,28)" rx="2" ry="2" />
<text  x="1130.58" y="527.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="561.9" y="597" width="0.1" height="15.0" fill="rgb(236,85,52)" rx="2" ry="2" />
<text  x="564.87" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;bool&amp;&gt; (1 samples, 0.01%)</title><rect x="230.1" y="677" width="0.1" height="15.0" fill="rgb(208,85,14)" rx="2" ry="2" />
<text  x="233.06" y="687.5" ></text>
</g>
<g >
<title>Player::MainLoop (1 samples, 0.01%)</title><rect x="166.9" y="885" width="0.1" height="15.0" fill="rgb(246,174,45)" rx="2" ry="2" />
<text  x="169.87" y="895.5" ></text>
</g>
<g >
<title>std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;::operator() (8 samples, 0.09%)</title><rect x="950.1" y="357" width="1.0" height="15.0" fill="rgb(209,40,32)" rx="2" ry="2" />
<text  x="953.08" y="367.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.01%)</title><rect x="477.8" y="629" width="0.1" height="15.0" fill="rgb(233,191,39)" rx="2" ry="2" />
<text  x="480.80" y="639.5" ></text>
</g>
<g >
<title>std::ostream::put (1 samples, 0.01%)</title><rect x="935.9" y="421" width="0.1" height="15.0" fill="rgb(221,48,39)" rx="2" ry="2" />
<text  x="938.85" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_poll (2 samples, 0.02%)</title><rect x="1128.5" y="661" width="0.2" height="15.0" fill="rgb(214,16,53)" rx="2" ry="2" />
<text  x="1131.48" y="671.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="889.8" y="517" width="0.2" height="15.0" fill="rgb(227,176,25)" rx="2" ry="2" />
<text  x="892.84" y="527.5" ></text>
</g>
<g >
<title>handle_tx_event (1 samples, 0.01%)</title><rect x="74.1" y="773" width="0.1" height="15.0" fill="rgb(238,208,38)" rx="2" ry="2" />
<text  x="77.08" y="783.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (17 samples, 0.18%)</title><rect x="156.5" y="485" width="2.2" height="15.0" fill="rgb(254,107,9)" rx="2" ry="2" />
<text  x="159.49" y="495.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (2 samples, 0.02%)</title><rect x="475.6" y="709" width="0.3" height="15.0" fill="rgb(231,165,29)" rx="2" ry="2" />
<text  x="478.62" y="719.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandEndLoop (186 samples, 2.02%)</title><rect x="901.1" y="677" width="23.9" height="15.0" fill="rgb(250,125,37)" rx="2" ry="2" />
<text  x="904.12" y="687.5" >G..</text>
</g>
<g >
<title>AudioResampler::~AudioResampler (1 samples, 0.01%)</title><rect x="169.1" y="485" width="0.1" height="15.0" fill="rgb(217,57,35)" rx="2" ry="2" />
<text  x="172.05" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="304.8" y="741" width="0.1" height="15.0" fill="rgb(235,146,54)" rx="2" ry="2" />
<text  x="307.78" y="751.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="227.2" y="613" width="0.2" height="15.0" fill="rgb(252,99,18)" rx="2" ry="2" />
<text  x="230.24" y="623.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="954.3" y="325" width="0.1" height="15.0" fill="rgb(253,104,5)" rx="2" ry="2" />
<text  x="957.31" y="335.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="189.4" y="533" width="0.2" height="15.0" fill="rgb(252,87,29)" rx="2" ry="2" />
<text  x="192.43" y="543.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="177.3" y="389" width="0.1" height="15.0" fill="rgb(223,161,19)" rx="2" ry="2" />
<text  x="180.25" y="399.5" ></text>
</g>
<g >
<title>[libGLdispatch.so.0.0.0] (1 samples, 0.01%)</title><rect x="477.4" y="709" width="0.1" height="15.0" fill="rgb(225,219,35)" rx="2" ry="2" />
<text  x="480.41" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="101.0" y="901" width="0.1" height="15.0" fill="rgb(252,12,32)" rx="2" ry="2" />
<text  x="104.00" y="911.5" ></text>
</g>
<g >
<title>select_task_rq_fair (1 samples, 0.01%)</title><rect x="72.0" y="725" width="0.2" height="15.0" fill="rgb(219,159,49)" rx="2" ry="2" />
<text  x="75.03" y="735.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="482.2" y="693" width="0.2" height="15.0" fill="rgb(214,52,20)" rx="2" ry="2" />
<text  x="485.15" y="703.5" ></text>
</g>
<g >
<title>Game_Picture::Update()::{lambda(double, double)#1}::operator() (1 samples, 0.01%)</title><rect x="1100.8" y="725" width="0.1" height="15.0" fill="rgb(250,104,24)" rx="2" ry="2" />
<text  x="1103.80" y="735.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="1122.2" y="645" width="0.4" height="15.0" fill="rgb(216,174,0)" rx="2" ry="2" />
<text  x="1125.20" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;AudioSeData, (__gnu_cxx::_Lock_policy)2&gt;::get (4 samples, 0.04%)</title><rect x="936.5" y="421" width="0.5" height="15.0" fill="rgb(251,209,52)" rx="2" ry="2" />
<text  x="939.49" y="431.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.01%)</title><rect x="74.1" y="677" width="0.1" height="15.0" fill="rgb(232,171,26)" rx="2" ry="2" />
<text  x="77.08" y="687.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="940.0" y="453" width="0.1" height="15.0" fill="rgb(209,182,30)" rx="2" ry="2" />
<text  x="942.95" y="463.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, Game_Picture*, false&gt;::_Head_base&lt;Game_Picture*&amp;&gt; (1 samples, 0.01%)</title><rect x="91.9" y="901" width="0.1" height="15.0" fill="rgb(218,26,32)" rx="2" ry="2" />
<text  x="94.90" y="911.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_manager (2 samples, 0.02%)</title><rect x="942.9" y="549" width="0.3" height="15.0" fill="rgb(215,52,5)" rx="2" ry="2" />
<text  x="945.90" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.01%)</title><rect x="957.3" y="405" width="0.1" height="15.0" fill="rgb(251,8,16)" rx="2" ry="2" />
<text  x="960.26" y="415.5" ></text>
</g>
<g >
<title>Game_System::OnSeReady (1 samples, 0.01%)</title><rect x="169.1" y="613" width="0.1" height="15.0" fill="rgb(245,215,33)" rx="2" ry="2" />
<text  x="172.05" y="623.5" ></text>
</g>
<g >
<title>ext4_ext_check_inode (1 samples, 0.01%)</title><rect x="155.5" y="293" width="0.1" height="15.0" fill="rgb(242,33,13)" rx="2" ry="2" />
<text  x="158.47" y="303.5" ></text>
</g>
<g >
<title>__tls_get_addr (1 samples, 0.01%)</title><rect x="286.7" y="661" width="0.1" height="15.0" fill="rgb(214,153,14)" rx="2" ry="2" />
<text  x="289.70" y="671.5" ></text>
</g>
<g >
<title>do_sys_open (2 samples, 0.02%)</title><rect x="155.5" y="373" width="0.2" height="15.0" fill="rgb(220,119,3)" rx="2" ry="2" />
<text  x="158.47" y="383.5" ></text>
</g>
<g >
<title>Game_System::OnSeReady (5 samples, 0.05%)</title><rect x="160.7" y="645" width="0.7" height="15.0" fill="rgb(243,152,11)" rx="2" ry="2" />
<text  x="163.72" y="655.5" ></text>
</g>
<g >
<title>Utils::DecodeUTF32 (2 samples, 0.02%)</title><rect x="155.0" y="837" width="0.2" height="15.0" fill="rgb(241,28,43)" rx="2" ry="2" />
<text  x="157.95" y="847.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="175.8" y="709" width="0.3" height="15.0" fill="rgb(217,32,53)" rx="2" ry="2" />
<text  x="178.84" y="719.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::~function (8 samples, 0.09%)</title><rect x="945.3" y="613" width="1.1" height="15.0" fill="rgb(224,89,37)" rx="2" ry="2" />
<text  x="948.34" y="623.5" ></text>
</g>
<g >
<title>std::swap&lt;Bitmap*&gt; (1 samples, 0.01%)</title><rect x="231.2" y="693" width="0.1" height="15.0" fill="rgb(248,221,21)" rx="2" ry="2" />
<text  x="234.21" y="703.5" ></text>
</g>
<g >
<title>[libX11.so.6.3.0] (1 samples, 0.01%)</title><rect x="477.9" y="725" width="0.2" height="15.0" fill="rgb(228,89,24)" rx="2" ry="2" />
<text  x="480.92" y="735.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="259.4" y="693" width="0.1" height="15.0" fill="rgb(245,153,43)" rx="2" ry="2" />
<text  x="262.41" y="703.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="177.3" y="837" width="0.1" height="15.0" fill="rgb(240,23,42)" rx="2" ry="2" />
<text  x="180.25" y="847.5" ></text>
</g>
<g >
<title>_XSend (1 samples, 0.01%)</title><rect x="1120.9" y="645" width="0.1" height="15.0" fill="rgb(212,218,33)" rx="2" ry="2" />
<text  x="1123.92" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (1 samples, 0.01%)</title><rect x="1111.9" y="613" width="0.2" height="15.0" fill="rgb(245,85,26)" rx="2" ry="2" />
<text  x="1114.95" y="623.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="70.7" y="725" width="0.2" height="15.0" fill="rgb(252,1,51)" rx="2" ry="2" />
<text  x="73.75" y="735.5" ></text>
</g>
<g >
<title>std::replace&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, char&gt; (3 samples, 0.03%)</title><rect x="940.7" y="597" width="0.4" height="15.0" fill="rgb(253,216,21)" rx="2" ry="2" />
<text  x="943.72" y="607.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (1 samples, 0.01%)</title><rect x="168.9" y="709" width="0.2" height="15.0" fill="rgb(218,14,31)" rx="2" ry="2" />
<text  x="171.92" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;short, std::allocator&lt;short&gt; &gt;::empty (2 samples, 0.02%)</title><rect x="1107.6" y="693" width="0.2" height="15.0" fill="rgb(253,131,39)" rx="2" ry="2" />
<text  x="1110.59" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (3 samples, 0.03%)</title><rect x="517.8" y="693" width="0.4" height="15.0" fill="rgb(218,9,53)" rx="2" ry="2" />
<text  x="520.78" y="703.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, FileRequestResult*&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="947.5" y="485" width="0.1" height="15.0" fill="rgb(236,108,52)" rx="2" ry="2" />
<text  x="950.51" y="495.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="942.6" y="501" width="0.2" height="15.0" fill="rgb(224,160,13)" rx="2" ry="2" />
<text  x="945.64" y="511.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (52 samples, 0.56%)</title><rect x="468.8" y="709" width="6.7" height="15.0" fill="rgb(220,217,47)" rx="2" ry="2" />
<text  x="471.82" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.3" y="645" width="0.1" height="15.0" fill="rgb(242,217,9)" rx="2" ry="2" />
<text  x="180.25" y="655.5" ></text>
</g>
<g >
<title>[libGLdispatch.so.0.0.0] (3 samples, 0.03%)</title><rect x="123.4" y="917" width="0.4" height="15.0" fill="rgb(230,26,50)" rx="2" ry="2" />
<text  x="126.42" y="927.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Scene, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (1 samples, 0.01%)</title><rect x="1078.4" y="709" width="0.1" height="15.0" fill="rgb(208,206,35)" rx="2" ry="2" />
<text  x="1081.37" y="719.5" ></text>
</g>
<g >
<title>Game_Picture::RequestPictureSprite (153 samples, 1.66%)</title><rect x="939.3" y="645" width="19.6" height="15.0" fill="rgb(213,202,54)" rx="2" ry="2" />
<text  x="942.31" y="655.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::function (5 samples, 0.05%)</title><rect x="944.2" y="613" width="0.6" height="15.0" fill="rgb(225,177,54)" rx="2" ry="2" />
<text  x="947.18" y="623.5" ></text>
</g>
<g >
<title>____fput (1 samples, 0.01%)</title><rect x="160.3" y="245" width="0.2" height="15.0" fill="rgb(213,158,27)" rx="2" ry="2" />
<text  x="163.34" y="255.5" ></text>
</g>
<g >
<title>Game_Interpreter::Update (6 samples, 0.07%)</title><rect x="169.1" y="837" width="0.7" height="15.0" fill="rgb(247,46,13)" rx="2" ry="2" />
<text  x="172.05" y="847.5" ></text>
</g>
<g >
<title>memmove (1 samples, 0.01%)</title><rect x="328.2" y="613" width="0.2" height="15.0" fill="rgb(206,132,28)" rx="2" ry="2" />
<text  x="331.23" y="623.5" ></text>
</g>
<g >
<title>icu_63::StringByteSink&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::StringByteSink (1 samples, 0.01%)</title><rect x="166.7" y="677" width="0.2" height="15.0" fill="rgb(205,126,16)" rx="2" ry="2" />
<text  x="169.74" y="687.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (1 samples, 0.01%)</title><rect x="177.3" y="901" width="0.1" height="15.0" fill="rgb(238,92,46)" rx="2" ry="2" />
<text  x="180.25" y="911.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="304.8" y="693" width="0.1" height="15.0" fill="rgb(228,167,35)" rx="2" ry="2" />
<text  x="307.78" y="703.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::operator()&lt;FileRequestResult*, void&gt; (1 samples, 0.01%)</title><rect x="159.6" y="757" width="0.1" height="15.0" fill="rgb(239,141,15)" rx="2" ry="2" />
<text  x="162.57" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.02%)</title><rect x="116.5" y="901" width="0.3" height="15.0" fill="rgb(208,77,37)" rx="2" ry="2" />
<text  x="119.50" y="911.5" ></text>
</g>
<g >
<title>__GI___libc_read (6 samples, 0.07%)</title><rect x="155.7" y="437" width="0.8" height="15.0" fill="rgb(227,131,50)" rx="2" ry="2" />
<text  x="158.72" y="447.5" ></text>
</g>
<g >
<title>Bitmap::Init (1 samples, 0.01%)</title><rect x="175.8" y="581" width="0.2" height="15.0" fill="rgb(233,212,16)" rx="2" ry="2" />
<text  x="178.84" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.0" y="773" width="0.1" height="15.0" fill="rgb(254,204,31)" rx="2" ry="2" />
<text  x="180.00" y="783.5" ></text>
</g>
<g >
<title>new_do_write (1 samples, 0.01%)</title><rect x="935.9" y="341" width="0.1" height="15.0" fill="rgb(231,179,23)" rx="2" ry="2" />
<text  x="938.85" y="351.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.01%)</title><rect x="165.6" y="213" width="0.1" height="15.0" fill="rgb(234,206,14)" rx="2" ry="2" />
<text  x="168.59" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="90.0" y="901" width="0.1" height="15.0" fill="rgb(239,203,25)" rx="2" ry="2" />
<text  x="92.97" y="911.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (1 samples, 0.01%)</title><rect x="59.6" y="869" width="0.1" height="15.0" fill="rgb(252,3,11)" rx="2" ry="2" />
<text  x="62.60" y="879.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::~_Head_base (1 samples, 0.01%)</title><rect x="951.7" y="357" width="0.2" height="15.0" fill="rgb(207,214,12)" rx="2" ry="2" />
<text  x="954.74" y="367.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="948.9" y="341" width="0.2" height="15.0" fill="rgb(235,141,25)" rx="2" ry="2" />
<text  x="951.92" y="351.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::_Bind (1 samples, 0.01%)</title><rect x="945.2" y="565" width="0.1" height="15.0" fill="rgb(253,226,2)" rx="2" ry="2" />
<text  x="948.21" y="575.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;unsigned int*, unsigned long&gt; (4 samples, 0.04%)</title><rect x="158.2" y="389" width="0.5" height="15.0" fill="rgb(224,141,49)" rx="2" ry="2" />
<text  x="161.16" y="399.5" ></text>
</g>
<g >
<title>Game_Picture::GetData (3 samples, 0.03%)</title><rect x="1100.2" y="725" width="0.3" height="15.0" fill="rgb(223,80,37)" rx="2" ry="2" />
<text  x="1103.16" y="735.5" ></text>
</g>
<g >
<title>Cache::System (7 samples, 0.08%)</title><rect x="1108.9" y="725" width="0.9" height="15.0" fill="rgb(221,134,20)" rx="2" ry="2" />
<text  x="1111.87" y="735.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="176.0" y="533" width="0.1" height="15.0" fill="rgb(232,80,50)" rx="2" ry="2" />
<text  x="178.97" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::base (1 samples, 0.01%)</title><rect x="658.4" y="613" width="0.1" height="15.0" fill="rgb(237,3,3)" rx="2" ry="2" />
<text  x="661.38" y="623.5" ></text>
</g>
<g >
<title>ip_rcv_finish_core.isra.23 (1 samples, 0.01%)</title><rect x="121.8" y="533" width="0.1" height="15.0" fill="rgb(220,182,8)" rx="2" ry="2" />
<text  x="124.76" y="543.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1051.8" y="645" width="0.2" height="15.0" fill="rgb(251,151,45)" rx="2" ry="2" />
<text  x="1054.84" y="655.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.01%)</title><rect x="948.9" y="229" width="0.2" height="15.0" fill="rgb(210,152,21)" rx="2" ry="2" />
<text  x="951.92" y="239.5" ></text>
</g>
<g >
<title>std::any_of&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, Input::UiSource::Update()::{lambda(int)#1}&gt; (13 samples, 0.14%)</title><rect x="478.9" y="773" width="1.7" height="15.0" fill="rgb(229,108,16)" rx="2" ry="2" />
<text  x="481.95" y="783.5" ></text>
</g>
<g >
<title>wp_page_copy (1 samples, 0.01%)</title><rect x="954.3" y="277" width="0.1" height="15.0" fill="rgb(226,126,39)" rx="2" ry="2" />
<text  x="957.31" y="287.5" ></text>
</g>
<g >
<title>u_strToUTF8WithSub_63 (1 samples, 0.01%)</title><rect x="112.1" y="901" width="0.2" height="15.0" fill="rgb(219,229,2)" rx="2" ry="2" />
<text  x="115.15" y="911.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (18 samples, 0.20%)</title><rect x="156.5" y="725" width="2.3" height="15.0" fill="rgb(245,88,15)" rx="2" ry="2" />
<text  x="159.49" y="735.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.25 (71 samples, 0.77%)</title><rect x="61.5" y="693" width="9.1" height="15.0" fill="rgb(210,175,20)" rx="2" ry="2" />
<text  x="64.52" y="703.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1120.8" y="549" width="0.1" height="15.0" fill="rgb(206,222,24)" rx="2" ry="2" />
<text  x="1123.79" y="559.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="828.7" y="613" width="0.1" height="15.0" fill="rgb(234,142,9)" rx="2" ry="2" />
<text  x="831.71" y="623.5" ></text>
</g>
<g >
<title>Scene_Map::AsyncNext&lt;Scene_Map::UpdateStage1(MapUpdateAsyncContext)::{lambda()#2}&gt; (1 samples, 0.01%)</title><rect x="81.9" y="901" width="0.1" height="15.0" fill="rgb(251,37,26)" rx="2" ry="2" />
<text  x="84.90" y="911.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;BaseUi, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (8 samples, 0.09%)</title><rect x="295.8" y="709" width="1.0" height="15.0" fill="rgb(238,26,2)" rx="2" ry="2" />
<text  x="298.80" y="719.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul, 2ul, 3ul&gt; (16 samples, 0.17%)</title><rect x="935.9" y="549" width="2.0" height="15.0" fill="rgb(251,24,9)" rx="2" ry="2" />
<text  x="938.85" y="559.5" ></text>
</g>
<g >
<title>Window_Message::IsNextMessagePossible (2 samples, 0.02%)</title><rect x="1109.8" y="757" width="0.2" height="15.0" fill="rgb(228,28,39)" rx="2" ry="2" />
<text  x="1112.77" y="767.5" ></text>
</g>
<g >
<title>Bitmap::CheckPixels (1 samples, 0.01%)</title><rect x="177.0" y="677" width="0.1" height="15.0" fill="rgb(254,14,8)" rx="2" ry="2" />
<text  x="180.00" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="952.5" y="405" width="0.1" height="15.0" fill="rgb(254,27,44)" rx="2" ry="2" />
<text  x="955.51" y="415.5" ></text>
</g>
<g >
<title>Opacity::IsSplit (1 samples, 0.01%)</title><rect x="277.9" y="709" width="0.1" height="15.0" fill="rgb(218,226,20)" rx="2" ry="2" />
<text  x="280.86" y="719.5" ></text>
</g>
<g >
<title>ip_route_input_slow (1 samples, 0.01%)</title><rect x="121.8" y="485" width="0.1" height="15.0" fill="rgb(233,115,13)" rx="2" ry="2" />
<text  x="124.76" y="495.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandErasePicture (19 samples, 0.21%)</title><rect x="925.0" y="677" width="2.4" height="15.0" fill="rgb(226,4,43)" rx="2" ry="2" />
<text  x="927.96" y="687.5" ></text>
</g>
<g >
<title>std::max&lt;int&gt; (2 samples, 0.02%)</title><rect x="934.3" y="661" width="0.3" height="15.0" fill="rgb(247,159,11)" rx="2" ry="2" />
<text  x="937.31" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::size (33 samples, 0.36%)</title><rect x="842.8" y="661" width="4.2" height="15.0" fill="rgb(224,96,8)" rx="2" ry="2" />
<text  x="845.81" y="671.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandControlVariables (409 samples, 4.44%)</title><rect x="848.6" y="677" width="52.4" height="15.0" fill="rgb(217,207,6)" rx="2" ry="2" />
<text  x="851.57" y="687.5" >Game_..</text>
</g>
<g >
<title>[libxcb.so.1.1.0] (5 samples, 0.05%)</title><rect x="1127.1" y="661" width="0.6" height="15.0" fill="rgb(228,76,22)" rx="2" ry="2" />
<text  x="1130.07" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_create_storage (1 samples, 0.01%)</title><rect x="177.3" y="517" width="0.1" height="15.0" fill="rgb(214,167,10)" rx="2" ry="2" />
<text  x="180.25" y="527.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, FileRequestAsync, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::find (6 samples, 0.07%)</title><rect x="941.9" y="613" width="0.7" height="15.0" fill="rgb(221,53,31)" rx="2" ry="2" />
<text  x="944.88" y="623.5" ></text>
</g>
<g >
<title>Graphics::Update (5 samples, 0.05%)</title><rect x="477.7" y="805" width="0.6" height="15.0" fill="rgb(241,19,4)" rx="2" ry="2" />
<text  x="480.67" y="815.5" ></text>
</g>
<g >
<title>Game_System::OnSeReady (16 samples, 0.17%)</title><rect x="935.9" y="501" width="2.0" height="15.0" fill="rgb(219,61,21)" rx="2" ry="2" />
<text  x="938.85" y="511.5" ></text>
</g>
<g >
<title>Rect::GetSubRect (2 samples, 0.02%)</title><rect x="182.0" y="741" width="0.3" height="15.0" fill="rgb(253,120,28)" rx="2" ry="2" />
<text  x="185.00" y="751.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="229.7" y="357" width="0.1" height="15.0" fill="rgb(237,182,50)" rx="2" ry="2" />
<text  x="232.67" y="367.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="952.3" y="341" width="0.1" height="15.0" fill="rgb(218,206,13)" rx="2" ry="2" />
<text  x="955.26" y="351.5" ></text>
</g>
<g >
<title>Sprite::Sprite (3 samples, 0.03%)</title><rect x="953.3" y="421" width="0.4" height="15.0" fill="rgb(226,222,51)" rx="2" ry="2" />
<text  x="956.28" y="431.5" ></text>
</g>
<g >
<title>pixman_image_get_height (1 samples, 0.01%)</title><rect x="228.8" y="693" width="0.1" height="15.0" fill="rgb(210,38,28)" rx="2" ry="2" />
<text  x="231.77" y="703.5" ></text>
</g>
<g >
<title>__GI___xstat (1 samples, 0.01%)</title><rect x="160.7" y="517" width="0.1" height="15.0" fill="rgb(254,86,28)" rx="2" ry="2" />
<text  x="163.72" y="527.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (6 samples, 0.07%)</title><rect x="155.7" y="821" width="0.8" height="15.0" fill="rgb(213,118,32)" rx="2" ry="2" />
<text  x="158.72" y="831.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="477.3" y="725" width="0.1" height="15.0" fill="rgb(251,131,45)" rx="2" ry="2" />
<text  x="480.28" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (2 samples, 0.02%)</title><rect x="1061.8" y="693" width="0.3" height="15.0" fill="rgb(233,117,4)" rx="2" ry="2" />
<text  x="1064.84" y="703.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (1 samples, 0.01%)</title><rect x="165.7" y="165" width="0.1" height="15.0" fill="rgb(220,67,23)" rx="2" ry="2" />
<text  x="168.72" y="175.5" ></text>
</g>
<g >
<title>Cache::Picture (32 samples, 0.35%)</title><rect x="947.8" y="421" width="4.1" height="15.0" fill="rgb(232,113,37)" rx="2" ry="2" />
<text  x="950.77" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::find (2 samples, 0.02%)</title><rect x="1110.2" y="645" width="0.2" height="15.0" fill="rgb(249,148,31)" rx="2" ry="2" />
<text  x="1113.15" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.01%)</title><rect x="958.0" y="549" width="0.2" height="15.0" fill="rgb(247,0,40)" rx="2" ry="2" />
<text  x="961.02" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="176.4" y="901" width="0.1" height="15.0" fill="rgb(238,229,54)" rx="2" ry="2" />
<text  x="179.36" y="911.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandKeyInputProc (25 samples, 0.27%)</title><rect x="927.4" y="677" width="3.2" height="15.0" fill="rgb(254,130,32)" rx="2" ry="2" />
<text  x="930.39" y="687.5" ></text>
</g>
<g >
<title>SdlMixerAudio::SE_Play (1 samples, 0.01%)</title><rect x="159.6" y="677" width="0.1" height="15.0" fill="rgb(221,24,10)" rx="2" ry="2" />
<text  x="162.57" y="687.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="806.4" y="533" width="0.1" height="15.0" fill="rgb(207,125,16)" rx="2" ry="2" />
<text  x="809.41" y="543.5" ></text>
</g>
<g >
<title>__interceptor_recvmsg (1 samples, 0.01%)</title><rect x="1120.8" y="565" width="0.1" height="15.0" fill="rgb(226,138,50)" rx="2" ry="2" />
<text  x="1123.79" y="575.5" ></text>
</g>
<g >
<title>Sprite::Flash (1 samples, 0.01%)</title><rect x="1103.2" y="709" width="0.2" height="15.0" fill="rgb(254,95,23)" rx="2" ry="2" />
<text  x="1106.23" y="719.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.01%)</title><rect x="175.8" y="277" width="0.2" height="15.0" fill="rgb(230,207,50)" rx="2" ry="2" />
<text  x="178.84" y="287.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.01%)</title><rect x="1004.9" y="549" width="0.2" height="15.0" fill="rgb(216,218,6)" rx="2" ry="2" />
<text  x="1007.93" y="559.5" ></text>
</g>
<g >
<title>Sdl2Ui::ProcessActiveEvent (62 samples, 0.67%)</title><rect x="1118.7" y="773" width="8.0" height="15.0" fill="rgb(238,113,23)" rx="2" ry="2" />
<text  x="1121.74" y="783.5" ></text>
</g>
<g >
<title>std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;::operator() (1 samples, 0.01%)</title><rect x="1109.5" y="677" width="0.1" height="15.0" fill="rgb(233,89,4)" rx="2" ry="2" />
<text  x="1112.51" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.01%)</title><rect x="1111.6" y="645" width="0.1" height="15.0" fill="rgb(227,43,23)" rx="2" ry="2" />
<text  x="1114.56" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;short&gt;::_Rb_tree_iterator (1 samples, 0.01%)</title><rect x="315.2" y="693" width="0.1" height="15.0" fill="rgb(229,186,52)" rx="2" ry="2" />
<text  x="318.16" y="703.5" ></text>
</g>
<g >
<title>update_blocked_averages (2 samples, 0.02%)</title><rect x="762.3" y="565" width="0.3" height="15.0" fill="rgb(206,187,9)" rx="2" ry="2" />
<text  x="765.32" y="575.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (3 samples, 0.03%)</title><rect x="762.2" y="629" width="0.4" height="15.0" fill="rgb(210,53,49)" rx="2" ry="2" />
<text  x="765.19" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="949.8" y="405" width="0.2" height="15.0" fill="rgb(244,148,21)" rx="2" ry="2" />
<text  x="952.82" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_M_end (5 samples, 0.05%)</title><rect x="311.2" y="709" width="0.6" height="15.0" fill="rgb(216,100,16)" rx="2" ry="2" />
<text  x="314.18" y="719.5" ></text>
</g>
<g >
<title>Bitmap::GetTransparent (1 samples, 0.01%)</title><rect x="264.8" y="693" width="0.1" height="15.0" fill="rgb(251,140,18)" rx="2" ry="2" />
<text  x="267.79" y="703.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (18 samples, 0.20%)</title><rect x="156.5" y="709" width="2.3" height="15.0" fill="rgb(234,26,3)" rx="2" ry="2" />
<text  x="159.49" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;*, std::vector&lt;std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="89.6" y="901" width="0.1" height="15.0" fill="rgb(224,229,34)" rx="2" ry="2" />
<text  x="92.59" y="911.5" ></text>
</g>
<g >
<title>finish_td (1 samples, 0.01%)</title><rect x="70.7" y="597" width="0.2" height="15.0" fill="rgb(227,79,7)" rx="2" ry="2" />
<text  x="73.75" y="607.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_destroy (8 samples, 0.09%)</title><rect x="945.3" y="565" width="1.1" height="15.0" fill="rgb(235,50,13)" rx="2" ry="2" />
<text  x="948.34" y="575.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.01%)</title><rect x="165.6" y="197" width="0.1" height="15.0" fill="rgb(235,49,1)" rx="2" ry="2" />
<text  x="168.59" y="207.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt;::_M_head (11 samples, 0.12%)</title><rect x="252.6" y="645" width="1.4" height="15.0" fill="rgb(252,74,4)" rx="2" ry="2" />
<text  x="255.61" y="655.5" ></text>
</g>
<g >
<title>Sprite::BlitScreen (391 samples, 4.25%)</title><rect x="181.6" y="757" width="50.1" height="15.0" fill="rgb(231,226,29)" rx="2" ry="2" />
<text  x="184.61" y="767.5" >Sprit..</text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;Drawable*&gt; (1 samples, 0.01%)</title><rect x="328.2" y="629" width="0.2" height="15.0" fill="rgb(226,76,49)" rx="2" ry="2" />
<text  x="331.23" y="639.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (1 samples, 0.01%)</title><rect x="73.6" y="805" width="0.1" height="15.0" fill="rgb(244,16,49)" rx="2" ry="2" />
<text  x="76.57" y="815.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (4 samples, 0.04%)</title><rect x="160.0" y="485" width="0.5" height="15.0" fill="rgb(230,204,35)" rx="2" ry="2" />
<text  x="162.95" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="90.5" y="901" width="0.1" height="15.0" fill="rgb(217,123,47)" rx="2" ry="2" />
<text  x="93.49" y="911.5" ></text>
</g>
<g >
<title>[unknown] (/tmp/.glmQJ4QP (241 samples, 2.62%)</title><rect x="124.1" y="917" width="30.9" height="15.0" fill="rgb(236,229,42)" rx="2" ry="2" />
<text  x="127.07" y="927.5" >[u..</text>
</g>
<g >
<title>__GI___libc_write (1 samples, 0.01%)</title><rect x="935.9" y="309" width="0.1" height="15.0" fill="rgb(225,219,15)" rx="2" ry="2" />
<text  x="938.85" y="319.5" ></text>
</g>
<g >
<title>pixman_transform_point_31_16_3d (1 samples, 0.01%)</title><rect x="190.6" y="645" width="0.1" height="15.0" fill="rgb(232,149,31)" rx="2" ry="2" />
<text  x="193.58" y="655.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="122.0" y="869" width="0.4" height="15.0" fill="rgb(232,114,40)" rx="2" ry="2" />
<text  x="125.01" y="879.5" ></text>
</g>
<g >
<title>pixman_image_composite32 (45 samples, 0.49%)</title><rect x="183.5" y="693" width="5.8" height="15.0" fill="rgb(207,119,41)" rx="2" ry="2" />
<text  x="186.53" y="703.5" ></text>
</g>
<g >
<title>__gconv_open (1 samples, 0.01%)</title><rect x="477.8" y="709" width="0.1" height="15.0" fill="rgb(248,15,24)" rx="2" ry="2" />
<text  x="480.80" y="719.5" ></text>
</g>
<g >
<title>account_process_tick (1 samples, 0.01%)</title><rect x="548.7" y="565" width="0.1" height="15.0" fill="rgb(252,66,28)" rx="2" ry="2" />
<text  x="551.67" y="575.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (16 samples, 0.17%)</title><rect x="1126.7" y="773" width="2.0" height="15.0" fill="rgb(240,71,51)" rx="2" ry="2" />
<text  x="1129.69" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (1 samples, 0.01%)</title><rect x="1005.8" y="645" width="0.2" height="15.0" fill="rgb(245,115,11)" rx="2" ry="2" />
<text  x="1008.83" y="655.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.08%)</title><rect x="945.5" y="549" width="0.9" height="15.0" fill="rgb(227,226,27)" rx="2" ry="2" />
<text  x="948.46" y="559.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (2 samples, 0.02%)</title><rect x="166.6" y="853" width="0.3" height="15.0" fill="rgb(249,60,30)" rx="2" ry="2" />
<text  x="169.62" y="863.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1128.5" y="693" width="0.2" height="15.0" fill="rgb(237,101,25)" rx="2" ry="2" />
<text  x="1131.48" y="703.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.01%)</title><rect x="948.9" y="277" width="0.2" height="15.0" fill="rgb(228,128,24)" rx="2" ry="2" />
<text  x="951.92" y="287.5" ></text>
</g>
<g >
<title>WriteLog (1 samples, 0.01%)</title><rect x="160.7" y="597" width="0.1" height="15.0" fill="rgb(250,180,0)" rx="2" ry="2" />
<text  x="163.72" y="607.5" ></text>
</g>
<g >
<title>std::replace&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, char&gt; (6 samples, 0.07%)</title><rect x="948.3" y="373" width="0.8" height="15.0" fill="rgb(231,218,35)" rx="2" ry="2" />
<text  x="951.28" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__val_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; (1 samples, 0.01%)</title><rect x="326.1" y="677" width="0.1" height="15.0" fill="rgb(240,195,33)" rx="2" ry="2" />
<text  x="329.05" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::get (1 samples, 0.01%)</title><rect x="952.5" y="389" width="0.1" height="15.0" fill="rgb(246,22,7)" rx="2" ry="2" />
<text  x="955.51" y="399.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (4 samples, 0.04%)</title><rect x="944.3" y="549" width="0.5" height="15.0" fill="rgb(223,1,11)" rx="2" ry="2" />
<text  x="947.31" y="559.5" ></text>
</g>
<g >
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.01%)</title><rect x="168.8" y="533" width="0.1" height="15.0" fill="rgb(205,69,47)" rx="2" ry="2" />
<text  x="171.79" y="543.5" ></text>
</g>
<g >
<title>try_to_wake_up (7 samples, 0.08%)</title><rect x="72.0" y="741" width="0.9" height="15.0" fill="rgb(253,43,19)" rx="2" ry="2" />
<text  x="75.03" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="117.7" y="901" width="0.1" height="15.0" fill="rgb(245,89,17)" rx="2" ry="2" />
<text  x="120.66" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="1110.8" y="629" width="0.1" height="15.0" fill="rgb(214,25,4)" rx="2" ry="2" />
<text  x="1113.80" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Window_NumberInput, std::default_delete&lt;Window_NumberInput&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="1112.2" y="725" width="0.1" height="15.0" fill="rgb(234,227,45)" rx="2" ry="2" />
<text  x="1115.20" y="735.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="158.5" y="245" width="0.2" height="15.0" fill="rgb(236,90,37)" rx="2" ry="2" />
<text  x="161.54" y="255.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="561.9" y="613" width="0.1" height="15.0" fill="rgb(253,112,4)" rx="2" ry="2" />
<text  x="564.87" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (32 samples, 0.35%)</title><rect x="605.3" y="661" width="4.1" height="15.0" fill="rgb(224,53,51)" rx="2" ry="2" />
<text  x="608.32" y="671.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, Sprite*, std::default_delete&lt;Sprite&gt; &gt; (1 samples, 0.01%)</title><rect x="1104.8" y="661" width="0.1" height="15.0" fill="rgb(217,101,22)" rx="2" ry="2" />
<text  x="1107.77" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="475.2" y="533" width="0.2" height="15.0" fill="rgb(209,105,7)" rx="2" ry="2" />
<text  x="478.23" y="543.5" ></text>
</g>
<g >
<title>Game_Interpreter::SkipTo (1,306 samples, 14.18%)</title><rect x="661.7" y="661" width="167.4" height="15.0" fill="rgb(225,109,44)" rx="2" ry="2" />
<text  x="664.71" y="671.5" >Game_Interpreter::Ski..</text>
</g>
<g >
<title>pixman_transform_point (2 samples, 0.02%)</title><rect x="190.3" y="645" width="0.3" height="15.0" fill="rgb(218,40,36)" rx="2" ry="2" />
<text  x="193.33" y="655.5" ></text>
</g>
<g >
<title>Game_System::OnSeReady (2 samples, 0.02%)</title><rect x="159.7" y="629" width="0.3" height="15.0" fill="rgb(205,186,46)" rx="2" ry="2" />
<text  x="162.69" y="639.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="582.5" y="613" width="0.1" height="15.0" fill="rgb(216,107,2)" rx="2" ry="2" />
<text  x="585.51" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;int, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (6 samples, 0.07%)</title><rect x="958.0" y="597" width="0.8" height="15.0" fill="rgb(210,104,17)" rx="2" ry="2" />
<text  x="961.02" y="607.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (2 samples, 0.02%)</title><rect x="159.7" y="773" width="0.3" height="15.0" fill="rgb(254,189,24)" rx="2" ry="2" />
<text  x="162.69" y="783.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;::_Tuple_impl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, void&gt; (1 samples, 0.01%)</title><rect x="951.6" y="389" width="0.1" height="15.0" fill="rgb(220,79,5)" rx="2" ry="2" />
<text  x="954.62" y="399.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (5 samples, 0.05%)</title><rect x="169.2" y="549" width="0.6" height="15.0" fill="rgb(223,161,30)" rx="2" ry="2" />
<text  x="172.18" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_M_create_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.01%)</title><rect x="942.6" y="581" width="0.2" height="15.0" fill="rgb(215,226,28)" rx="2" ry="2" />
<text  x="945.64" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (12 samples, 0.13%)</title><rect x="527.8" y="677" width="1.5" height="15.0" fill="rgb(245,173,48)" rx="2" ry="2" />
<text  x="530.78" y="687.5" ></text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, 36ul&gt; (11 samples, 0.12%)</title><rect x="481.4" y="789" width="1.4" height="15.0" fill="rgb(213,128,12)" rx="2" ry="2" />
<text  x="484.38" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator* (5 samples, 0.05%)</title><rect x="517.1" y="693" width="0.7" height="15.0" fill="rgb(214,67,3)" rx="2" ry="2" />
<text  x="520.14" y="703.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="892.0" y="597" width="0.1" height="15.0" fill="rgb(207,55,27)" rx="2" ry="2" />
<text  x="895.02" y="607.5" ></text>
</g>
<g >
<title>update_rt_rq_load_avg (1 samples, 0.01%)</title><rect x="259.4" y="629" width="0.1" height="15.0" fill="rgb(225,184,31)" rx="2" ry="2" />
<text  x="262.41" y="639.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1148.7" y="773" width="0.2" height="15.0" fill="rgb(229,2,30)" rx="2" ry="2" />
<text  x="1151.73" y="783.5" ></text>
</g>
<g >
<title>ImageBMP::ReadBMP (11 samples, 0.12%)</title><rect x="163.9" y="389" width="1.4" height="15.0" fill="rgb(254,146,19)" rx="2" ry="2" />
<text  x="166.92" y="399.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="229.7" y="437" width="0.1" height="15.0" fill="rgb(221,222,47)" rx="2" ry="2" />
<text  x="232.67" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt;, std::allocator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; &gt; &gt;::empty (44 samples, 0.48%)</title><rect x="287.7" y="709" width="5.7" height="15.0" fill="rgb(221,165,35)" rx="2" ry="2" />
<text  x="290.73" y="719.5" ></text>
</g>
<g >
<title>Game_Interpreter_Map::ExecuteCommand (5 samples, 0.05%)</title><rect x="78.4" y="901" width="0.7" height="15.0" fill="rgb(240,88,45)" rx="2" ry="2" />
<text  x="81.44" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::find (6 samples, 0.07%)</title><rect x="941.9" y="597" width="0.7" height="15.0" fill="rgb(249,130,22)" rx="2" ry="2" />
<text  x="944.88" y="607.5" ></text>
</g>
<g >
<title>[libspeexdsp.so.1.5.0] (1 samples, 0.01%)</title><rect x="161.0" y="501" width="0.1" height="15.0" fill="rgb(247,47,0)" rx="2" ry="2" />
<text  x="163.98" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (26 samples, 0.28%)</title><rect x="1024.0" y="645" width="3.4" height="15.0" fill="rgb(241,36,29)" rx="2" ry="2" />
<text  x="1027.03" y="655.5" ></text>
</g>
<g >
<title>all (9,207 samples, 100%)</title><rect x="10.0" y="949" width="1180.0" height="15.0" fill="rgb(241,221,28)" rx="2" ry="2" />
<text  x="13.00" y="959.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt; (1 samples, 0.01%)</title><rect x="323.2" y="709" width="0.2" height="15.0" fill="rgb(230,177,31)" rx="2" ry="2" />
<text  x="326.23" y="719.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1051.7" y="549" width="0.1" height="15.0" fill="rgb(219,119,52)" rx="2" ry="2" />
<text  x="1054.71" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="155.5" y="597" width="0.2" height="15.0" fill="rgb(209,126,2)" rx="2" ry="2" />
<text  x="158.47" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::_M_ptr (2 samples, 0.02%)</title><rect x="952.6" y="373" width="0.3" height="15.0" fill="rgb(205,61,36)" rx="2" ry="2" />
<text  x="955.64" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.01%)</title><rect x="951.7" y="341" width="0.2" height="15.0" fill="rgb(248,226,3)" rx="2" ry="2" />
<text  x="954.74" y="351.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_clone (5 samples, 0.05%)</title><rect x="944.2" y="581" width="0.6" height="15.0" fill="rgb(208,24,22)" rx="2" ry="2" />
<text  x="947.18" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;AudioSeData, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (5 samples, 0.05%)</title><rect x="936.4" y="437" width="0.6" height="15.0" fill="rgb(250,123,42)" rx="2" ry="2" />
<text  x="939.36" y="447.5" ></text>
</g>
<g >
<title>usb_get_current_frame_number (1 samples, 0.01%)</title><rect x="998.5" y="341" width="0.2" height="15.0" fill="rgb(215,118,25)" rx="2" ry="2" />
<text  x="1001.52" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (1 samples, 0.01%)</title><rect x="954.4" y="389" width="0.2" height="15.0" fill="rgb(253,180,31)" rx="2" ry="2" />
<text  x="957.44" y="399.5" ></text>
</g>
<g >
<title>snd_usb_pcm_delay.part.14 (1 samples, 0.01%)</title><rect x="70.7" y="485" width="0.2" height="15.0" fill="rgb(251,188,43)" rx="2" ry="2" />
<text  x="73.75" y="495.5" ></text>
</g>
<g >
<title>std::replace&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, char&gt; (1 samples, 0.01%)</title><rect x="165.3" y="517" width="0.2" height="15.0" fill="rgb(232,203,32)" rx="2" ry="2" />
<text  x="168.33" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_addr (1 samples, 0.01%)</title><rect x="1156.9" y="741" width="0.2" height="15.0" fill="rgb(214,185,39)" rx="2" ry="2" />
<text  x="1159.93" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="327.5" y="645" width="0.1" height="15.0" fill="rgb(212,202,52)" rx="2" ry="2" />
<text  x="330.46" y="655.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="160.8" y="581" width="0.2" height="15.0" fill="rgb(231,65,9)" rx="2" ry="2" />
<text  x="163.85" y="591.5" ></text>
</g>
<g >
<title>Tilemap::SetOx (2 samples, 0.02%)</title><rect x="1108.5" y="757" width="0.2" height="15.0" fill="rgb(230,140,4)" rx="2" ry="2" />
<text  x="1111.49" y="767.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (8 samples, 0.09%)</title><rect x="939.7" y="597" width="1.0" height="15.0" fill="rgb(225,201,23)" rx="2" ry="2" />
<text  x="942.70" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="155.5" y="517" width="0.2" height="15.0" fill="rgb(238,212,14)" rx="2" ry="2" />
<text  x="158.47" y="527.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (1 samples, 0.01%)</title><rect x="159.6" y="805" width="0.1" height="15.0" fill="rgb(225,141,29)" rx="2" ry="2" />
<text  x="162.57" y="815.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (6 samples, 0.07%)</title><rect x="155.7" y="853" width="0.8" height="15.0" fill="rgb(233,158,35)" rx="2" ry="2" />
<text  x="158.72" y="863.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (7 samples, 0.08%)</title><rect x="945.5" y="533" width="0.9" height="15.0" fill="rgb(212,144,46)" rx="2" ry="2" />
<text  x="948.46" y="543.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (1 samples, 0.01%)</title><rect x="72.9" y="789" width="0.2" height="15.0" fill="rgb(216,80,54)" rx="2" ry="2" />
<text  x="75.93" y="799.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="167.0" y="437" width="0.1" height="15.0" fill="rgb(249,48,32)" rx="2" ry="2" />
<text  x="170.00" y="447.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="942.6" y="469" width="0.2" height="15.0" fill="rgb(230,186,51)" rx="2" ry="2" />
<text  x="945.64" y="479.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandShowPicture (3 samples, 0.03%)</title><rect x="159.2" y="853" width="0.4" height="15.0" fill="rgb(221,6,26)" rx="2" ry="2" />
<text  x="162.18" y="863.5" ></text>
</g>
<g >
<title>memmove (1 samples, 0.01%)</title><rect x="1127.1" y="629" width="0.1" height="15.0" fill="rgb(217,69,22)" rx="2" ry="2" />
<text  x="1130.07" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;short, std::allocator&lt;short&gt; &gt;::size (1 samples, 0.01%)</title><rect x="962.3" y="645" width="0.1" height="15.0" fill="rgb(226,21,53)" rx="2" ry="2" />
<text  x="965.25" y="655.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (2 samples, 0.02%)</title><rect x="1129.0" y="677" width="0.3" height="15.0" fill="rgb(216,197,7)" rx="2" ry="2" />
<text  x="1131.99" y="687.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (17 samples, 0.18%)</title><rect x="156.5" y="597" width="2.2" height="15.0" fill="rgb(212,187,46)" rx="2" ry="2" />
<text  x="159.49" y="607.5" ></text>
</g>
<g >
<title>[libX11.so.6.3.0] (2 samples, 0.02%)</title><rect x="1118.9" y="693" width="0.2" height="15.0" fill="rgb(215,196,23)" rx="2" ry="2" />
<text  x="1121.87" y="703.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.01%)</title><rect x="942.8" y="485" width="0.1" height="15.0" fill="rgb(211,3,30)" rx="2" ry="2" />
<text  x="945.77" y="495.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (2 samples, 0.02%)</title><rect x="1110.2" y="597" width="0.2" height="15.0" fill="rgb(225,41,38)" rx="2" ry="2" />
<text  x="1113.15" y="607.5" ></text>
</g>
<g >
<title>sock_recvmsg (1 samples, 0.01%)</title><rect x="1120.3" y="517" width="0.1" height="15.0" fill="rgb(246,179,48)" rx="2" ry="2" />
<text  x="1123.28" y="527.5" ></text>
</g>
<g >
<title>TilemapSubLayer::Draw (714 samples, 7.75%)</title><rect x="231.7" y="773" width="91.5" height="15.0" fill="rgb(244,16,37)" rx="2" ry="2" />
<text  x="234.72" y="783.5" >TilemapSub..</text>
</g>
<g >
<title>__wake_up_common_lock (1 samples, 0.01%)</title><rect x="72.9" y="773" width="0.2" height="15.0" fill="rgb(244,21,51)" rx="2" ry="2" />
<text  x="75.93" y="783.5" ></text>
</g>
<g >
<title>dequeue_entity (2 samples, 0.02%)</title><rect x="61.1" y="741" width="0.3" height="15.0" fill="rgb(243,178,8)" rx="2" ry="2" />
<text  x="64.14" y="751.5" ></text>
</g>
<g >
<title>std::move&lt;Drawable**, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="327.3" y="677" width="0.3" height="15.0" fill="rgb(233,192,31)" rx="2" ry="2" />
<text  x="330.33" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;int, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (3 samples, 0.03%)</title><rect x="943.7" y="485" width="0.4" height="15.0" fill="rgb(216,214,37)" rx="2" ry="2" />
<text  x="946.67" y="495.5" ></text>
</g>
<g >
<title>__GI__IO_putc (1 samples, 0.01%)</title><rect x="935.9" y="405" width="0.1" height="15.0" fill="rgb(212,99,34)" rx="2" ry="2" />
<text  x="938.85" y="415.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="943.0" y="453" width="0.2" height="15.0" fill="rgb(220,197,35)" rx="2" ry="2" />
<text  x="946.03" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (4 samples, 0.04%)</title><rect x="165.5" y="533" width="0.5" height="15.0" fill="rgb(253,131,0)" rx="2" ry="2" />
<text  x="168.46" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="951.4" y="277" width="0.1" height="15.0" fill="rgb(217,151,20)" rx="2" ry="2" />
<text  x="954.36" y="287.5" ></text>
</g>
<g >
<title>__update_load_avg_cfs_rq (1 samples, 0.01%)</title><rect x="1119.6" y="341" width="0.2" height="15.0" fill="rgb(238,122,41)" rx="2" ry="2" />
<text  x="1122.64" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::_M_ptr (31 samples, 0.34%)</title><rect x="250.0" y="693" width="4.0" height="15.0" fill="rgb(239,162,31)" rx="2" ry="2" />
<text  x="253.05" y="703.5" ></text>
</g>
<g >
<title>std::fill_n&lt;unsigned int*, unsigned long, unsigned int&gt; (4 samples, 0.04%)</title><rect x="158.2" y="357" width="0.5" height="15.0" fill="rgb(225,54,52)" rx="2" ry="2" />
<text  x="161.16" y="367.5" ></text>
</g>
<g >
<title>Cache::Picture (5 samples, 0.05%)</title><rect x="169.2" y="533" width="0.6" height="15.0" fill="rgb(230,17,29)" rx="2" ry="2" />
<text  x="172.18" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (11 samples, 0.12%)</title><rect x="106.5" y="901" width="1.4" height="15.0" fill="rgb(244,47,40)" rx="2" ry="2" />
<text  x="109.51" y="911.5" ></text>
</g>
<g >
<title>[libX11.so.6.3.0] (1 samples, 0.01%)</title><rect x="1126.9" y="725" width="0.2" height="15.0" fill="rgb(247,203,50)" rx="2" ry="2" />
<text  x="1129.94" y="735.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="324.1" y="709" width="0.2" height="15.0" fill="rgb(209,200,50)" rx="2" ry="2" />
<text  x="327.13" y="719.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Game_Picture*, std::default_delete&lt;Game_Picture&gt; &gt; (1 samples, 0.01%)</title><rect x="934.1" y="597" width="0.1" height="15.0" fill="rgb(231,35,35)" rx="2" ry="2" />
<text  x="937.06" y="607.5" ></text>
</g>
<g >
<title>syscall (7 samples, 0.08%)</title><rect x="122.5" y="901" width="0.9" height="15.0" fill="rgb(226,62,11)" rx="2" ry="2" />
<text  x="125.53" y="911.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (2 samples, 0.02%)</title><rect x="74.0" y="837" width="0.2" height="15.0" fill="rgb(244,222,37)" rx="2" ry="2" />
<text  x="76.95" y="847.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::operator()&lt;FileRequestResult*, void&gt; (13 samples, 0.14%)</title><rect x="167.3" y="661" width="1.6" height="15.0" fill="rgb(251,55,11)" rx="2" ry="2" />
<text  x="170.26" y="671.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.01%)</title><rect x="174.9" y="213" width="0.2" height="15.0" fill="rgb(222,17,11)" rx="2" ry="2" />
<text  x="177.95" y="223.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr (2 samples, 0.02%)</title><rect x="227.6" y="725" width="0.3" height="15.0" fill="rgb(236,16,8)" rx="2" ry="2" />
<text  x="230.62" y="735.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="155.2" y="805" width="0.3" height="15.0" fill="rgb(225,9,15)" rx="2" ry="2" />
<text  x="158.21" y="815.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="286.3" y="661" width="0.4" height="15.0" fill="rgb(210,60,31)" rx="2" ry="2" />
<text  x="289.32" y="671.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (16 samples, 0.17%)</title><rect x="935.9" y="533" width="2.0" height="15.0" fill="rgb(210,208,20)" rx="2" ry="2" />
<text  x="938.85" y="543.5" ></text>
</g>
<g >
<title>native_write_msr (8 samples, 0.09%)</title><rect x="1121.0" y="309" width="1.1" height="15.0" fill="rgb(208,30,31)" rx="2" ry="2" />
<text  x="1124.05" y="319.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (2 samples, 0.02%)</title><rect x="165.7" y="213" width="0.3" height="15.0" fill="rgb(252,61,16)" rx="2" ry="2" />
<text  x="168.72" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt;, std::pair&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt; const, std::weak_ptr&lt;Bitmap&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt; const, std::weak_ptr&lt;Bitmap&gt; &gt; &gt;, std::less&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt; const, std::weak_ptr&lt;Bitmap&gt; &gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="229.8" y="693" width="0.1" height="15.0" fill="rgb(241,63,14)" rx="2" ry="2" />
<text  x="232.80" y="703.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (13 samples, 0.14%)</title><rect x="167.3" y="549" width="1.6" height="15.0" fill="rgb(240,58,14)" rx="2" ry="2" />
<text  x="170.26" y="559.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandPlaySound (1 samples, 0.01%)</title><rect x="159.6" y="869" width="0.1" height="15.0" fill="rgb(236,146,48)" rx="2" ry="2" />
<text  x="162.57" y="879.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="1108.9" y="613" width="0.4" height="15.0" fill="rgb(253,177,16)" rx="2" ry="2" />
<text  x="1111.87" y="623.5" ></text>
</g>
<g >
<title>Drawable::GetPriorityForMapLayer (1 samples, 0.01%)</title><rect x="75.2" y="901" width="0.2" height="15.0" fill="rgb(215,112,29)" rx="2" ry="2" />
<text  x="78.24" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;::get (2 samples, 0.02%)</title><rect x="933.9" y="629" width="0.3" height="15.0" fill="rgb(214,175,5)" rx="2" ry="2" />
<text  x="936.93" y="639.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="161.1" y="389" width="0.1" height="15.0" fill="rgb(244,99,30)" rx="2" ry="2" />
<text  x="164.10" y="399.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.01%)</title><rect x="1111.6" y="613" width="0.1" height="15.0" fill="rgb(209,176,10)" rx="2" ry="2" />
<text  x="1114.56" y="623.5" ></text>
</g>
<g >
<title>__GI___libc_read (6 samples, 0.07%)</title><rect x="155.7" y="453" width="0.8" height="15.0" fill="rgb(239,41,54)" rx="2" ry="2" />
<text  x="158.72" y="463.5" ></text>
</g>
<g >
<title>poll_freewait (1 samples, 0.01%)</title><rect x="1122.1" y="501" width="0.1" height="15.0" fill="rgb(244,220,43)" rx="2" ry="2" />
<text  x="1125.07" y="511.5" ></text>
</g>
<g >
<title>color_tone (2 samples, 0.02%)</title><rect x="229.4" y="693" width="0.3" height="15.0" fill="rgb(214,222,48)" rx="2" ry="2" />
<text  x="232.42" y="703.5" ></text>
</g>
<g >
<title>std::_Base_bitset&lt;1ul&gt;::_S_whichbit (2 samples, 0.02%)</title><rect x="929.4" y="581" width="0.3" height="15.0" fill="rgb(227,109,31)" rx="2" ry="2" />
<text  x="932.44" y="591.5" ></text>
</g>
<g >
<title>__GI___sched_yield (3 samples, 0.03%)</title><rect x="122.0" y="901" width="0.4" height="15.0" fill="rgb(229,183,51)" rx="2" ry="2" />
<text  x="125.01" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="940.0" y="437" width="0.1" height="15.0" fill="rgb(213,57,16)" rx="2" ry="2" />
<text  x="942.95" y="447.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="949.4" y="325" width="0.2" height="15.0" fill="rgb(236,81,14)" rx="2" ry="2" />
<text  x="952.44" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="477.0" y="693" width="0.3" height="15.0" fill="rgb(213,60,20)" rx="2" ry="2" />
<text  x="480.03" y="703.5" ></text>
</g>
<g >
<title>Game_Picture::GetData (1 samples, 0.01%)</title><rect x="925.2" y="645" width="0.1" height="15.0" fill="rgb(230,134,11)" rx="2" ry="2" />
<text  x="928.21" y="655.5" ></text>
</g>
<g >
<title>Rect::Rect (2 samples, 0.02%)</title><rect x="230.6" y="725" width="0.2" height="15.0" fill="rgb(216,111,42)" rx="2" ry="2" />
<text  x="233.57" y="735.5" ></text>
</g>
<g >
<title>Cache::Picture (38 samples, 0.41%)</title><rect x="161.4" y="565" width="4.8" height="15.0" fill="rgb(223,54,27)" rx="2" ry="2" />
<text  x="164.36" y="575.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (13 samples, 0.14%)</title><rect x="120.2" y="901" width="1.7" height="15.0" fill="rgb(207,198,42)" rx="2" ry="2" />
<text  x="123.22" y="911.5" ></text>
</g>
<g >
<title>SdlMixerAudio::Update (4 samples, 0.04%)</title><rect x="1130.8" y="805" width="0.5" height="15.0" fill="rgb(235,45,23)" rx="2" ry="2" />
<text  x="1133.79" y="815.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="548.5" y="613" width="0.2" height="15.0" fill="rgb(248,220,29)" rx="2" ry="2" />
<text  x="551.54" y="623.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="942.6" y="437" width="0.2" height="15.0" fill="rgb(209,153,38)" rx="2" ry="2" />
<text  x="945.64" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (6 samples, 0.07%)</title><rect x="304.0" y="645" width="0.8" height="15.0" fill="rgb(246,17,11)" rx="2" ry="2" />
<text  x="307.01" y="655.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="1189.9" y="885" width="0.1" height="15.0" fill="rgb(215,194,40)" rx="2" ry="2" />
<text  x="1192.87" y="895.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="958.7" y="437" width="0.1" height="15.0" fill="rgb(215,62,8)" rx="2" ry="2" />
<text  x="961.67" y="447.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="59.6" y="805" width="0.1" height="15.0" fill="rgb(238,197,17)" rx="2" ry="2" />
<text  x="62.60" y="815.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="942.8" y="565" width="0.1" height="15.0" fill="rgb(237,163,3)" rx="2" ry="2" />
<text  x="945.77" y="575.5" ></text>
</g>
<g >
<title>path_openat (1 samples, 0.01%)</title><rect x="155.5" y="341" width="0.1" height="15.0" fill="rgb(245,46,19)" rx="2" ry="2" />
<text  x="158.47" y="351.5" ></text>
</g>
<g >
<title>Bitmap::MultiplyAlpha (1 samples, 0.01%)</title><rect x="163.8" y="389" width="0.1" height="15.0" fill="rgb(218,221,53)" rx="2" ry="2" />
<text  x="166.80" y="399.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.8" y="453" width="0.2" height="15.0" fill="rgb(217,139,28)" rx="2" ry="2" />
<text  x="178.84" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::get (2 samples, 0.02%)</title><rect x="952.6" y="389" width="0.3" height="15.0" fill="rgb(240,69,41)" rx="2" ry="2" />
<text  x="955.64" y="399.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1158.9" y="629" width="0.1" height="15.0" fill="rgb(220,77,35)" rx="2" ry="2" />
<text  x="1161.86" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="956.0" y="357" width="0.1" height="15.0" fill="rgb(230,142,11)" rx="2" ry="2" />
<text  x="958.97" y="367.5" ></text>
</g>
<g >
<title>__hrtimer_init (1 samples, 0.01%)</title><rect x="1128.7" y="709" width="0.2" height="15.0" fill="rgb(252,93,38)" rx="2" ry="2" />
<text  x="1131.74" y="719.5" ></text>
</g>
<g >
<title>psi_task_change (5 samples, 0.05%)</title><rect x="72.3" y="693" width="0.6" height="15.0" fill="rgb(225,174,34)" rx="2" ry="2" />
<text  x="75.29" y="703.5" ></text>
</g>
<g >
<title>__gthread_active_p (1 samples, 0.01%)</title><rect x="957.3" y="389" width="0.1" height="15.0" fill="rgb(243,171,1)" rx="2" ry="2" />
<text  x="960.26" y="399.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandPlaySound (2 samples, 0.02%)</title><rect x="159.7" y="805" width="0.3" height="15.0" fill="rgb(238,170,40)" rx="2" ry="2" />
<text  x="162.69" y="815.5" ></text>
</g>
<g >
<title>__slab_free (1 samples, 0.01%)</title><rect x="1127.3" y="421" width="0.2" height="15.0" fill="rgb(242,67,35)" rx="2" ry="2" />
<text  x="1130.33" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (1 samples, 0.01%)</title><rect x="166.7" y="661" width="0.2" height="15.0" fill="rgb(249,102,49)" rx="2" ry="2" />
<text  x="169.74" y="671.5" ></text>
</g>
<g >
<title>__interceptor_recvmsg (4 samples, 0.04%)</title><rect x="1127.2" y="645" width="0.5" height="15.0" fill="rgb(223,213,9)" rx="2" ry="2" />
<text  x="1130.20" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;Drawable**, long&gt;::pair&lt;Drawable**&amp;, long&amp;, true&gt; (1 samples, 0.01%)</title><rect x="324.0" y="709" width="0.1" height="15.0" fill="rgb(233,136,25)" rx="2" ry="2" />
<text  x="327.00" y="719.5" ></text>
</g>
<g >
<title>Cache::SpriteEffect (11 samples, 0.12%)</title><rect x="228.9" y="725" width="1.4" height="15.0" fill="rgb(230,32,27)" rx="2" ry="2" />
<text  x="231.90" y="735.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (2 samples, 0.02%)</title><rect x="174.6" y="901" width="0.2" height="15.0" fill="rgb(211,77,22)" rx="2" ry="2" />
<text  x="177.56" y="911.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="1100.4" y="693" width="0.1" height="15.0" fill="rgb(248,0,51)" rx="2" ry="2" />
<text  x="1103.41" y="703.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.01%)</title><rect x="940.0" y="421" width="0.1" height="15.0" fill="rgb(211,76,48)" rx="2" ry="2" />
<text  x="942.95" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Game_Event**, std::vector&lt;Game_Event*, std::allocator&lt;Game_Event*&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="1099.3" y="725" width="0.1" height="15.0" fill="rgb(234,2,39)" rx="2" ry="2" />
<text  x="1102.26" y="735.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="323.7" y="645" width="0.3" height="15.0" fill="rgb(242,188,6)" rx="2" ry="2" />
<text  x="326.74" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="175.8" y="645" width="0.3" height="15.0" fill="rgb(228,170,37)" rx="2" ry="2" />
<text  x="178.84" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append@plt (1 samples, 0.01%)</title><rect x="940.6" y="581" width="0.1" height="15.0" fill="rgb(205,212,32)" rx="2" ry="2" />
<text  x="943.59" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (164 samples, 1.78%)</title><rect x="1013.0" y="677" width="21.0" height="15.0" fill="rgb(226,71,4)" rx="2" ry="2" />
<text  x="1016.01" y="687.5" ></text>
</g>
<g >
<title>__x64_sys_write (11 samples, 0.12%)</title><rect x="71.8" y="885" width="1.4" height="15.0" fill="rgb(216,14,54)" rx="2" ry="2" />
<text  x="74.77" y="895.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (6 samples, 0.07%)</title><rect x="160.0" y="725" width="0.7" height="15.0" fill="rgb(216,180,42)" rx="2" ry="2" />
<text  x="162.95" y="735.5" ></text>
</g>
<g >
<title>__x64_sys_close (1 samples, 0.01%)</title><rect x="160.2" y="277" width="0.1" height="15.0" fill="rgb(245,195,50)" rx="2" ry="2" />
<text  x="163.21" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.01%)</title><rect x="103.0" y="901" width="0.2" height="15.0" fill="rgb(231,105,22)" rx="2" ry="2" />
<text  x="106.05" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (1 samples, 0.01%)</title><rect x="177.4" y="901" width="0.1" height="15.0" fill="rgb(220,112,12)" rx="2" ry="2" />
<text  x="180.38" y="911.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, RPG::Map*, false&gt;::_M_head (2 samples, 0.02%)</title><rect x="245.9" y="629" width="0.3" height="15.0" fill="rgb(245,45,5)" rx="2" ry="2" />
<text  x="248.95" y="639.5" ></text>
</g>
<g >
<title>Opacity::IsSplit (2 samples, 0.02%)</title><rect x="183.3" y="677" width="0.2" height="15.0" fill="rgb(229,151,15)" rx="2" ry="2" />
<text  x="186.28" y="687.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="174.8" y="517" width="0.3" height="15.0" fill="rgb(205,87,8)" rx="2" ry="2" />
<text  x="177.82" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="652.1" y="629" width="0.1" height="15.0" fill="rgb(249,171,50)" rx="2" ry="2" />
<text  x="655.10" y="639.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="1158.9" y="597" width="0.1" height="15.0" fill="rgb(208,48,38)" rx="2" ry="2" />
<text  x="1161.86" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (2 samples, 0.02%)</title><rect x="161.1" y="581" width="0.3" height="15.0" fill="rgb(233,71,49)" rx="2" ry="2" />
<text  x="164.10" y="591.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (1 samples, 0.01%)</title><rect x="169.1" y="709" width="0.1" height="15.0" fill="rgb(249,128,44)" rx="2" ry="2" />
<text  x="172.05" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; const*, std::vector&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt;, std::allocator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; &gt; &gt; &gt;::__normal_iterator (7 samples, 0.08%)</title><rect x="290.9" y="677" width="0.9" height="15.0" fill="rgb(231,33,27)" rx="2" ry="2" />
<text  x="293.93" y="687.5" ></text>
</g>
<g >
<title>native_apic_msr_eoi_write (1 samples, 0.01%)</title><rect x="59.6" y="757" width="0.1" height="15.0" fill="rgb(228,171,40)" rx="2" ry="2" />
<text  x="62.60" y="767.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (23 samples, 0.25%)</title><rect x="1123.4" y="581" width="2.9" height="15.0" fill="rgb(250,82,39)" rx="2" ry="2" />
<text  x="1126.36" y="591.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (48 samples, 0.52%)</title><rect x="469.3" y="661" width="6.2" height="15.0" fill="rgb(240,4,40)" rx="2" ry="2" />
<text  x="472.34" y="671.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.01%)</title><rect x="1110.2" y="565" width="0.1" height="15.0" fill="rgb(252,186,29)" rx="2" ry="2" />
<text  x="1113.15" y="575.5" ></text>
</g>
<g >
<title>Scene::MainFunction (2 samples, 0.02%)</title><rect x="174.8" y="837" width="0.3" height="15.0" fill="rgb(218,61,15)" rx="2" ry="2" />
<text  x="177.82" y="847.5" ></text>
</g>
<g >
<title>_IO_new_fopen (1 samples, 0.01%)</title><rect x="166.5" y="469" width="0.1" height="15.0" fill="rgb(239,197,45)" rx="2" ry="2" />
<text  x="169.49" y="479.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="229.7" y="613" width="0.1" height="15.0" fill="rgb(227,165,9)" rx="2" ry="2" />
<text  x="232.67" y="623.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (6 samples, 0.07%)</title><rect x="155.7" y="517" width="0.8" height="15.0" fill="rgb(245,222,40)" rx="2" ry="2" />
<text  x="158.72" y="527.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.01%)</title><rect x="998.5" y="405" width="0.2" height="15.0" fill="rgb(242,69,0)" rx="2" ry="2" />
<text  x="1001.52" y="415.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.25 (7 samples, 0.08%)</title><rect x="1129.4" y="565" width="0.9" height="15.0" fill="rgb(237,18,33)" rx="2" ry="2" />
<text  x="1132.38" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator++ (1 samples, 0.01%)</title><rect x="482.9" y="757" width="0.2" height="15.0" fill="rgb(238,45,49)" rx="2" ry="2" />
<text  x="485.92" y="767.5" ></text>
</g>
<g >
<title>std::copy&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*&gt; (1 samples, 0.01%)</title><rect x="159.6" y="549" width="0.1" height="15.0" fill="rgb(235,87,42)" rx="2" ry="2" />
<text  x="162.57" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_recvmsg (4 samples, 0.04%)</title><rect x="1127.2" y="565" width="0.5" height="15.0" fill="rgb(241,171,26)" rx="2" ry="2" />
<text  x="1130.20" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_weak_release (1 samples, 0.01%)</title><rect x="957.3" y="421" width="0.1" height="15.0" fill="rgb(207,18,40)" rx="2" ry="2" />
<text  x="960.26" y="431.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="892.0" y="565" width="0.1" height="15.0" fill="rgb(247,29,37)" rx="2" ry="2" />
<text  x="895.02" y="575.5" ></text>
</g>
<g >
<title>std::__merge_sort_loop&lt;Drawable**, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (8 samples, 0.09%)</title><rect x="326.7" y="709" width="1.0" height="15.0" fill="rgb(250,43,52)" rx="2" ry="2" />
<text  x="329.69" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (1 samples, 0.01%)</title><rect x="928.7" y="629" width="0.1" height="15.0" fill="rgb(254,200,7)" rx="2" ry="2" />
<text  x="931.67" y="639.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="948.9" y="309" width="0.2" height="15.0" fill="rgb(219,44,36)" rx="2" ry="2" />
<text  x="951.92" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::find (87 samples, 0.94%)</title><rect x="308.6" y="725" width="11.2" height="15.0" fill="rgb(209,195,22)" rx="2" ry="2" />
<text  x="311.62" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::begin (1 samples, 0.01%)</title><rect x="1186.3" y="741" width="0.1" height="15.0" fill="rgb(237,116,38)" rx="2" ry="2" />
<text  x="1189.28" y="751.5" ></text>
</g>
<g >
<title>Transition::IsActive (1 samples, 0.01%)</title><rect x="1188.1" y="773" width="0.1" height="15.0" fill="rgb(244,213,47)" rx="2" ry="2" />
<text  x="1191.08" y="783.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (3 samples, 0.03%)</title><rect x="159.2" y="805" width="0.4" height="15.0" fill="rgb(238,174,24)" rx="2" ry="2" />
<text  x="162.18" y="815.5" ></text>
</g>
<g >
<title>pixman_image_composite32 (87 samples, 0.94%)</title><rect x="265.7" y="709" width="11.1" height="15.0" fill="rgb(225,154,3)" rx="2" ry="2" />
<text  x="268.69" y="719.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (1 samples, 0.01%)</title><rect x="1120.8" y="613" width="0.1" height="15.0" fill="rgb(239,6,14)" rx="2" ry="2" />
<text  x="1123.79" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="168.9" y="597" width="0.2" height="15.0" fill="rgb(209,100,39)" rx="2" ry="2" />
<text  x="171.92" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (17 samples, 0.18%)</title><rect x="156.5" y="565" width="2.2" height="15.0" fill="rgb(235,66,42)" rx="2" ry="2" />
<text  x="159.49" y="575.5" ></text>
</g>
<g >
<title>__sched_text_start (9 samples, 0.10%)</title><rect x="1129.3" y="661" width="1.1" height="15.0" fill="rgb(233,98,27)" rx="2" ry="2" />
<text  x="1132.25" y="671.5" ></text>
</g>
<g >
<title>ktime_get_raw_ts64 (1 samples, 0.01%)</title><rect x="1122.3" y="597" width="0.2" height="15.0" fill="rgb(253,56,44)" rx="2" ry="2" />
<text  x="1125.33" y="607.5" ></text>
</g>
<g >
<title>Scene_Map::Update (14 samples, 0.15%)</title><rect x="167.3" y="901" width="1.8" height="15.0" fill="rgb(207,66,6)" rx="2" ry="2" />
<text  x="170.26" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (19 samples, 0.21%)</title><rect x="1049.3" y="645" width="2.4" height="15.0" fill="rgb(252,181,30)" rx="2" ry="2" />
<text  x="1052.28" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (31 samples, 0.34%)</title><rect x="161.4" y="421" width="3.9" height="15.0" fill="rgb(252,8,30)" rx="2" ry="2" />
<text  x="164.36" y="431.5" ></text>
</g>
<g >
<title>kfree_skbmem (1 samples, 0.01%)</title><rect x="1127.3" y="453" width="0.2" height="15.0" fill="rgb(236,108,45)" rx="2" ry="2" />
<text  x="1130.33" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;short&gt;::_Rb_tree_const_iterator (3 samples, 0.03%)</title><rect x="307.7" y="709" width="0.4" height="15.0" fill="rgb(209,93,37)" rx="2" ry="2" />
<text  x="310.72" y="719.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="83.6" y="901" width="0.2" height="15.0" fill="rgb(236,174,22)" rx="2" ry="2" />
<text  x="86.57" y="911.5" ></text>
</g>
<g >
<title>Game_Variables_Class::Get (93 samples, 1.01%)</title><rect x="864.6" y="661" width="11.9" height="15.0" fill="rgb(236,83,41)" rx="2" ry="2" />
<text  x="867.59" y="671.5" ></text>
</g>
<g >
<title>Game_CommonEvent::Update (8 samples, 0.09%)</title><rect x="159.7" y="869" width="1.0" height="15.0" fill="rgb(253,124,48)" rx="2" ry="2" />
<text  x="162.69" y="879.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (1 samples, 0.01%)</title><rect x="160.1" y="197" width="0.1" height="15.0" fill="rgb(230,50,42)" rx="2" ry="2" />
<text  x="163.08" y="207.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (2 samples, 0.02%)</title><rect x="475.6" y="677" width="0.3" height="15.0" fill="rgb(240,105,16)" rx="2" ry="2" />
<text  x="478.62" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::operator[] (6 samples, 0.07%)</title><rect x="937.0" y="453" width="0.8" height="15.0" fill="rgb(213,216,11)" rx="2" ry="2" />
<text  x="940.01" y="463.5" ></text>
</g>
<g >
<title>Bitmap::Blit (1 samples, 0.01%)</title><rect x="159.3" y="405" width="0.1" height="15.0" fill="rgb(212,119,25)" rx="2" ry="2" />
<text  x="162.31" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator++ (1 samples, 0.01%)</title><rect x="165.3" y="501" width="0.2" height="15.0" fill="rgb(217,157,26)" rx="2" ry="2" />
<text  x="168.33" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.01%)</title><rect x="231.6" y="725" width="0.1" height="15.0" fill="rgb(245,156,25)" rx="2" ry="2" />
<text  x="234.59" y="735.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="189.4" y="581" width="0.2" height="15.0" fill="rgb(216,142,27)" rx="2" ry="2" />
<text  x="192.43" y="591.5" ></text>
</g>
<g >
<title>Cache::SystemOrBlack (5 samples, 0.05%)</title><rect x="1110.0" y="709" width="0.7" height="15.0" fill="rgb(233,115,3)" rx="2" ry="2" />
<text  x="1113.03" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="323.2" y="725" width="0.2" height="15.0" fill="rgb(231,133,26)" rx="2" ry="2" />
<text  x="326.23" y="735.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, Game_Picture*, std::_Placeholder&lt;1&gt; &gt;::_Tuple_impl&lt;Game_Picture*&amp;, std::_Placeholder&lt;1&gt; const&amp;, void&gt; (1 samples, 0.01%)</title><rect x="96.4" y="901" width="0.1" height="15.0" fill="rgb(229,4,29)" rx="2" ry="2" />
<text  x="99.38" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="957.1" y="389" width="0.2" height="15.0" fill="rgb(236,20,53)" rx="2" ry="2" />
<text  x="960.13" y="399.5" ></text>
</g>
<g >
<title>Drawable::IsGlobal (1 samples, 0.01%)</title><rect x="75.4" y="901" width="0.1" height="15.0" fill="rgb(233,115,42)" rx="2" ry="2" />
<text  x="78.36" y="911.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="548.5" y="581" width="0.2" height="15.0" fill="rgb(250,92,41)" rx="2" ry="2" />
<text  x="551.54" y="591.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="167.1" y="357" width="0.2" height="15.0" fill="rgb(221,124,29)" rx="2" ry="2" />
<text  x="170.13" y="367.5" ></text>
</g>
<g >
<title>dequeue_entity (1 samples, 0.01%)</title><rect x="1123.2" y="565" width="0.2" height="15.0" fill="rgb(229,167,2)" rx="2" ry="2" />
<text  x="1126.23" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt;::begin (2 samples, 0.02%)</title><rect x="956.9" y="581" width="0.2" height="15.0" fill="rgb(253,4,12)" rx="2" ry="2" />
<text  x="959.87" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (4 samples, 0.04%)</title><rect x="939.7" y="565" width="0.5" height="15.0" fill="rgb(217,147,51)" rx="2" ry="2" />
<text  x="942.70" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable* const*, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="84.8" y="901" width="0.2" height="15.0" fill="rgb(220,225,31)" rx="2" ry="2" />
<text  x="87.85" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::get_deleter (2 samples, 0.02%)</title><rect x="956.5" y="405" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="959.49" y="415.5" ></text>
</g>
<g >
<title>std::bitset&lt;32ul&gt;::reference::~reference (1 samples, 0.01%)</title><rect x="102.1" y="901" width="0.2" height="15.0" fill="rgb(244,108,50)" rx="2" ry="2" />
<text  x="105.15" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::get (1 samples, 0.01%)</title><rect x="1169.6" y="789" width="0.2" height="15.0" fill="rgb(245,24,22)" rx="2" ry="2" />
<text  x="1172.62" y="799.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="168.9" y="565" width="0.2" height="15.0" fill="rgb(241,48,38)" rx="2" ry="2" />
<text  x="171.92" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::operator bool (2 samples, 0.02%)</title><rect x="1169.8" y="789" width="0.2" height="15.0" fill="rgb(211,67,22)" rx="2" ry="2" />
<text  x="1172.75" y="799.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.6" y="405" width="0.1" height="15.0" fill="rgb(216,87,4)" rx="2" ry="2" />
<text  x="178.59" y="415.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.8" y="469" width="0.2" height="15.0" fill="rgb(219,163,12)" rx="2" ry="2" />
<text  x="178.84" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="175.6" y="517" width="0.1" height="15.0" fill="rgb(213,196,48)" rx="2" ry="2" />
<text  x="178.59" y="527.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="889.8" y="629" width="0.2" height="15.0" fill="rgb(209,59,32)" rx="2" ry="2" />
<text  x="892.84" y="639.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (2 samples, 0.02%)</title><rect x="167.0" y="693" width="0.3" height="15.0" fill="rgb(250,162,23)" rx="2" ry="2" />
<text  x="170.00" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (2 samples, 0.02%)</title><rect x="1062.1" y="693" width="0.2" height="15.0" fill="rgb(216,47,52)" rx="2" ry="2" />
<text  x="1065.09" y="703.5" ></text>
</g>
<g >
<title>std::max&lt;int&gt; (1 samples, 0.01%)</title><rect x="895.6" y="661" width="0.1" height="15.0" fill="rgb(243,218,12)" rx="2" ry="2" />
<text  x="898.61" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (71 samples, 0.77%)</title><rect x="947.6" y="453" width="9.1" height="15.0" fill="rgb(219,121,46)" rx="2" ry="2" />
<text  x="950.64" y="463.5" ></text>
</g>
<g >
<title>std::bitset&lt;32ul&gt;::operator[] (4 samples, 0.04%)</title><rect x="929.2" y="629" width="0.5" height="15.0" fill="rgb(244,80,49)" rx="2" ry="2" />
<text  x="932.19" y="639.5" ></text>
</g>
<g >
<title>Bitmap::Create (2 samples, 0.02%)</title><rect x="175.8" y="741" width="0.3" height="15.0" fill="rgb(214,85,14)" rx="2" ry="2" />
<text  x="178.84" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::end (9 samples, 0.10%)</title><rect x="307.0" y="725" width="1.1" height="15.0" fill="rgb(231,36,22)" rx="2" ry="2" />
<text  x="309.95" y="735.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;Drawable*&gt; (1 samples, 0.01%)</title><rect x="181.2" y="661" width="0.2" height="15.0" fill="rgb(224,222,46)" rx="2" ry="2" />
<text  x="184.23" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_S_right (2 samples, 0.02%)</title><rect x="317.8" y="709" width="0.3" height="15.0" fill="rgb(210,24,20)" rx="2" ry="2" />
<text  x="320.85" y="719.5" ></text>
</g>
<g >
<title>cpuacct_charge (1 samples, 0.01%)</title><rect x="943.0" y="261" width="0.2" height="15.0" fill="rgb(207,222,6)" rx="2" ry="2" />
<text  x="946.03" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable* const*, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::__normal_iterator&lt;Drawable**&gt; (1 samples, 0.01%)</title><rect x="954.7" y="341" width="0.1" height="15.0" fill="rgb(225,5,5)" rx="2" ry="2" />
<text  x="957.69" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2 samples, 0.02%)</title><rect x="1107.0" y="693" width="0.2" height="15.0" fill="rgb(246,132,18)" rx="2" ry="2" />
<text  x="1109.95" y="703.5" ></text>
</g>
<g >
<title>pixman_image_set_transform (11 samples, 0.12%)</title><rect x="226.0" y="677" width="1.4" height="15.0" fill="rgb(223,179,39)" rx="2" ry="2" />
<text  x="228.96" y="687.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandPlaySound (5 samples, 0.05%)</title><rect x="160.7" y="821" width="0.7" height="15.0" fill="rgb(236,219,13)" rx="2" ry="2" />
<text  x="163.72" y="831.5" ></text>
</g>
<g >
<title>handle_irq_event (2 samples, 0.02%)</title><rect x="74.0" y="853" width="0.2" height="15.0" fill="rgb(216,142,41)" rx="2" ry="2" />
<text  x="76.95" y="863.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (6 samples, 0.07%)</title><rect x="958.0" y="565" width="0.8" height="15.0" fill="rgb(249,104,52)" rx="2" ry="2" />
<text  x="961.02" y="575.5" ></text>
</g>
<g >
<title>std::allocator&lt;int&gt;::allocator (4 samples, 0.04%)</title><rect x="101.4" y="901" width="0.5" height="15.0" fill="rgb(242,89,0)" rx="2" ry="2" />
<text  x="104.38" y="911.5" ></text>
</g>
<g >
<title>pixman_image_composite32 (2 samples, 0.02%)</title><rect x="175.2" y="901" width="0.3" height="15.0" fill="rgb(237,120,27)" rx="2" ry="2" />
<text  x="178.20" y="911.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, Drawable**, Drawable**&gt; (2 samples, 0.02%)</title><rect x="166.2" y="421" width="0.3" height="15.0" fill="rgb(231,103,41)" rx="2" ry="2" />
<text  x="169.23" y="431.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="1059.0" y="645" width="0.1" height="15.0" fill="rgb(249,40,35)" rx="2" ry="2" />
<text  x="1062.02" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_ppoll (92 samples, 1.00%)</title><rect x="59.5" y="885" width="11.8" height="15.0" fill="rgb(249,10,14)" rx="2" ry="2" />
<text  x="62.47" y="895.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (3 samples, 0.03%)</title><rect x="942.3" y="549" width="0.3" height="15.0" fill="rgb(251,117,23)" rx="2" ry="2" />
<text  x="945.26" y="559.5" ></text>
</g>
<g >
<title>FileFinder::MakeCanonical (1 samples, 0.01%)</title><rect x="159.1" y="645" width="0.1" height="15.0" fill="rgb(249,48,21)" rx="2" ry="2" />
<text  x="162.05" y="655.5" ></text>
</g>
<g >
<title>Game_Interpreter_Map::ExecuteCommand (4 samples, 0.04%)</title><rect x="159.1" y="885" width="0.5" height="15.0" fill="rgb(219,144,8)" rx="2" ry="2" />
<text  x="162.05" y="895.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="1120.0" y="581" width="0.5" height="15.0" fill="rgb(210,215,19)" rx="2" ry="2" />
<text  x="1123.02" y="591.5" ></text>
</g>
<g >
<title>vma_merge (1 samples, 0.01%)</title><rect x="174.9" y="165" width="0.2" height="15.0" fill="rgb(254,147,5)" rx="2" ry="2" />
<text  x="177.95" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (9 samples, 0.10%)</title><rect x="756.0" y="613" width="1.2" height="15.0" fill="rgb(244,186,47)" rx="2" ry="2" />
<text  x="759.04" y="623.5" ></text>
</g>
<g >
<title>perf_pmu_enable.part.105 (72 samples, 0.78%)</title><rect x="61.5" y="741" width="9.2" height="15.0" fill="rgb(231,10,3)" rx="2" ry="2" />
<text  x="64.52" y="751.5" ></text>
</g>
<g >
<title>[libX11.so.6.3.0] (11 samples, 0.12%)</title><rect x="1119.1" y="677" width="1.4" height="15.0" fill="rgb(248,59,20)" rx="2" ry="2" />
<text  x="1122.13" y="687.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="889.8" y="613" width="0.2" height="15.0" fill="rgb(243,15,25)" rx="2" ry="2" />
<text  x="892.84" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;AudioDecoder, std::default_delete&lt;AudioDecoder&gt; &gt;::~unique_ptr (1 samples, 0.01%)</title><rect x="169.1" y="469" width="0.1" height="15.0" fill="rgb(228,127,3)" rx="2" ry="2" />
<text  x="172.05" y="479.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;*&gt; (2 samples, 0.02%)</title><rect x="957.1" y="533" width="0.3" height="15.0" fill="rgb(224,18,42)" rx="2" ry="2" />
<text  x="960.13" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::get (2 samples, 0.02%)</title><rect x="1104.1" y="693" width="0.3" height="15.0" fill="rgb(206,109,47)" rx="2" ry="2" />
<text  x="1107.13" y="703.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandControlVariables (1 samples, 0.01%)</title><rect x="112.3" y="901" width="0.1" height="15.0" fill="rgb(251,31,30)" rx="2" ry="2" />
<text  x="115.27" y="911.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="1155.9" y="709" width="0.1" height="15.0" fill="rgb(216,209,20)" rx="2" ry="2" />
<text  x="1158.91" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;short&gt;::operator== (2 samples, 0.02%)</title><rect x="319.0" y="709" width="0.3" height="15.0" fill="rgb(245,111,14)" rx="2" ry="2" />
<text  x="322.00" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (120 samples, 1.30%)</title><rect x="57.8" y="917" width="15.4" height="15.0" fill="rgb(233,145,1)" rx="2" ry="2" />
<text  x="60.80" y="927.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.01%)</title><rect x="548.7" y="581" width="0.1" height="15.0" fill="rgb(217,122,6)" rx="2" ry="2" />
<text  x="551.67" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (18 samples, 0.20%)</title><rect x="156.5" y="677" width="2.3" height="15.0" fill="rgb(214,105,40)" rx="2" ry="2" />
<text  x="159.49" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (1 samples, 0.01%)</title><rect x="1009.7" y="677" width="0.1" height="15.0" fill="rgb(212,53,19)" rx="2" ry="2" />
<text  x="1012.67" y="687.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, true&gt; (1 samples, 0.01%)</title><rect x="1110.5" y="661" width="0.2" height="15.0" fill="rgb(252,204,8)" rx="2" ry="2" />
<text  x="1113.54" y="671.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="1119.6" y="373" width="0.2" height="15.0" fill="rgb(219,13,5)" rx="2" ry="2" />
<text  x="1122.64" y="383.5" ></text>
</g>
<g >
<title>XGetWindowAttributes (1 samples, 0.01%)</title><rect x="1120.8" y="677" width="0.1" height="15.0" fill="rgb(244,209,25)" rx="2" ry="2" />
<text  x="1123.79" y="687.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.02%)</title><rect x="482.5" y="773" width="0.3" height="15.0" fill="rgb(214,220,26)" rx="2" ry="2" />
<text  x="485.54" y="783.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1111.6" y="533" width="0.1" height="15.0" fill="rgb(236,75,24)" rx="2" ry="2" />
<text  x="1114.56" y="543.5" ></text>
</g>
<g >
<title>trigger_load_balance (1 samples, 0.01%)</title><rect x="1004.9" y="501" width="0.2" height="15.0" fill="rgb(229,59,9)" rx="2" ry="2" />
<text  x="1007.93" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (2 samples, 0.02%)</title><rect x="167.0" y="597" width="0.3" height="15.0" fill="rgb(228,19,2)" rx="2" ry="2" />
<text  x="170.00" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::Variable, std::allocator&lt;RPG::Variable&gt; &gt;::size (17 samples, 0.18%)</title><rect x="869.8" y="645" width="2.2" height="15.0" fill="rgb(246,68,28)" rx="2" ry="2" />
<text  x="872.85" y="655.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (16 samples, 0.17%)</title><rect x="935.9" y="629" width="2.0" height="15.0" fill="rgb(224,1,16)" rx="2" ry="2" />
<text  x="938.85" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::_Vector_impl::_Vector_impl (2 samples, 0.02%)</title><rect x="1096.7" y="677" width="0.3" height="15.0" fill="rgb(209,194,28)" rx="2" ry="2" />
<text  x="1099.70" y="687.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="1078.1" y="693" width="0.3" height="15.0" fill="rgb(206,66,16)" rx="2" ry="2" />
<text  x="1081.11" y="703.5" ></text>
</g>
<g >
<title>AsyncHandler::RequestFile (1 samples, 0.01%)</title><rect x="168.9" y="501" width="0.2" height="15.0" fill="rgb(243,27,36)" rx="2" ry="2" />
<text  x="171.92" y="511.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::operator()&lt;FileRequestResult*, void&gt; (2 samples, 0.02%)</title><rect x="159.7" y="693" width="0.3" height="15.0" fill="rgb(239,136,20)" rx="2" ry="2" />
<text  x="162.69" y="703.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (2 samples, 0.02%)</title><rect x="102.7" y="901" width="0.2" height="15.0" fill="rgb(236,131,52)" rx="2" ry="2" />
<text  x="105.66" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="85.0" y="901" width="0.1" height="15.0" fill="rgb(209,16,45)" rx="2" ry="2" />
<text  x="87.98" y="911.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;BaseUi, (__gnu_cxx::_Lock_policy)2&gt;::get (6 samples, 0.07%)</title><rect x="296.1" y="693" width="0.7" height="15.0" fill="rgb(233,100,34)" rx="2" ry="2" />
<text  x="299.06" y="703.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.03%)</title><rect x="1189.4" y="917" width="0.3" height="15.0" fill="rgb(208,110,40)" rx="2" ry="2" />
<text  x="1192.36" y="927.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="121.8" y="693" width="0.1" height="15.0" fill="rgb(221,183,35)" rx="2" ry="2" />
<text  x="124.76" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (2 samples, 0.02%)</title><rect x="960.7" y="661" width="0.3" height="15.0" fill="rgb(243,103,44)" rx="2" ry="2" />
<text  x="963.72" y="671.5" ></text>
</g>
<g >
<title>std::max&lt;int&gt; (1 samples, 0.01%)</title><rect x="960.6" y="661" width="0.1" height="15.0" fill="rgb(212,40,17)" rx="2" ry="2" />
<text  x="963.59" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="945.1" y="469" width="0.1" height="15.0" fill="rgb(228,44,26)" rx="2" ry="2" />
<text  x="948.08" y="479.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (3 samples, 0.03%)</title><rect x="112.4" y="901" width="0.4" height="15.0" fill="rgb(215,39,12)" rx="2" ry="2" />
<text  x="115.40" y="911.5" ></text>
</g>
<g >
<title>memmove (1 samples, 0.01%)</title><rect x="181.2" y="645" width="0.2" height="15.0" fill="rgb(248,103,17)" rx="2" ry="2" />
<text  x="184.23" y="655.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1100.4" y="613" width="0.1" height="15.0" fill="rgb(233,34,5)" rx="2" ry="2" />
<text  x="1103.41" y="623.5" ></text>
</g>
<g >
<title>std::mem_fn&lt;void (FileRequestResult*), Game_Picture&gt; (1 samples, 0.01%)</title><rect x="946.4" y="613" width="0.1" height="15.0" fill="rgb(228,141,20)" rx="2" ry="2" />
<text  x="949.36" y="623.5" ></text>
</g>
<g >
<title>AsyncHandler::IsImportantFilePending (139 samples, 1.51%)</title><rect x="1170.1" y="789" width="17.8" height="15.0" fill="rgb(226,64,45)" rx="2" ry="2" />
<text  x="1173.13" y="799.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="160.2" y="293" width="0.3" height="15.0" fill="rgb(237,26,7)" rx="2" ry="2" />
<text  x="163.21" y="303.5" ></text>
</g>
<g >
<title>[libGLX_nvidia.so.390.116] (35 samples, 0.38%)</title><rect x="118.9" y="917" width="4.5" height="15.0" fill="rgb(246,213,24)" rx="2" ry="2" />
<text  x="121.94" y="927.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (1 samples, 0.01%)</title><rect x="295.5" y="725" width="0.2" height="15.0" fill="rgb(206,180,44)" rx="2" ry="2" />
<text  x="298.55" y="735.5" ></text>
</g>
<g >
<title>_IO_new_fopen (2 samples, 0.02%)</title><rect x="155.5" y="501" width="0.2" height="15.0" fill="rgb(246,174,23)" rx="2" ry="2" />
<text  x="158.47" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (116 samples, 1.26%)</title><rect x="58.3" y="901" width="14.9" height="15.0" fill="rgb(237,140,20)" rx="2" ry="2" />
<text  x="61.32" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="657.2" y="645" width="0.2" height="15.0" fill="rgb(206,201,12)" rx="2" ry="2" />
<text  x="660.22" y="655.5" ></text>
</g>
<g >
<title>__do_sys_newstat (1 samples, 0.01%)</title><rect x="160.7" y="453" width="0.1" height="15.0" fill="rgb(228,106,26)" rx="2" ry="2" />
<text  x="163.72" y="463.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.0" y="821" width="0.1" height="15.0" fill="rgb(225,26,19)" rx="2" ry="2" />
<text  x="180.00" y="831.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt; &gt;::_M_invoke (2 samples, 0.02%)</title><rect x="166.6" y="821" width="0.3" height="15.0" fill="rgb(252,8,23)" rx="2" ry="2" />
<text  x="169.62" y="831.5" ></text>
</g>
<g >
<title>ReaderUtil::GetElement&lt;RPG::SavePicture&gt; (3 samples, 0.03%)</title><rect x="932.6" y="629" width="0.4" height="15.0" fill="rgb(215,106,10)" rx="2" ry="2" />
<text  x="935.65" y="639.5" ></text>
</g>
<g >
<title>blk_mq_run_hw_queue (1 samples, 0.01%)</title><rect x="156.2" y="133" width="0.2" height="15.0" fill="rgb(215,88,32)" rx="2" ry="2" />
<text  x="159.23" y="143.5" ></text>
</g>
<g >
<title>xcb_wait_for_reply64 (9 samples, 0.10%)</title><rect x="1121.0" y="629" width="1.2" height="15.0" fill="rgb(240,122,41)" rx="2" ry="2" />
<text  x="1124.05" y="639.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="946.0" y="501" width="0.4" height="15.0" fill="rgb(230,179,22)" rx="2" ry="2" />
<text  x="948.98" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator++ (1 samples, 0.01%)</title><rect x="1110.9" y="629" width="0.2" height="15.0" fill="rgb(241,15,20)" rx="2" ry="2" />
<text  x="1113.92" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.3" y="629" width="0.1" height="15.0" fill="rgb(253,106,27)" rx="2" ry="2" />
<text  x="180.25" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (6 samples, 0.07%)</title><rect x="155.7" y="613" width="0.8" height="15.0" fill="rgb(250,134,43)" rx="2" ry="2" />
<text  x="158.72" y="623.5" ></text>
</g>
<g >
<title>std::min&lt;int&gt; (1 samples, 0.01%)</title><rect x="895.7" y="661" width="0.2" height="15.0" fill="rgb(233,70,51)" rx="2" ry="2" />
<text  x="898.74" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (342 samples, 3.71%)</title><rect x="518.2" y="693" width="43.8" height="15.0" fill="rgb(246,96,4)" rx="2" ry="2" />
<text  x="521.17" y="703.5" >std:..</text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt;, std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt;, 0ul, 6ul&gt;::__less (1 samples, 0.01%)</title><rect x="229.9" y="661" width="0.2" height="15.0" fill="rgb(227,161,3)" rx="2" ry="2" />
<text  x="232.93" y="671.5" ></text>
</g>
<g >
<title>Cache::Picture (6 samples, 0.07%)</title><rect x="160.0" y="549" width="0.7" height="15.0" fill="rgb(225,162,52)" rx="2" ry="2" />
<text  x="162.95" y="559.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (8 samples, 0.09%)</title><rect x="159.7" y="821" width="1.0" height="15.0" fill="rgb(252,162,39)" rx="2" ry="2" />
<text  x="162.69" y="831.5" ></text>
</g>
<g >
<title>_XReply (1 samples, 0.01%)</title><rect x="1120.8" y="645" width="0.1" height="15.0" fill="rgb(233,55,31)" rx="2" ry="2" />
<text  x="1123.79" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::base (5 samples, 0.05%)</title><rect x="992.6" y="629" width="0.7" height="15.0" fill="rgb(221,112,31)" rx="2" ry="2" />
<text  x="995.63" y="639.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (1 samples, 0.01%)</title><rect x="477.5" y="709" width="0.2" height="15.0" fill="rgb(230,129,35)" rx="2" ry="2" />
<text  x="480.54" y="719.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="1189.7" y="885" width="0.2" height="15.0" fill="rgb(253,167,46)" rx="2" ry="2" />
<text  x="1192.74" y="895.5" ></text>
</g>
<g >
<title>Game_Map::GetTerrainTag (2 samples, 0.02%)</title><rect x="1107.6" y="709" width="0.2" height="15.0" fill="rgb(246,226,35)" rx="2" ry="2" />
<text  x="1110.59" y="719.5" ></text>
</g>
<g >
<title>TilemapLayer::Draw (640 samples, 6.95%)</title><rect x="240.8" y="757" width="82.0" height="15.0" fill="rgb(225,217,46)" rx="2" ry="2" />
<text  x="243.82" y="767.5" >TilemapLa..</text>
</g>
<g >
<title>__gthread_active_p (1 samples, 0.01%)</title><rect x="90.2" y="901" width="0.2" height="15.0" fill="rgb(232,96,3)" rx="2" ry="2" />
<text  x="93.23" y="911.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (85 samples, 0.92%)</title><rect x="946.5" y="629" width="10.9" height="15.0" fill="rgb(227,219,23)" rx="2" ry="2" />
<text  x="949.49" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="155.5" y="565" width="0.2" height="15.0" fill="rgb(218,72,26)" rx="2" ry="2" />
<text  x="158.47" y="575.5" ></text>
</g>
<g >
<title>Game_Interpreter::SkipTo (1 samples, 0.01%)</title><rect x="158.9" y="901" width="0.2" height="15.0" fill="rgb(208,85,47)" rx="2" ry="2" />
<text  x="161.93" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (1 samples, 0.01%)</title><rect x="928.8" y="645" width="0.1" height="15.0" fill="rgb(212,30,28)" rx="2" ry="2" />
<text  x="931.80" y="655.5" ></text>
</g>
<g >
<title>memcmp (1 samples, 0.01%)</title><rect x="951.4" y="261" width="0.1" height="15.0" fill="rgb(240,63,37)" rx="2" ry="2" />
<text  x="954.36" y="271.5" ></text>
</g>
<g >
<title>XQueryKeymap (1 samples, 0.01%)</title><rect x="1120.9" y="677" width="0.1" height="15.0" fill="rgb(235,190,44)" rx="2" ry="2" />
<text  x="1123.92" y="687.5" ></text>
</g>
<g >
<title>__blk_mq_sched_bio_merge (1 samples, 0.01%)</title><rect x="156.4" y="117" width="0.1" height="15.0" fill="rgb(218,122,13)" rx="2" ry="2" />
<text  x="159.36" y="127.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="159.1" y="693" width="0.1" height="15.0" fill="rgb(237,186,26)" rx="2" ry="2" />
<text  x="162.05" y="703.5" ></text>
</g>
<g >
<title>ReaderUtil::GetElement&lt;RPG::SavePicture&gt; (2 samples, 0.02%)</title><rect x="933.4" y="613" width="0.3" height="15.0" fill="rgb(208,61,40)" rx="2" ry="2" />
<text  x="936.42" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; const*, std::vector&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt;, std::allocator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; &gt; &gt; &gt;::__normal_iterator (3 samples, 0.03%)</title><rect x="293.0" y="677" width="0.4" height="15.0" fill="rgb(253,32,33)" rx="2" ry="2" />
<text  x="295.98" y="687.5" ></text>
</g>
<g >
<title>Window_Base::Update (11 samples, 0.12%)</title><rect x="1110.7" y="741" width="1.4" height="15.0" fill="rgb(229,160,16)" rx="2" ry="2" />
<text  x="1113.67" y="751.5" ></text>
</g>
<g >
<title>std::any_of&lt;std::_Deque_iterator&lt;MessageOverlayItem, MessageOverlayItem const&amp;, MessageOverlayItem const*&gt;, MessageOverlay::IsAnyMessageVisible() const::{lambda(MessageOverlayItem const&amp;)#1}&gt; (1 samples, 0.01%)</title><rect x="180.5" y="741" width="0.1" height="15.0" fill="rgb(224,226,13)" rx="2" ry="2" />
<text  x="183.46" y="751.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt; &gt;::_M_invoke (13 samples, 0.14%)</title><rect x="167.3" y="677" width="1.6" height="15.0" fill="rgb(238,65,21)" rx="2" ry="2" />
<text  x="170.26" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="1120.9" y="533" width="0.1" height="15.0" fill="rgb(214,40,50)" rx="2" ry="2" />
<text  x="1123.92" y="543.5" ></text>
</g>
<g >
<title>Bitmap::Create (1 samples, 0.01%)</title><rect x="175.6" y="757" width="0.1" height="15.0" fill="rgb(232,15,43)" rx="2" ry="2" />
<text  x="178.59" y="767.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="159.8" y="501" width="0.2" height="15.0" fill="rgb(252,60,12)" rx="2" ry="2" />
<text  x="162.82" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;::push_back (1 samples, 0.01%)</title><rect x="155.3" y="581" width="0.2" height="15.0" fill="rgb(211,188,51)" rx="2" ry="2" />
<text  x="158.34" y="591.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (18 samples, 0.20%)</title><rect x="156.5" y="821" width="2.3" height="15.0" fill="rgb(225,100,1)" rx="2" ry="2" />
<text  x="159.49" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (26 samples, 0.28%)</title><rect x="1006.3" y="677" width="3.4" height="15.0" fill="rgb(225,28,22)" rx="2" ry="2" />
<text  x="1009.34" y="687.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (8 samples, 0.09%)</title><rect x="1121.0" y="469" width="1.1" height="15.0" fill="rgb(216,195,50)" rx="2" ry="2" />
<text  x="1124.05" y="479.5" ></text>
</g>
<g >
<title>Sdl2Ui::ProcessEvents (78 samples, 0.85%)</title><rect x="1118.7" y="805" width="10.0" height="15.0" fill="rgb(235,106,1)" rx="2" ry="2" />
<text  x="1121.74" y="815.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.7" y="581" width="0.1" height="15.0" fill="rgb(248,132,29)" rx="2" ry="2" />
<text  x="178.72" y="591.5" ></text>
</g>
<g >
<title>xhci_td_cleanup (1 samples, 0.01%)</title><rect x="957.6" y="437" width="0.2" height="15.0" fill="rgb(254,223,13)" rx="2" ry="2" />
<text  x="960.64" y="447.5" ></text>
</g>
<g >
<title>enqueue_entity (1 samples, 0.01%)</title><rect x="72.2" y="677" width="0.1" height="15.0" fill="rgb(227,14,26)" rx="2" ry="2" />
<text  x="75.16" y="687.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::operator()&lt;FileRequestResult*, void&gt; (2 samples, 0.02%)</title><rect x="167.0" y="645" width="0.3" height="15.0" fill="rgb(239,203,3)" rx="2" ry="2" />
<text  x="170.00" y="655.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.01%)</title><rect x="935.7" y="517" width="0.2" height="15.0" fill="rgb(250,87,36)" rx="2" ry="2" />
<text  x="938.72" y="527.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (1 samples, 0.01%)</title><rect x="71.5" y="805" width="0.1" height="15.0" fill="rgb(243,69,51)" rx="2" ry="2" />
<text  x="74.52" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (20 samples, 0.22%)</title><rect x="654.7" y="629" width="2.5" height="15.0" fill="rgb(205,0,19)" rx="2" ry="2" />
<text  x="657.66" y="639.5" ></text>
</g>
<g >
<title>FileFinder::MakePath (13 samples, 0.14%)</title><rect x="939.4" y="613" width="1.7" height="15.0" fill="rgb(232,13,2)" rx="2" ry="2" />
<text  x="942.44" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.01%)</title><rect x="159.8" y="549" width="0.2" height="15.0" fill="rgb(205,65,46)" rx="2" ry="2" />
<text  x="162.82" y="559.5" ></text>
</g>
<g >
<title>std::bitset&lt;32ul&gt;::reference::operator= (2 samples, 0.02%)</title><rect x="930.3" y="661" width="0.3" height="15.0" fill="rgb(244,89,15)" rx="2" ry="2" />
<text  x="933.34" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="166.5" y="613" width="0.1" height="15.0" fill="rgb(227,226,10)" rx="2" ry="2" />
<text  x="169.49" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="155.5" y="613" width="0.2" height="15.0" fill="rgb(219,126,27)" rx="2" ry="2" />
<text  x="158.47" y="623.5" ></text>
</g>
<g >
<title>__netif_receive_skb (1 samples, 0.01%)</title><rect x="121.8" y="597" width="0.1" height="15.0" fill="rgb(238,180,12)" rx="2" ry="2" />
<text  x="124.76" y="607.5" ></text>
</g>
<g >
<title>__memcpy_sse2_unaligned (1 samples, 0.01%)</title><rect x="168.7" y="533" width="0.1" height="15.0" fill="rgb(236,42,19)" rx="2" ry="2" />
<text  x="171.67" y="543.5" ></text>
</g>
<g >
<title>std::set&lt;short, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::end (9 samples, 0.10%)</title><rect x="307.0" y="741" width="1.1" height="15.0" fill="rgb(205,164,25)" rx="2" ry="2" />
<text  x="309.95" y="751.5" ></text>
</g>
<g >
<title>_XGetWindowAttributes (1 samples, 0.01%)</title><rect x="1120.8" y="661" width="0.1" height="15.0" fill="rgb(216,146,35)" rx="2" ry="2" />
<text  x="1123.79" y="671.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="918.4" y="597" width="0.2" height="15.0" fill="rgb(235,25,28)" rx="2" ry="2" />
<text  x="921.42" y="607.5" ></text>
</g>
<g >
<title>std::bitset&lt;32ul&gt;::_Unchecked_test (3 samples, 0.03%)</title><rect x="929.3" y="613" width="0.4" height="15.0" fill="rgb(227,15,4)" rx="2" ry="2" />
<text  x="932.32" y="623.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (1 samples, 0.01%)</title><rect x="170.6" y="821" width="0.1" height="15.0" fill="rgb(212,95,11)" rx="2" ry="2" />
<text  x="173.59" y="831.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (2 samples, 0.02%)</title><rect x="155.2" y="885" width="0.3" height="15.0" fill="rgb(251,104,20)" rx="2" ry="2" />
<text  x="158.21" y="895.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (1,162 samples, 12.62%)</title><rect x="328.7" y="773" width="149.0" height="15.0" fill="rgb(222,86,26)" rx="2" ry="2" />
<text  x="331.74" y="783.5" >[libSDL2-2.0.so.0.9..</text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;Input::UiSource::Update()::{lambda(int)#1}&gt; &gt; (12 samples, 0.13%)</title><rect x="479.1" y="725" width="1.5" height="15.0" fill="rgb(245,123,36)" rx="2" ry="2" />
<text  x="482.08" y="735.5" ></text>
</g>
<g >
<title>std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;::operator() (1 samples, 0.01%)</title><rect x="951.4" y="341" width="0.1" height="15.0" fill="rgb(211,79,19)" rx="2" ry="2" />
<text  x="954.36" y="351.5" ></text>
</g>
<g >
<title>do_wp_page (1 samples, 0.01%)</title><rect x="954.3" y="293" width="0.1" height="15.0" fill="rgb(249,205,48)" rx="2" ry="2" />
<text  x="957.31" y="303.5" ></text>
</g>
<g >
<title>std::set&lt;short, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::find (94 samples, 1.02%)</title><rect x="308.1" y="741" width="12.1" height="15.0" fill="rgb(215,64,2)" rx="2" ry="2" />
<text  x="311.11" y="751.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="177.0" y="533" width="0.1" height="15.0" fill="rgb(213,76,22)" rx="2" ry="2" />
<text  x="180.00" y="543.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 0.01%)</title><rect x="174.9" y="229" width="0.2" height="15.0" fill="rgb(247,209,30)" rx="2" ry="2" />
<text  x="177.95" y="239.5" ></text>
</g>
<g >
<title>walk_component (1 samples, 0.01%)</title><rect x="160.7" y="357" width="0.1" height="15.0" fill="rgb(224,72,22)" rx="2" ry="2" />
<text  x="163.72" y="367.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**&gt; (3 samples, 0.03%)</title><rect x="328.2" y="661" width="0.4" height="15.0" fill="rgb(210,145,49)" rx="2" ry="2" />
<text  x="331.23" y="671.5" ></text>
</g>
<g >
<title>usb_hcd_submit_urb (1 samples, 0.01%)</title><rect x="957.6" y="341" width="0.2" height="15.0" fill="rgb(249,64,50)" rx="2" ry="2" />
<text  x="960.64" y="351.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="940.0" y="501" width="0.1" height="15.0" fill="rgb(231,120,6)" rx="2" ry="2" />
<text  x="942.95" y="511.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.01%)</title><rect x="72.8" y="661" width="0.1" height="15.0" fill="rgb(238,147,6)" rx="2" ry="2" />
<text  x="75.80" y="671.5" ></text>
</g>
<g >
<title>Scene::IsAsyncPending (302 samples, 3.28%)</title><rect x="1131.3" y="821" width="38.7" height="15.0" fill="rgb(248,72,14)" rx="2" ry="2" />
<text  x="1134.30" y="831.5" >Sce..</text>
</g>
<g >
<title>std::__get_helper&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt; (1 samples, 0.01%)</title><rect x="952.5" y="341" width="0.1" height="15.0" fill="rgb(227,162,21)" rx="2" ry="2" />
<text  x="955.51" y="351.5" ></text>
</g>
<g >
<title>wp_page_copy (1 samples, 0.01%)</title><rect x="160.1" y="229" width="0.1" height="15.0" fill="rgb(220,1,30)" rx="2" ry="2" />
<text  x="163.08" y="239.5" ></text>
</g>
<g >
<title>MapUpdateAsyncContext::IsParallelCommonEvent (1 samples, 0.01%)</title><rect x="1106.2" y="741" width="0.1" height="15.0" fill="rgb(234,35,19)" rx="2" ry="2" />
<text  x="1109.18" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Game_CommonEvent*, std::vector&lt;Game_CommonEvent, std::allocator&lt;Game_CommonEvent&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="1096.1" y="741" width="0.1" height="15.0" fill="rgb(243,200,17)" rx="2" ry="2" />
<text  x="1099.06" y="751.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="1100.4" y="597" width="0.1" height="15.0" fill="rgb(234,135,43)" rx="2" ry="2" />
<text  x="1103.41" y="607.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (1 samples, 0.01%)</title><rect x="1189.7" y="917" width="0.2" height="15.0" fill="rgb(205,131,33)" rx="2" ry="2" />
<text  x="1192.74" y="927.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.3" y="597" width="0.1" height="15.0" fill="rgb(206,210,18)" rx="2" ry="2" />
<text  x="180.25" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::size (174 samples, 1.89%)</title><rect x="806.5" y="645" width="22.3" height="15.0" fill="rgb(217,216,49)" rx="2" ry="2" />
<text  x="809.54" y="655.5" >s..</text>
</g>
<g >
<title>ReaderUtil::Normalize (1 samples, 0.01%)</title><rect x="158.7" y="613" width="0.1" height="15.0" fill="rgb(251,33,5)" rx="2" ry="2" />
<text  x="161.67" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="159.1" y="581" width="0.1" height="15.0" fill="rgb(215,100,16)" rx="2" ry="2" />
<text  x="162.05" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt;, std::allocator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; &gt; &gt;::begin (15 samples, 0.16%)</title><rect x="289.9" y="693" width="1.9" height="15.0" fill="rgb(228,101,22)" rx="2" ry="2" />
<text  x="292.91" y="703.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (2 samples, 0.02%)</title><rect x="174.8" y="597" width="0.3" height="15.0" fill="rgb(226,118,18)" rx="2" ry="2" />
<text  x="177.82" y="607.5" ></text>
</g>
<g >
<title>Game_CommonEvent::Update (14 samples, 0.15%)</title><rect x="167.3" y="837" width="1.8" height="15.0" fill="rgb(215,143,30)" rx="2" ry="2" />
<text  x="170.26" y="847.5" ></text>
</g>
<g >
<title>__wake_up_locked_key (7 samples, 0.08%)</title><rect x="72.0" y="805" width="0.9" height="15.0" fill="rgb(245,15,29)" rx="2" ry="2" />
<text  x="75.03" y="815.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.01%)</title><rect x="229.7" y="245" width="0.1" height="15.0" fill="rgb(225,101,36)" rx="2" ry="2" />
<text  x="232.67" y="255.5" ></text>
</g>
<g >
<title>__interceptor_localtime (1 samples, 0.01%)</title><rect x="160.7" y="581" width="0.1" height="15.0" fill="rgb(245,15,5)" rx="2" ry="2" />
<text  x="163.72" y="591.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (2 samples, 0.02%)</title><rect x="1005.7" y="661" width="0.3" height="15.0" fill="rgb(235,115,38)" rx="2" ry="2" />
<text  x="1008.70" y="671.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="1148.6" y="645" width="0.1" height="15.0" fill="rgb(250,171,48)" rx="2" ry="2" />
<text  x="1151.60" y="655.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.01%)</title><rect x="948.9" y="245" width="0.2" height="15.0" fill="rgb(237,62,20)" rx="2" ry="2" />
<text  x="951.92" y="255.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="947.0" y="549" width="0.1" height="15.0" fill="rgb(213,35,14)" rx="2" ry="2" />
<text  x="950.00" y="559.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (3 samples, 0.03%)</title><rect x="170.7" y="821" width="0.4" height="15.0" fill="rgb(247,75,22)" rx="2" ry="2" />
<text  x="173.72" y="831.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::get (1 samples, 0.01%)</title><rect x="177.5" y="901" width="0.1" height="15.0" fill="rgb(230,15,40)" rx="2" ry="2" />
<text  x="180.51" y="911.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.01%)</title><rect x="1128.1" y="709" width="0.1" height="15.0" fill="rgb(239,37,33)" rx="2" ry="2" />
<text  x="1131.10" y="719.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="155.0" y="709" width="0.2" height="15.0" fill="rgb(223,63,30)" rx="2" ry="2" />
<text  x="157.95" y="719.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="477.8" y="661" width="0.1" height="15.0" fill="rgb(250,142,27)" rx="2" ry="2" />
<text  x="480.80" y="671.5" ></text>
</g>
<g >
<title>Cache::Picture (1 samples, 0.01%)</title><rect x="174.8" y="421" width="0.1" height="15.0" fill="rgb(247,112,10)" rx="2" ry="2" />
<text  x="177.82" y="431.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1189.9" y="805" width="0.1" height="15.0" fill="rgb(210,182,29)" rx="2" ry="2" />
<text  x="1192.87" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="1188.2" y="773" width="0.1" height="15.0" fill="rgb(212,172,14)" rx="2" ry="2" />
<text  x="1191.21" y="783.5" ></text>
</g>
<g >
<title>Game_Map::LoopHorizontal (47 samples, 0.51%)</title><rect x="240.8" y="741" width="6.0" height="15.0" fill="rgb(238,163,45)" rx="2" ry="2" />
<text  x="243.82" y="751.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="957.6" y="485" width="0.2" height="15.0" fill="rgb(212,45,26)" rx="2" ry="2" />
<text  x="960.64" y="495.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 0ul, 3ul&gt;::__less (1 samples, 0.01%)</title><rect x="1109.4" y="613" width="0.1" height="15.0" fill="rgb(253,151,54)" rx="2" ry="2" />
<text  x="1112.39" y="623.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="122.4" y="869" width="0.1" height="15.0" fill="rgb(237,145,28)" rx="2" ry="2" />
<text  x="125.40" y="879.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, Game_Picture*, std::_Placeholder&lt;1&gt; &gt;::_M_tail (1 samples, 0.01%)</title><rect x="945.2" y="517" width="0.1" height="15.0" fill="rgb(246,17,47)" rx="2" ry="2" />
<text  x="948.21" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Game_CommonEvent*, std::vector&lt;Game_CommonEvent, std::allocator&lt;Game_CommonEvent&gt; &gt; &gt;::operator++ (1 samples, 0.01%)</title><rect x="1096.2" y="741" width="0.1" height="15.0" fill="rgb(226,11,35)" rx="2" ry="2" />
<text  x="1099.18" y="751.5" ></text>
</g>
<g >
<title>Graphics::UpdateTitle (2 samples, 0.02%)</title><rect x="477.8" y="789" width="0.3" height="15.0" fill="rgb(242,122,0)" rx="2" ry="2" />
<text  x="480.80" y="799.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, Drawable**, Drawable**&gt; (1 samples, 0.01%)</title><rect x="328.2" y="645" width="0.2" height="15.0" fill="rgb(216,94,4)" rx="2" ry="2" />
<text  x="331.23" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;Sprite&gt;::operator() (2 samples, 0.02%)</title><rect x="166.2" y="549" width="0.3" height="15.0" fill="rgb(210,227,52)" rx="2" ry="2" />
<text  x="169.23" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="901.0" y="629" width="0.1" height="15.0" fill="rgb(238,88,1)" rx="2" ry="2" />
<text  x="903.99" y="639.5" ></text>
</g>
<g >
<title>std::__move_merge_adaptive&lt;Drawable**, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (2 samples, 0.02%)</title><rect x="324.3" y="709" width="0.2" height="15.0" fill="rgb(211,73,28)" rx="2" ry="2" />
<text  x="327.26" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="161.1" y="373" width="0.1" height="15.0" fill="rgb(212,149,46)" rx="2" ry="2" />
<text  x="164.10" y="383.5" ></text>
</g>
<g >
<title>ReaderUtil::GetElement&lt;RPG::CommonEvent&gt; (1 samples, 0.01%)</title><rect x="81.3" y="901" width="0.1" height="15.0" fill="rgb(224,137,32)" rx="2" ry="2" />
<text  x="84.26" y="911.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="166.2" y="437" width="0.3" height="15.0" fill="rgb(235,59,32)" rx="2" ry="2" />
<text  x="169.23" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;int, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.01%)</title><rect x="958.8" y="613" width="0.1" height="15.0" fill="rgb(230,21,25)" rx="2" ry="2" />
<text  x="961.79" y="623.5" ></text>
</g>
<g >
<title>AudioDecoder::Decode (1 samples, 0.01%)</title><rect x="161.0" y="597" width="0.1" height="15.0" fill="rgb(251,75,21)" rx="2" ry="2" />
<text  x="163.98" y="607.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (13 samples, 0.14%)</title><rect x="473.8" y="581" width="1.7" height="15.0" fill="rgb(214,219,49)" rx="2" ry="2" />
<text  x="476.82" y="591.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="175.6" y="837" width="0.2" height="15.0" fill="rgb(240,124,13)" rx="2" ry="2" />
<text  x="178.59" y="847.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;BaseUi, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (1 samples, 0.01%)</title><rect x="227.5" y="709" width="0.1" height="15.0" fill="rgb(252,211,48)" rx="2" ry="2" />
<text  x="230.49" y="719.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="939.8" y="549" width="0.2" height="15.0" fill="rgb(242,207,0)" rx="2" ry="2" />
<text  x="942.83" y="559.5" ></text>
</g>
<g >
<title>ksys_read (4 samples, 0.04%)</title><rect x="71.3" y="869" width="0.5" height="15.0" fill="rgb(213,34,47)" rx="2" ry="2" />
<text  x="74.26" y="879.5" ></text>
</g>
<g >
<title>pixman_image_get_height (2 samples, 0.02%)</title><rect x="91.3" y="901" width="0.2" height="15.0" fill="rgb(251,167,42)" rx="2" ry="2" />
<text  x="94.26" y="911.5" ></text>
</g>
<g >
<title>Sdl2Ui::GetTicks (3 samples, 0.03%)</title><rect x="1108.9" y="693" width="0.4" height="15.0" fill="rgb(209,214,49)" rx="2" ry="2" />
<text  x="1111.87" y="703.5" ></text>
</g>
<g >
<title>min&lt;int&gt; (1 samples, 0.01%)</title><rect x="952.4" y="389" width="0.1" height="15.0" fill="rgb(229,2,17)" rx="2" ry="2" />
<text  x="955.39" y="399.5" ></text>
</g>
<g >
<title>FlagSet&lt;Game_Interpreter::Keys, 32ul&gt;::operator[] (2 samples, 0.02%)</title><rect x="928.4" y="661" width="0.3" height="15.0" fill="rgb(252,31,22)" rx="2" ry="2" />
<text  x="931.42" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (9 samples, 0.10%)</title><rect x="303.6" y="677" width="1.2" height="15.0" fill="rgb(248,60,22)" rx="2" ry="2" />
<text  x="306.62" y="687.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="998.5" y="533" width="0.2" height="15.0" fill="rgb(225,25,39)" rx="2" ry="2" />
<text  x="1001.52" y="543.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="1109.4" y="597" width="0.1" height="15.0" fill="rgb(221,52,8)" rx="2" ry="2" />
<text  x="1112.39" y="607.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_manager (8 samples, 0.09%)</title><rect x="945.3" y="581" width="1.1" height="15.0" fill="rgb(208,160,23)" rx="2" ry="2" />
<text  x="948.34" y="591.5" ></text>
</g>
<g >
<title>Game_Variables_Class::Set (1 samples, 0.01%)</title><rect x="930.2" y="661" width="0.1" height="15.0" fill="rgb(249,197,52)" rx="2" ry="2" />
<text  x="933.21" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (78 samples, 0.85%)</title><rect x="1017.4" y="661" width="10.0" height="15.0" fill="rgb(249,62,49)" rx="2" ry="2" />
<text  x="1020.36" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (2 samples, 0.02%)</title><rect x="1058.6" y="677" width="0.3" height="15.0" fill="rgb(240,130,23)" rx="2" ry="2" />
<text  x="1061.63" y="687.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.01%)</title><rect x="1127.6" y="501" width="0.1" height="15.0" fill="rgb(205,142,2)" rx="2" ry="2" />
<text  x="1130.58" y="511.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (5 samples, 0.05%)</title><rect x="226.7" y="645" width="0.7" height="15.0" fill="rgb(248,166,15)" rx="2" ry="2" />
<text  x="229.72" y="655.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.6" y="437" width="0.1" height="15.0" fill="rgb(217,156,34)" rx="2" ry="2" />
<text  x="178.59" y="447.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::operator()&lt;FileRequestResult*, void&gt; (1 samples, 0.01%)</title><rect x="169.1" y="677" width="0.1" height="15.0" fill="rgb(254,171,53)" rx="2" ry="2" />
<text  x="172.05" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (3 samples, 0.03%)</title><rect x="957.4" y="629" width="0.4" height="15.0" fill="rgb(251,196,1)" rx="2" ry="2" />
<text  x="960.38" y="639.5" ></text>
</g>
<g >
<title>_start (7,880 samples, 85.59%)</title><rect x="178.9" y="917" width="1009.9" height="15.0" fill="rgb(205,80,49)" rx="2" ry="2" />
<text  x="181.92" y="927.5" >_start</text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1111.2" y="645" width="0.1" height="15.0" fill="rgb(240,51,41)" rx="2" ry="2" />
<text  x="1114.18" y="655.5" ></text>
</g>
<g >
<title>AudioResampler::FillBufferDifferentRate (1 samples, 0.01%)</title><rect x="159.7" y="533" width="0.1" height="15.0" fill="rgb(248,166,26)" rx="2" ry="2" />
<text  x="162.69" y="543.5" ></text>
</g>
<g >
<title>FileFinder::MakeCanonical (1 samples, 0.01%)</title><rect x="155.3" y="693" width="0.2" height="15.0" fill="rgb(245,117,15)" rx="2" ry="2" />
<text  x="158.34" y="703.5" ></text>
</g>
<g >
<title>std::bitset&lt;152ul&gt;::reference::operator bool (3 samples, 0.03%)</title><rect x="480.2" y="677" width="0.4" height="15.0" fill="rgb(223,215,48)" rx="2" ry="2" />
<text  x="483.23" y="687.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.02%)</title><rect x="942.9" y="517" width="0.3" height="15.0" fill="rgb(228,9,18)" rx="2" ry="2" />
<text  x="945.90" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (1 samples, 0.01%)</title><rect x="117.5" y="901" width="0.2" height="15.0" fill="rgb(225,132,43)" rx="2" ry="2" />
<text  x="120.53" y="911.5" ></text>
</g>
<g >
<title>sock_poll (1 samples, 0.01%)</title><rect x="1128.6" y="629" width="0.1" height="15.0" fill="rgb(247,214,50)" rx="2" ry="2" />
<text  x="1131.61" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (3 samples, 0.03%)</title><rect x="950.7" y="293" width="0.4" height="15.0" fill="rgb(215,172,3)" rx="2" ry="2" />
<text  x="953.72" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="949.3" y="309" width="0.1" height="15.0" fill="rgb(208,51,41)" rx="2" ry="2" />
<text  x="952.31" y="319.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="1189.7" y="837" width="0.2" height="15.0" fill="rgb(229,65,18)" rx="2" ry="2" />
<text  x="1192.74" y="847.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="177.0" y="565" width="0.1" height="15.0" fill="rgb(206,186,43)" rx="2" ry="2" />
<text  x="180.00" y="575.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Sprite*, std::default_delete&lt;Sprite&gt; &gt; (3 samples, 0.03%)</title><rect x="1105.0" y="677" width="0.4" height="15.0" fill="rgb(245,104,27)" rx="2" ry="2" />
<text  x="1108.03" y="687.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (2 samples, 0.02%)</title><rect x="166.6" y="885" width="0.3" height="15.0" fill="rgb(219,100,8)" rx="2" ry="2" />
<text  x="169.62" y="895.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;4ul, Tone, Color&gt; (1 samples, 0.01%)</title><rect x="97.7" y="901" width="0.1" height="15.0" fill="rgb(222,218,5)" rx="2" ry="2" />
<text  x="100.66" y="911.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.01%)</title><rect x="165.6" y="229" width="0.1" height="15.0" fill="rgb(242,29,3)" rx="2" ry="2" />
<text  x="168.59" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::clear (2 samples, 0.02%)</title><rect x="925.3" y="645" width="0.3" height="15.0" fill="rgb(213,130,12)" rx="2" ry="2" />
<text  x="928.34" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::reset (2 samples, 0.02%)</title><rect x="166.2" y="565" width="0.3" height="15.0" fill="rgb(231,126,14)" rx="2" ry="2" />
<text  x="169.23" y="575.5" ></text>
</g>
<g >
<title>Game_Interpreter::KeyInputState::KeyInputState (3 samples, 0.03%)</title><rect x="929.8" y="661" width="0.4" height="15.0" fill="rgb(243,65,33)" rx="2" ry="2" />
<text  x="932.83" y="671.5" ></text>
</g>
<g >
<title>dequeue_task_fair (1 samples, 0.01%)</title><rect x="1123.2" y="581" width="0.2" height="15.0" fill="rgb(227,140,27)" rx="2" ry="2" />
<text  x="1126.23" y="591.5" ></text>
</g>
<g >
<title>Graphics::LocalDraw (1,147 samples, 12.46%)</title><rect x="181.6" y="789" width="147.0" height="15.0" fill="rgb(208,126,12)" rx="2" ry="2" />
<text  x="184.61" y="799.5" >Graphics::LocalDraw</text>
</g>
<g >
<title>irq_exit (3 samples, 0.03%)</title><rect x="806.0" y="597" width="0.4" height="15.0" fill="rgb(221,136,16)" rx="2" ry="2" />
<text  x="809.02" y="607.5" ></text>
</g>
<g >
<title>Game_CommonEvent::Update (2 samples, 0.02%)</title><rect x="174.8" y="741" width="0.3" height="15.0" fill="rgb(245,142,33)" rx="2" ry="2" />
<text  x="177.82" y="751.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="229.7" y="661" width="0.1" height="15.0" fill="rgb(215,40,3)" rx="2" ry="2" />
<text  x="232.67" y="671.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (6 samples, 0.07%)</title><rect x="155.7" y="805" width="0.8" height="15.0" fill="rgb(214,33,49)" rx="2" ry="2" />
<text  x="158.72" y="815.5" ></text>
</g>
<g >
<title>__task_pid_nr_ns (1 samples, 0.01%)</title><rect x="59.3" y="869" width="0.2" height="15.0" fill="rgb(237,109,29)" rx="2" ry="2" />
<text  x="62.34" y="879.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (14 samples, 0.15%)</title><rect x="167.3" y="789" width="1.8" height="15.0" fill="rgb(230,77,26)" rx="2" ry="2" />
<text  x="170.26" y="799.5" ></text>
</g>
<g >
<title>Bitmap::Create (17 samples, 0.18%)</title><rect x="156.5" y="629" width="2.2" height="15.0" fill="rgb(215,103,32)" rx="2" ry="2" />
<text  x="159.49" y="639.5" ></text>
</g>
<g >
<title>std::default_delete&lt;AudioSeCache&gt;::operator() (1 samples, 0.01%)</title><rect x="169.1" y="565" width="0.1" height="15.0" fill="rgb(212,185,35)" rx="2" ry="2" />
<text  x="172.05" y="575.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="1051.7" y="613" width="0.1" height="15.0" fill="rgb(253,96,29)" rx="2" ry="2" />
<text  x="1054.71" y="623.5" ></text>
</g>
<g >
<title>path_lookupat.isra.46 (1 samples, 0.01%)</title><rect x="160.7" y="389" width="0.1" height="15.0" fill="rgb(211,111,19)" rx="2" ry="2" />
<text  x="163.72" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::begin (2 samples, 0.02%)</title><rect x="483.6" y="677" width="0.2" height="15.0" fill="rgb(222,56,38)" rx="2" ry="2" />
<text  x="486.56" y="687.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;Drawable* const&gt; &gt; (3 samples, 0.03%)</title><rect x="955.1" y="309" width="0.4" height="15.0" fill="rgb(210,46,19)" rx="2" ry="2" />
<text  x="958.08" y="319.5" ></text>
</g>
<g >
<title>speex_resampler_init_frac (1 samples, 0.01%)</title><rect x="936.0" y="421" width="0.1" height="15.0" fill="rgb(213,202,19)" rx="2" ry="2" />
<text  x="938.98" y="431.5" ></text>
</g>
<g >
<title>Opacity::Opacity (6 samples, 0.07%)</title><rect x="293.4" y="725" width="0.7" height="15.0" fill="rgb(239,173,6)" rx="2" ry="2" />
<text  x="296.37" y="735.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (5 samples, 0.05%)</title><rect x="169.2" y="581" width="0.6" height="15.0" fill="rgb(247,36,31)" rx="2" ry="2" />
<text  x="172.18" y="591.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="158.5" y="293" width="0.2" height="15.0" fill="rgb(236,181,30)" rx="2" ry="2" />
<text  x="161.54" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (50 samples, 0.54%)</title><rect x="918.6" y="661" width="6.4" height="15.0" fill="rgb(243,7,37)" rx="2" ry="2" />
<text  x="921.55" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;int&gt;::operator= (8 samples, 0.09%)</title><rect x="957.8" y="629" width="1.0" height="15.0" fill="rgb(229,55,36)" rx="2" ry="2" />
<text  x="960.77" y="639.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (3 samples, 0.03%)</title><rect x="114.5" y="901" width="0.3" height="15.0" fill="rgb(218,125,12)" rx="2" ry="2" />
<text  x="117.45" y="911.5" ></text>
</g>
<g >
<title>Spriteset_Map::Update (13 samples, 0.14%)</title><rect x="1107.2" y="773" width="1.7" height="15.0" fill="rgb(228,184,0)" rx="2" ry="2" />
<text  x="1110.21" y="783.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="166.6" y="661" width="0.1" height="15.0" fill="rgb(208,149,40)" rx="2" ry="2" />
<text  x="169.62" y="671.5" ></text>
</g>
<g >
<title>Utils::Tokenize (1 samples, 0.01%)</title><rect x="159.1" y="613" width="0.1" height="15.0" fill="rgb(224,179,38)" rx="2" ry="2" />
<text  x="162.05" y="623.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="160.1" y="261" width="0.1" height="15.0" fill="rgb(211,120,9)" rx="2" ry="2" />
<text  x="163.08" y="271.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (1 samples, 0.01%)</title><rect x="1120.0" y="485" width="0.2" height="15.0" fill="rgb(248,120,9)" rx="2" ry="2" />
<text  x="1123.02" y="495.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1110.3" y="533" width="0.1" height="15.0" fill="rgb(240,42,20)" rx="2" ry="2" />
<text  x="1113.28" y="543.5" ></text>
</g>
<g >
<title>std::move&lt;Drawable*&amp;&gt; (1 samples, 0.01%)</title><rect x="326.4" y="661" width="0.2" height="15.0" fill="rgb(217,27,3)" rx="2" ry="2" />
<text  x="329.44" y="671.5" ></text>
</g>
<g >
<title>Input::UiSource::Update (17 samples, 0.18%)</title><rect x="478.9" y="789" width="2.2" height="15.0" fill="rgb(242,169,43)" rx="2" ry="2" />
<text  x="481.95" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::vector (2 samples, 0.02%)</title><rect x="1096.7" y="709" width="0.3" height="15.0" fill="rgb(248,21,27)" rx="2" ry="2" />
<text  x="1099.70" y="719.5" ></text>
</g>
<g >
<title>consume_skb (1 samples, 0.01%)</title><rect x="1127.3" y="469" width="0.2" height="15.0" fill="rgb(236,53,5)" rx="2" ry="2" />
<text  x="1130.33" y="479.5" ></text>
</g>
<g >
<title>Game_Picture::UpdateSprite (1 samples, 0.01%)</title><rect x="79.7" y="901" width="0.1" height="15.0" fill="rgb(238,132,23)" rx="2" ry="2" />
<text  x="82.72" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::get (2 samples, 0.02%)</title><rect x="1169.8" y="773" width="0.2" height="15.0" fill="rgb(210,174,6)" rx="2" ry="2" />
<text  x="1172.75" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (6 samples, 0.07%)</title><rect x="155.7" y="549" width="0.8" height="15.0" fill="rgb(245,9,53)" rx="2" ry="2" />
<text  x="158.72" y="559.5" ></text>
</g>
<g >
<title>AudioSeCache::Decode (3 samples, 0.03%)</title><rect x="161.0" y="613" width="0.4" height="15.0" fill="rgb(233,97,10)" rx="2" ry="2" />
<text  x="163.98" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (1 samples, 0.01%)</title><rect x="937.8" y="453" width="0.1" height="15.0" fill="rgb(218,48,23)" rx="2" ry="2" />
<text  x="940.77" y="463.5" ></text>
</g>
<g >
<title>Transition::IsActive (1 samples, 0.01%)</title><rect x="178.9" y="837" width="0.1" height="15.0" fill="rgb(212,55,36)" rx="2" ry="2" />
<text  x="181.92" y="847.5" ></text>
</g>
<g >
<title>blk_finish_plug (1 samples, 0.01%)</title><rect x="156.2" y="197" width="0.2" height="15.0" fill="rgb(238,178,7)" rx="2" ry="2" />
<text  x="159.23" y="207.5" ></text>
</g>
<g >
<title>Opacity::IsTransparent (3 samples, 0.03%)</title><rect x="265.3" y="709" width="0.4" height="15.0" fill="rgb(242,170,24)" rx="2" ry="2" />
<text  x="268.30" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SavePicture, std::allocator&lt;RPG::SavePicture&gt; &gt;::size (1 samples, 0.01%)</title><rect x="933.5" y="597" width="0.2" height="15.0" fill="rgb(240,14,27)" rx="2" ry="2" />
<text  x="936.55" y="607.5" ></text>
</g>
<g >
<title>__interceptor_free (2 samples, 0.02%)</title><rect x="226.1" y="661" width="0.2" height="15.0" fill="rgb(222,15,44)" rx="2" ry="2" />
<text  x="229.08" y="671.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="155.5" y="805" width="0.2" height="15.0" fill="rgb(226,48,14)" rx="2" ry="2" />
<text  x="158.47" y="815.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="998.5" y="549" width="0.2" height="15.0" fill="rgb(235,169,54)" rx="2" ry="2" />
<text  x="1001.52" y="559.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="1148.7" y="693" width="0.2" height="15.0" fill="rgb(241,138,9)" rx="2" ry="2" />
<text  x="1151.73" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;AudioDecoder, std::default_delete&lt;AudioDecoder&gt; &gt;::~unique_ptr (1 samples, 0.01%)</title><rect x="167.1" y="501" width="0.2" height="15.0" fill="rgb(248,58,6)" rx="2" ry="2" />
<text  x="170.13" y="511.5" ></text>
</g>
<g >
<title>std::swap&lt;std::_Any_data&gt; (1 samples, 0.01%)</title><rect x="944.1" y="485" width="0.1" height="15.0" fill="rgb(208,9,47)" rx="2" ry="2" />
<text  x="947.05" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (24 samples, 0.26%)</title><rect x="872.9" y="645" width="3.1" height="15.0" fill="rgb(228,201,3)" rx="2" ry="2" />
<text  x="875.92" y="655.5" ></text>
</g>
<g >
<title>AudioSeCache::Create (1 samples, 0.01%)</title><rect x="936.0" y="469" width="0.1" height="15.0" fill="rgb(232,66,12)" rx="2" ry="2" />
<text  x="938.98" y="479.5" ></text>
</g>
<g >
<title>__GI__IO_fread (1 samples, 0.01%)</title><rect x="160.8" y="565" width="0.2" height="15.0" fill="rgb(247,80,26)" rx="2" ry="2" />
<text  x="163.85" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::destroy&lt;Bitmap&gt; (4 samples, 0.04%)</title><rect x="165.5" y="453" width="0.5" height="15.0" fill="rgb(243,163,28)" rx="2" ry="2" />
<text  x="168.46" y="463.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (17 samples, 0.18%)</title><rect x="156.5" y="549" width="2.2" height="15.0" fill="rgb(241,131,30)" rx="2" ry="2" />
<text  x="159.49" y="559.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="175.8" y="725" width="0.3" height="15.0" fill="rgb(221,59,23)" rx="2" ry="2" />
<text  x="178.84" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (4 samples, 0.04%)</title><rect x="165.5" y="485" width="0.5" height="15.0" fill="rgb(250,98,20)" rx="2" ry="2" />
<text  x="168.46" y="495.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="1108.9" y="661" width="0.4" height="15.0" fill="rgb(227,29,47)" rx="2" ry="2" />
<text  x="1111.87" y="671.5" ></text>
</g>
<g >
<title>Bitmap::Create (6 samples, 0.07%)</title><rect x="155.7" y="677" width="0.8" height="15.0" fill="rgb(250,135,26)" rx="2" ry="2" />
<text  x="158.72" y="687.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="1148.6" y="725" width="0.1" height="15.0" fill="rgb(233,205,53)" rx="2" ry="2" />
<text  x="1151.60" y="735.5" ></text>
</g>
<g >
<title>Sprite::Refresh (25 samples, 0.27%)</title><rect x="228.1" y="741" width="3.2" height="15.0" fill="rgb(254,131,18)" rx="2" ry="2" />
<text  x="231.13" y="751.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="954.2" y="357" width="0.1" height="15.0" fill="rgb(211,162,39)" rx="2" ry="2" />
<text  x="957.18" y="367.5" ></text>
</g>
<g >
<title>Window_Base::Update (7 samples, 0.08%)</title><rect x="1108.9" y="757" width="0.9" height="15.0" fill="rgb(235,6,28)" rx="2" ry="2" />
<text  x="1111.87" y="767.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="166.5" y="581" width="0.1" height="15.0" fill="rgb(211,217,31)" rx="2" ry="2" />
<text  x="169.49" y="591.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="1130.9" y="757" width="0.4" height="15.0" fill="rgb(250,47,15)" rx="2" ry="2" />
<text  x="1133.92" y="767.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="900.7" y="629" width="0.2" height="15.0" fill="rgb(216,72,4)" rx="2" ry="2" />
<text  x="903.74" y="639.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.01%)</title><rect x="174.9" y="181" width="0.2" height="15.0" fill="rgb(242,217,5)" rx="2" ry="2" />
<text  x="177.95" y="191.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="940.0" y="357" width="0.1" height="15.0" fill="rgb(238,75,21)" rx="2" ry="2" />
<text  x="942.95" y="367.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="121.8" y="725" width="0.1" height="15.0" fill="rgb(240,79,37)" rx="2" ry="2" />
<text  x="124.76" y="735.5" ></text>
</g>
<g >
<title>__tls_get_addr (3 samples, 0.03%)</title><rect x="276.3" y="661" width="0.4" height="15.0" fill="rgb(243,115,48)" rx="2" ry="2" />
<text  x="279.32" y="671.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="884.6" y="613" width="0.1" height="15.0" fill="rgb(232,211,6)" rx="2" ry="2" />
<text  x="887.59" y="623.5" ></text>
</g>
<g >
<title>std::swap&lt;Bitmap*&gt; (2 samples, 0.02%)</title><rect x="960.3" y="613" width="0.3" height="15.0" fill="rgb(232,109,44)" rx="2" ry="2" />
<text  x="963.33" y="623.5" ></text>
</g>
<g >
<title>xhci_giveback_urb_in_irq.isra.43 (1 samples, 0.01%)</title><rect x="998.5" y="437" width="0.2" height="15.0" fill="rgb(225,16,12)" rx="2" ry="2" />
<text  x="1001.52" y="447.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandPlaySound (13 samples, 0.14%)</title><rect x="167.3" y="773" width="1.6" height="15.0" fill="rgb(235,159,36)" rx="2" ry="2" />
<text  x="170.26" y="783.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16 samples, 0.17%)</title><rect x="1128.7" y="757" width="2.1" height="15.0" fill="rgb(243,15,27)" rx="2" ry="2" />
<text  x="1131.74" y="767.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (31 samples, 0.34%)</title><rect x="161.4" y="405" width="3.9" height="15.0" fill="rgb(233,182,13)" rx="2" ry="2" />
<text  x="164.36" y="415.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (2 samples, 0.02%)</title><rect x="175.6" y="789" width="0.2" height="15.0" fill="rgb(235,198,29)" rx="2" ry="2" />
<text  x="178.59" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (3 samples, 0.03%)</title><rect x="159.2" y="533" width="0.4" height="15.0" fill="rgb(210,12,18)" rx="2" ry="2" />
<text  x="162.18" y="543.5" ></text>
</g>
<g >
<title>Scene::IsAsyncPending (142 samples, 1.54%)</title><rect x="1170.1" y="805" width="18.2" height="15.0" fill="rgb(220,15,32)" rx="2" ry="2" />
<text  x="1173.13" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="949.4" y="309" width="0.2" height="15.0" fill="rgb(229,114,42)" rx="2" ry="2" />
<text  x="952.44" y="319.5" ></text>
</g>
<g >
<title>sock_recvmsg (1 samples, 0.01%)</title><rect x="1120.0" y="501" width="0.2" height="15.0" fill="rgb(246,31,21)" rx="2" ry="2" />
<text  x="1123.02" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, Sprite*, std::default_delete&lt;Sprite&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="926.2" y="581" width="0.2" height="15.0" fill="rgb(219,115,7)" rx="2" ry="2" />
<text  x="929.24" y="591.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.01%)</title><rect x="548.7" y="613" width="0.1" height="15.0" fill="rgb(216,37,31)" rx="2" ry="2" />
<text  x="551.67" y="623.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (9 samples, 0.10%)</title><rect x="475.9" y="757" width="1.1" height="15.0" fill="rgb(209,81,20)" rx="2" ry="2" />
<text  x="478.87" y="767.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="828.6" y="629" width="0.1" height="15.0" fill="rgb(227,126,20)" rx="2" ry="2" />
<text  x="831.58" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (40 samples, 0.43%)</title><rect x="161.4" y="645" width="5.1" height="15.0" fill="rgb(219,177,46)" rx="2" ry="2" />
<text  x="164.36" y="655.5" ></text>
</g>
<g >
<title>Game_Picture::GetData (4 samples, 0.04%)</title><rect x="932.5" y="645" width="0.5" height="15.0" fill="rgb(227,149,21)" rx="2" ry="2" />
<text  x="935.52" y="655.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="168.9" y="613" width="0.2" height="15.0" fill="rgb(238,78,49)" rx="2" ry="2" />
<text  x="171.92" y="623.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="1111.6" y="565" width="0.1" height="15.0" fill="rgb(239,228,37)" rx="2" ry="2" />
<text  x="1114.56" y="575.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (6 samples, 0.07%)</title><rect x="155.7" y="533" width="0.8" height="15.0" fill="rgb(220,72,13)" rx="2" ry="2" />
<text  x="158.72" y="543.5" ></text>
</g>
<g >
<title>std::__weak_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__weak_count (1 samples, 0.01%)</title><rect x="957.3" y="437" width="0.1" height="15.0" fill="rgb(220,195,10)" rx="2" ry="2" />
<text  x="960.26" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="989.6" y="645" width="0.1" height="15.0" fill="rgb(207,104,12)" rx="2" ry="2" />
<text  x="992.55" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul, 2ul, 3ul&gt; (2 samples, 0.02%)</title><rect x="159.7" y="677" width="0.3" height="15.0" fill="rgb(238,146,13)" rx="2" ry="2" />
<text  x="162.69" y="687.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="548.7" y="677" width="0.1" height="15.0" fill="rgb(219,185,31)" rx="2" ry="2" />
<text  x="551.67" y="687.5" ></text>
</g>
<g >
<title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (1 samples, 0.01%)</title><rect x="181.5" y="693" width="0.1" height="15.0" fill="rgb(238,205,39)" rx="2" ry="2" />
<text  x="184.48" y="703.5" ></text>
</g>
<g >
<title>Game_Player::UpdateSelfMovement (7 samples, 0.08%)</title><rect x="1098.4" y="725" width="0.9" height="15.0" fill="rgb(225,200,38)" rx="2" ry="2" />
<text  x="1101.36" y="735.5" ></text>
</g>
<g >
<title>activate_task (6 samples, 0.07%)</title><rect x="72.2" y="709" width="0.7" height="15.0" fill="rgb(249,51,21)" rx="2" ry="2" />
<text  x="75.16" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="1107.2" y="725" width="0.1" height="15.0" fill="rgb(246,184,46)" rx="2" ry="2" />
<text  x="1110.21" y="735.5" ></text>
</g>
<g >
<title>Game_Map::Update (8 samples, 0.09%)</title><rect x="159.7" y="901" width="1.0" height="15.0" fill="rgb(218,155,47)" rx="2" ry="2" />
<text  x="162.69" y="911.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Bitmap, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (2 samples, 0.02%)</title><rect x="99.6" y="901" width="0.2" height="15.0" fill="rgb(213,0,7)" rx="2" ry="2" />
<text  x="102.59" y="911.5" ></text>
</g>
<g >
<title>Bitmap::width (1 samples, 0.01%)</title><rect x="959.8" y="613" width="0.1" height="15.0" fill="rgb(238,43,22)" rx="2" ry="2" />
<text  x="962.82" y="623.5" ></text>
</g>
<g >
<title>AsyncHandler::IsFilePending (6 samples, 0.07%)</title><rect x="1106.4" y="725" width="0.8" height="15.0" fill="rgb(250,60,17)" rx="2" ry="2" />
<text  x="1109.44" y="735.5" ></text>
</g>
<g >
<title>calloc (1 samples, 0.01%)</title><rect x="229.7" y="485" width="0.1" height="15.0" fill="rgb(239,112,50)" rx="2" ry="2" />
<text  x="232.67" y="495.5" ></text>
</g>
<g >
<title>Game_Picture::RequestPictureSprite (3 samples, 0.03%)</title><rect x="159.2" y="821" width="0.4" height="15.0" fill="rgb(238,17,47)" rx="2" ry="2" />
<text  x="162.18" y="831.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (6 samples, 0.07%)</title><rect x="160.0" y="693" width="0.7" height="15.0" fill="rgb(247,97,37)" rx="2" ry="2" />
<text  x="162.95" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (154 samples, 1.67%)</title><rect x="985.3" y="661" width="19.8" height="15.0" fill="rgb(207,46,18)" rx="2" ry="2" />
<text  x="988.32" y="671.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="168.9" y="581" width="0.2" height="15.0" fill="rgb(239,188,19)" rx="2" ry="2" />
<text  x="171.92" y="591.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (1 samples, 0.01%)</title><rect x="957.6" y="309" width="0.2" height="15.0" fill="rgb(226,84,12)" rx="2" ry="2" />
<text  x="960.64" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;::operator-- (1 samples, 0.01%)</title><rect x="169.7" y="469" width="0.1" height="15.0" fill="rgb(253,37,22)" rx="2" ry="2" />
<text  x="172.69" y="479.5" ></text>
</g>
<g >
<title>Game_Interpreter::Update (4,761 samples, 51.71%)</title><rect x="484.5" y="725" width="610.1" height="15.0" fill="rgb(232,146,46)" rx="2" ry="2" />
<text  x="487.46" y="735.5" >Game_Interpreter::Update</text>
</g>
<g >
<title>__gnu_cxx::__ops::__pred_iter&lt;MessageOverlay::IsAnyMessageVisible() const::{lambda(MessageOverlayItem const&amp;)#1}&gt; (1 samples, 0.01%)</title><rect x="180.5" y="693" width="0.1" height="15.0" fill="rgb(247,43,48)" rx="2" ry="2" />
<text  x="183.46" y="703.5" ></text>
</g>
<g >
<title>__GI___getpid (2 samples, 0.02%)</title><rect x="477.0" y="709" width="0.3" height="15.0" fill="rgb(247,206,14)" rx="2" ry="2" />
<text  x="480.03" y="719.5" ></text>
</g>
<g >
<title>kthread_blkcg (1 samples, 0.01%)</title><rect x="73.6" y="789" width="0.1" height="15.0" fill="rgb(209,90,25)" rx="2" ry="2" />
<text  x="76.57" y="799.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="1189.9" y="869" width="0.1" height="15.0" fill="rgb(217,217,17)" rx="2" ry="2" />
<text  x="1192.87" y="879.5" ></text>
</g>
<g >
<title>std::tuple&lt;FileRequestResult*&amp;&amp;&gt;::tuple&lt;FileRequestResult*, true&gt; (1 samples, 0.01%)</title><rect x="956.7" y="517" width="0.2" height="15.0" fill="rgb(238,25,30)" rx="2" ry="2" />
<text  x="959.74" y="527.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="159.6" y="469" width="0.1" height="15.0" fill="rgb(236,11,48)" rx="2" ry="2" />
<text  x="162.57" y="479.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (73 samples, 0.79%)</title><rect x="61.4" y="757" width="9.3" height="15.0" fill="rgb(243,157,3)" rx="2" ry="2" />
<text  x="64.39" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt;::clear (2 samples, 0.02%)</title><rect x="957.1" y="581" width="0.3" height="15.0" fill="rgb(205,204,23)" rx="2" ry="2" />
<text  x="960.13" y="591.5" ></text>
</g>
<g >
<title>__gthread_active_p (1 samples, 0.01%)</title><rect x="174.4" y="901" width="0.2" height="15.0" fill="rgb(239,11,2)" rx="2" ry="2" />
<text  x="177.43" y="911.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (1 samples, 0.01%)</title><rect x="189.4" y="677" width="0.2" height="15.0" fill="rgb(224,26,53)" rx="2" ry="2" />
<text  x="192.43" y="687.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;int, (__gnu_cxx::_Lock_policy)2&gt;::~__weak_ptr (1 samples, 0.01%)</title><rect x="957.3" y="453" width="0.1" height="15.0" fill="rgb(228,193,25)" rx="2" ry="2" />
<text  x="960.26" y="463.5" ></text>
</g>
<g >
<title>AudioResampler::FillBuffer (1 samples, 0.01%)</title><rect x="159.7" y="549" width="0.1" height="15.0" fill="rgb(217,74,12)" rx="2" ry="2" />
<text  x="162.69" y="559.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (40 samples, 0.43%)</title><rect x="161.4" y="581" width="5.1" height="15.0" fill="rgb(211,99,22)" rx="2" ry="2" />
<text  x="164.36" y="591.5" ></text>
</g>
<g >
<title>wp_page_copy (3 samples, 0.03%)</title><rect x="165.6" y="245" width="0.4" height="15.0" fill="rgb(222,86,43)" rx="2" ry="2" />
<text  x="168.59" y="255.5" ></text>
</g>
<g >
<title>Bitmap::GetRect (1 samples, 0.01%)</title><rect x="159.2" y="405" width="0.1" height="15.0" fill="rgb(234,190,44)" rx="2" ry="2" />
<text  x="162.18" y="415.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="940.5" y="565" width="0.1" height="15.0" fill="rgb(229,100,40)" rx="2" ry="2" />
<text  x="943.47" y="575.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="175.8" y="805" width="0.3" height="15.0" fill="rgb(207,68,0)" rx="2" ry="2" />
<text  x="178.84" y="815.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (1 samples, 0.01%)</title><rect x="189.4" y="661" width="0.2" height="15.0" fill="rgb(205,42,44)" rx="2" ry="2" />
<text  x="192.43" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="961.7" y="597" width="0.2" height="15.0" fill="rgb(250,185,36)" rx="2" ry="2" />
<text  x="964.74" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator++ (1 samples, 0.01%)</title><rect x="948.8" y="357" width="0.1" height="15.0" fill="rgb(223,72,29)" rx="2" ry="2" />
<text  x="951.80" y="367.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="942.6" y="453" width="0.2" height="15.0" fill="rgb(220,87,18)" rx="2" ry="2" />
<text  x="945.64" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="952.5" y="325" width="0.1" height="15.0" fill="rgb(224,87,35)" rx="2" ry="2" />
<text  x="955.51" y="335.5" ></text>
</g>
<g >
<title>FileFinder::MakePath (6 samples, 0.07%)</title><rect x="948.3" y="389" width="0.8" height="15.0" fill="rgb(253,6,7)" rx="2" ry="2" />
<text  x="951.28" y="399.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 0.01%)</title><rect x="229.7" y="293" width="0.1" height="15.0" fill="rgb(229,66,0)" rx="2" ry="2" />
<text  x="232.67" y="303.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (1 samples, 0.01%)</title><rect x="476.9" y="677" width="0.1" height="15.0" fill="rgb(229,140,14)" rx="2" ry="2" />
<text  x="479.90" y="687.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (50 samples, 0.54%)</title><rect x="469.1" y="677" width="6.4" height="15.0" fill="rgb(239,203,4)" rx="2" ry="2" />
<text  x="472.08" y="687.5" ></text>
</g>
<g >
<title>ret_from_intr (2 samples, 0.02%)</title><rect x="74.0" y="917" width="0.2" height="15.0" fill="rgb(251,217,24)" rx="2" ry="2" />
<text  x="76.95" y="927.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="943.0" y="405" width="0.2" height="15.0" fill="rgb(212,221,34)" rx="2" ry="2" />
<text  x="946.03" y="415.5" ></text>
</g>
<g >
<title>poll_freewait (1 samples, 0.01%)</title><rect x="60.8" y="853" width="0.1" height="15.0" fill="rgb(244,141,44)" rx="2" ry="2" />
<text  x="63.75" y="863.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr (37 samples, 0.40%)</title><rect x="297.6" y="725" width="4.7" height="15.0" fill="rgb(227,36,25)" rx="2" ry="2" />
<text  x="300.60" y="735.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1128.4" y="725" width="0.1" height="15.0" fill="rgb(235,137,5)" rx="2" ry="2" />
<text  x="1131.35" y="735.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul, 2ul, 3ul&gt; (1 samples, 0.01%)</title><rect x="169.1" y="661" width="0.1" height="15.0" fill="rgb(246,94,42)" rx="2" ry="2" />
<text  x="172.05" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (9 samples, 0.10%)</title><rect x="832.6" y="645" width="1.1" height="15.0" fill="rgb(237,197,7)" rx="2" ry="2" />
<text  x="835.55" y="655.5" ></text>
</g>
<g >
<title>Game_Switches_Class::Get (4 samples, 0.04%)</title><rect x="483.4" y="709" width="0.5" height="15.0" fill="rgb(231,215,48)" rx="2" ry="2" />
<text  x="486.44" y="719.5" ></text>
</g>
<g >
<title>MakeFlashColor (1 samples, 0.01%)</title><rect x="1103.1" y="693" width="0.1" height="15.0" fill="rgb(245,200,29)" rx="2" ry="2" />
<text  x="1106.11" y="703.5" ></text>
</g>
<g >
<title>__ext4_iget (1 samples, 0.01%)</title><rect x="155.5" y="309" width="0.1" height="15.0" fill="rgb(245,12,51)" rx="2" ry="2" />
<text  x="158.47" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;::push_back (2 samples, 0.02%)</title><rect x="155.0" y="821" width="0.2" height="15.0" fill="rgb(213,207,47)" rx="2" ry="2" />
<text  x="157.95" y="831.5" ></text>
</g>
<g >
<title>Scene_Map::UpdateStage1 (6 samples, 0.07%)</title><rect x="169.1" y="901" width="0.7" height="15.0" fill="rgb(208,47,5)" rx="2" ry="2" />
<text  x="172.05" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (1 samples, 0.01%)</title><rect x="159.6" y="645" width="0.1" height="15.0" fill="rgb(240,186,24)" rx="2" ry="2" />
<text  x="162.57" y="655.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="159.6" y="405" width="0.1" height="15.0" fill="rgb(249,81,30)" rx="2" ry="2" />
<text  x="162.57" y="415.5" ></text>
</g>
<g >
<title>pthread_getspecific@plt (1 samples, 0.01%)</title><rect x="189.7" y="629" width="0.1" height="15.0" fill="rgb(226,157,7)" rx="2" ry="2" />
<text  x="192.69" y="639.5" ></text>
</g>
<g >
<title>__vma_adjust (1 samples, 0.01%)</title><rect x="161.1" y="245" width="0.1" height="15.0" fill="rgb(231,51,29)" rx="2" ry="2" />
<text  x="164.10" y="255.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.01%)</title><rect x="942.8" y="453" width="0.1" height="15.0" fill="rgb(231,218,23)" rx="2" ry="2" />
<text  x="945.77" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;*, std::vector&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt; &gt;::base (1 samples, 0.01%)</title><rect x="946.9" y="565" width="0.1" height="15.0" fill="rgb(229,199,51)" rx="2" ry="2" />
<text  x="949.87" y="575.5" ></text>
</g>
<g >
<title>[libGLX.so.0.0.0] (5 samples, 0.05%)</title><rect x="477.0" y="741" width="0.7" height="15.0" fill="rgb(247,10,18)" rx="2" ry="2" />
<text  x="480.03" y="751.5" ></text>
</g>
<g >
<title>Bitmap::GetTileOpacity (49 samples, 0.53%)</title><rect x="287.1" y="725" width="6.3" height="15.0" fill="rgb(226,161,31)" rx="2" ry="2" />
<text  x="290.09" y="735.5" ></text>
</g>
<g >
<title>RPG::SaveEventExecState::operator= (4 samples, 0.04%)</title><rect x="1097.0" y="725" width="0.5" height="15.0" fill="rgb(229,116,43)" rx="2" ry="2" />
<text  x="1099.95" y="735.5" ></text>
</g>
<g >
<title>do_nanosleep (14 samples, 0.15%)</title><rect x="1128.9" y="693" width="1.8" height="15.0" fill="rgb(230,192,51)" rx="2" ry="2" />
<text  x="1131.87" y="703.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.01%)</title><rect x="1082.3" y="597" width="0.2" height="15.0" fill="rgb(233,101,20)" rx="2" ry="2" />
<text  x="1085.34" y="607.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.01%)</title><rect x="954.3" y="357" width="0.1" height="15.0" fill="rgb(228,27,38)" rx="2" ry="2" />
<text  x="957.31" y="367.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="177.3" y="805" width="0.1" height="15.0" fill="rgb(211,219,41)" rx="2" ry="2" />
<text  x="180.25" y="815.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="1189.9" y="757" width="0.1" height="15.0" fill="rgb(219,39,13)" rx="2" ry="2" />
<text  x="1192.87" y="767.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.01%)</title><rect x="941.7" y="581" width="0.2" height="15.0" fill="rgb(227,43,12)" rx="2" ry="2" />
<text  x="944.75" y="591.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.8" y="405" width="0.2" height="15.0" fill="rgb(243,109,9)" rx="2" ry="2" />
<text  x="178.84" y="415.5" ></text>
</g>
<g >
<title>std::set&lt;short, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::end (1 samples, 0.01%)</title><rect x="322.8" y="757" width="0.2" height="15.0" fill="rgb(215,84,27)" rx="2" ry="2" />
<text  x="325.85" y="767.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, Transition*, std::default_delete&lt;Transition&gt; &gt; (1 samples, 0.01%)</title><rect x="179.2" y="789" width="0.1" height="15.0" fill="rgb(230,229,19)" rx="2" ry="2" />
<text  x="182.18" y="799.5" ></text>
</g>
<g >
<title>FileFinder::FindImage (2 samples, 0.02%)</title><rect x="160.5" y="533" width="0.2" height="15.0" fill="rgb(210,196,21)" rx="2" ry="2" />
<text  x="163.46" y="543.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (1 samples, 0.01%)</title><rect x="1122.2" y="629" width="0.1" height="15.0" fill="rgb(241,15,12)" rx="2" ry="2" />
<text  x="1125.20" y="639.5" ></text>
</g>
<g >
<title>TilemapLayer::SetOx (2 samples, 0.02%)</title><rect x="1108.5" y="741" width="0.2" height="15.0" fill="rgb(249,147,41)" rx="2" ry="2" />
<text  x="1111.49" y="751.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator() (1 samples, 0.01%)</title><rect x="103.7" y="901" width="0.1" height="15.0" fill="rgb(228,143,31)" rx="2" ry="2" />
<text  x="106.69" y="911.5" ></text>
</g>
<g >
<title>_IO_new_do_write (1 samples, 0.01%)</title><rect x="935.9" y="357" width="0.1" height="15.0" fill="rgb(205,194,7)" rx="2" ry="2" />
<text  x="938.85" y="367.5" ></text>
</g>
<g >
<title>FileRequestAsync::Bind (11 samples, 0.12%)</title><rect x="942.8" y="613" width="1.4" height="15.0" fill="rgb(230,76,22)" rx="2" ry="2" />
<text  x="945.77" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="1189.9" y="901" width="0.1" height="15.0" fill="rgb(243,180,42)" rx="2" ry="2" />
<text  x="1192.87" y="911.5" ></text>
</g>
<g >
<title>Sprite::SetX (1 samples, 0.01%)</title><rect x="1103.4" y="709" width="0.1" height="15.0" fill="rgb(228,115,38)" rx="2" ry="2" />
<text  x="1106.36" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (30 samples, 0.33%)</title><rect x="298.5" y="693" width="3.8" height="15.0" fill="rgb(218,174,16)" rx="2" ry="2" />
<text  x="301.50" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator!= (2 samples, 0.02%)</title><rect x="93.9" y="901" width="0.3" height="15.0" fill="rgb(216,35,18)" rx="2" ry="2" />
<text  x="96.95" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="174.9" y="357" width="0.2" height="15.0" fill="rgb(241,91,54)" rx="2" ry="2" />
<text  x="177.95" y="367.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Scene, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (26 samples, 0.28%)</title><rect x="1079.1" y="693" width="3.4" height="15.0" fill="rgb(250,210,10)" rx="2" ry="2" />
<text  x="1082.14" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (1 samples, 0.01%)</title><rect x="927.3" y="661" width="0.1" height="15.0" fill="rgb(227,225,13)" rx="2" ry="2" />
<text  x="930.27" y="671.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 0.01%)</title><rect x="161.1" y="341" width="0.1" height="15.0" fill="rgb(234,95,27)" rx="2" ry="2" />
<text  x="164.10" y="351.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="1122.7" y="677" width="0.3" height="15.0" fill="rgb(226,116,11)" rx="2" ry="2" />
<text  x="1125.71" y="687.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="167.1" y="453" width="0.2" height="15.0" fill="rgb(243,180,18)" rx="2" ry="2" />
<text  x="170.13" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="935.9" y="277" width="0.1" height="15.0" fill="rgb(227,144,5)" rx="2" ry="2" />
<text  x="938.85" y="287.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="323.6" y="661" width="0.4" height="15.0" fill="rgb(221,63,43)" rx="2" ry="2" />
<text  x="326.62" y="671.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char&gt; (1 samples, 0.01%)</title><rect x="159.6" y="501" width="0.1" height="15.0" fill="rgb(209,189,54)" rx="2" ry="2" />
<text  x="162.57" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="155.5" y="421" width="0.2" height="15.0" fill="rgb(231,38,15)" rx="2" ry="2" />
<text  x="158.47" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (2 samples, 0.02%)</title><rect x="299.8" y="677" width="0.2" height="15.0" fill="rgb(207,9,3)" rx="2" ry="2" />
<text  x="302.78" y="687.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="935.7" y="565" width="0.2" height="15.0" fill="rgb(230,205,0)" rx="2" ry="2" />
<text  x="938.72" y="575.5" ></text>
</g>
<g >
<title>Graphics::RemoveDrawable (2 samples, 0.02%)</title><rect x="166.2" y="501" width="0.3" height="15.0" fill="rgb(244,54,44)" rx="2" ry="2" />
<text  x="169.23" y="511.5" ></text>
</g>
<g >
<title>irq_exit (3 samples, 0.03%)</title><rect x="762.2" y="613" width="0.4" height="15.0" fill="rgb(208,226,12)" rx="2" ry="2" />
<text  x="765.19" y="623.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (31 samples, 0.34%)</title><rect x="161.4" y="517" width="3.9" height="15.0" fill="rgb(253,98,9)" rx="2" ry="2" />
<text  x="164.36" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (17 samples, 0.18%)</title><rect x="300.2" y="661" width="2.1" height="15.0" fill="rgb(209,149,28)" rx="2" ry="2" />
<text  x="303.16" y="671.5" ></text>
</g>
<g >
<title>i40e_clean_rx_irq (1 samples, 0.01%)</title><rect x="121.8" y="645" width="0.1" height="15.0" fill="rgb(217,148,4)" rx="2" ry="2" />
<text  x="124.76" y="655.5" ></text>
</g>
<g >
<title>task_tick_fair (1 samples, 0.01%)</title><rect x="942.8" y="437" width="0.1" height="15.0" fill="rgb(231,218,12)" rx="2" ry="2" />
<text  x="945.77" y="447.5" ></text>
</g>
<g >
<title>default_wake_function (7 samples, 0.08%)</title><rect x="72.0" y="757" width="0.9" height="15.0" fill="rgb(245,101,10)" rx="2" ry="2" />
<text  x="75.03" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (1 samples, 0.01%)</title><rect x="901.0" y="645" width="0.1" height="15.0" fill="rgb(209,131,34)" rx="2" ry="2" />
<text  x="903.99" y="655.5" ></text>
</g>
<g >
<title>SdlMixerAudio::SE_Play (4 samples, 0.04%)</title><rect x="160.8" y="629" width="0.6" height="15.0" fill="rgb(239,189,4)" rx="2" ry="2" />
<text  x="163.85" y="639.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (3 samples, 0.03%)</title><rect x="762.2" y="645" width="0.4" height="15.0" fill="rgb(234,58,11)" rx="2" ry="2" />
<text  x="765.19" y="655.5" ></text>
</g>
<g >
<title>__fdget (1 samples, 0.01%)</title><rect x="1120.4" y="501" width="0.1" height="15.0" fill="rgb(214,78,26)" rx="2" ry="2" />
<text  x="1123.41" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;::_M_data (1 samples, 0.01%)</title><rect x="155.3" y="565" width="0.2" height="15.0" fill="rgb(247,165,13)" rx="2" ry="2" />
<text  x="158.34" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::get (1 samples, 0.01%)</title><rect x="104.5" y="901" width="0.1" height="15.0" fill="rgb(245,18,31)" rx="2" ry="2" />
<text  x="107.46" y="911.5" ></text>
</g>
<g >
<title>netif_receive_skb_internal (1 samples, 0.01%)</title><rect x="121.8" y="613" width="0.1" height="15.0" fill="rgb(218,135,29)" rx="2" ry="2" />
<text  x="124.76" y="623.5" ></text>
</g>
<g >
<title>Game_Picture::Move (10 samples, 0.11%)</title><rect x="932.4" y="661" width="1.3" height="15.0" fill="rgb(254,85,44)" rx="2" ry="2" />
<text  x="935.39" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="951.5" y="405" width="0.1" height="15.0" fill="rgb(206,11,36)" rx="2" ry="2" />
<text  x="954.49" y="415.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="59.6" y="853" width="0.1" height="15.0" fill="rgb(210,213,18)" rx="2" ry="2" />
<text  x="62.60" y="863.5" ></text>
</g>
<g >
<title>std::none_of&lt;std::_Deque_iterator&lt;MessageOverlayItem, MessageOverlayItem const&amp;, MessageOverlayItem const*&gt;, MessageOverlay::IsAnyMessageVisible() const::{lambda(MessageOverlayItem const&amp;)#1}&gt; (1 samples, 0.01%)</title><rect x="478.1" y="741" width="0.1" height="15.0" fill="rgb(244,69,28)" rx="2" ry="2" />
<text  x="481.05" y="751.5" ></text>
</g>
<g >
<title>handle_tx_event (1 samples, 0.01%)</title><rect x="889.8" y="485" width="0.2" height="15.0" fill="rgb(253,77,4)" rx="2" ry="2" />
<text  x="892.84" y="495.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (1 samples, 0.01%)</title><rect x="949.7" y="389" width="0.1" height="15.0" fill="rgb(208,220,27)" rx="2" ry="2" />
<text  x="952.69" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="943.9" y="341" width="0.2" height="15.0" fill="rgb(235,109,43)" rx="2" ry="2" />
<text  x="946.93" y="351.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (84 samples, 0.91%)</title><rect x="946.6" y="597" width="10.8" height="15.0" fill="rgb(225,31,29)" rx="2" ry="2" />
<text  x="949.62" y="607.5" ></text>
</g>
<g >
<title>std::move&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="166.2" y="453" width="0.3" height="15.0" fill="rgb(253,1,32)" rx="2" ry="2" />
<text  x="169.23" y="463.5" ></text>
</g>
<g >
<title>std::__chunk_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (15 samples, 0.16%)</title><rect x="324.8" y="709" width="1.9" height="15.0" fill="rgb(218,213,40)" rx="2" ry="2" />
<text  x="327.77" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__iter_equals_val&lt;Drawable* const&gt; (2 samples, 0.02%)</title><rect x="954.8" y="325" width="0.3" height="15.0" fill="rgb(223,129,13)" rx="2" ry="2" />
<text  x="957.82" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="1107.2" y="693" width="0.1" height="15.0" fill="rgb(232,10,18)" rx="2" ry="2" />
<text  x="1110.21" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="1111.2" y="597" width="0.1" height="15.0" fill="rgb(211,86,30)" rx="2" ry="2" />
<text  x="1114.18" y="607.5" ></text>
</g>
<g >
<title>std::get_temporary_buffer&lt;Drawable*&gt; (2 samples, 0.02%)</title><rect x="181.0" y="725" width="0.2" height="15.0" fill="rgb(246,6,11)" rx="2" ry="2" />
<text  x="183.97" y="735.5" ></text>
</g>
<g >
<title>std::any_of&lt;std::_Deque_iterator&lt;MessageOverlayItem, MessageOverlayItem const&amp;, MessageOverlayItem const*&gt;, MessageOverlay::IsAnyMessageVisible() const::{lambda(MessageOverlayItem const&amp;)#1}&gt; (1 samples, 0.01%)</title><rect x="478.1" y="757" width="0.1" height="15.0" fill="rgb(207,19,22)" rx="2" ry="2" />
<text  x="481.05" y="767.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.04%)</title><rect x="958.3" y="485" width="0.5" height="15.0" fill="rgb(225,143,9)" rx="2" ry="2" />
<text  x="961.28" y="495.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="70.7" y="661" width="0.2" height="15.0" fill="rgb(226,53,40)" rx="2" ry="2" />
<text  x="73.75" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::cbegin (1 samples, 0.01%)</title><rect x="110.2" y="901" width="0.2" height="15.0" fill="rgb(237,202,44)" rx="2" ry="2" />
<text  x="113.22" y="911.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="1119.6" y="357" width="0.2" height="15.0" fill="rgb(215,90,43)" rx="2" ry="2" />
<text  x="1122.64" y="367.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color, std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt; (1 samples, 0.01%)</title><rect x="229.9" y="677" width="0.2" height="15.0" fill="rgb(214,128,0)" rx="2" ry="2" />
<text  x="232.93" y="687.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.01%)</title><rect x="177.0" y="501" width="0.1" height="15.0" fill="rgb(207,15,52)" rx="2" ry="2" />
<text  x="180.00" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::size (3 samples, 0.03%)</title><rect x="483.6" y="693" width="0.3" height="15.0" fill="rgb(230,107,33)" rx="2" ry="2" />
<text  x="486.56" y="703.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (2 samples, 0.02%)</title><rect x="159.7" y="741" width="0.3" height="15.0" fill="rgb(247,151,27)" rx="2" ry="2" />
<text  x="162.69" y="751.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (1 samples, 0.01%)</title><rect x="227.7" y="693" width="0.2" height="15.0" fill="rgb(217,207,27)" rx="2" ry="2" />
<text  x="230.75" y="703.5" ></text>
</g>
<g >
<title>usb_submit_urb (1 samples, 0.01%)</title><rect x="582.5" y="405" width="0.1" height="15.0" fill="rgb(212,223,51)" rx="2" ry="2" />
<text  x="585.51" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.01%)</title><rect x="1110.0" y="613" width="0.2" height="15.0" fill="rgb(217,192,47)" rx="2" ry="2" />
<text  x="1113.03" y="623.5" ></text>
</g>
<g >
<title>xhci_td_cleanup (1 samples, 0.01%)</title><rect x="74.1" y="741" width="0.1" height="15.0" fill="rgb(248,114,54)" rx="2" ry="2" />
<text  x="77.08" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt;::erase (4 samples, 0.04%)</title><rect x="955.5" y="341" width="0.5" height="15.0" fill="rgb(220,24,47)" rx="2" ry="2" />
<text  x="958.46" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (1 samples, 0.01%)</title><rect x="951.5" y="341" width="0.1" height="15.0" fill="rgb(209,39,43)" rx="2" ry="2" />
<text  x="954.49" y="351.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="1004.9" y="581" width="0.2" height="15.0" fill="rgb(223,123,46)" rx="2" ry="2" />
<text  x="1007.93" y="591.5" ></text>
</g>
<g >
<title>std::move&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**&gt; (3 samples, 0.03%)</title><rect x="328.2" y="677" width="0.4" height="15.0" fill="rgb(230,170,5)" rx="2" ry="2" />
<text  x="331.23" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::find (5 samples, 0.05%)</title><rect x="949.1" y="373" width="0.6" height="15.0" fill="rgb(232,108,14)" rx="2" ry="2" />
<text  x="952.05" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::_M_ptr (3 samples, 0.03%)</title><rect x="100.1" y="901" width="0.4" height="15.0" fill="rgb(230,201,16)" rx="2" ry="2" />
<text  x="103.10" y="911.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;int, std::allocator&lt;int&gt;, int&gt; (5 samples, 0.05%)</title><rect x="943.4" y="533" width="0.7" height="15.0" fill="rgb(254,46,50)" rx="2" ry="2" />
<text  x="946.41" y="543.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="229.7" y="469" width="0.1" height="15.0" fill="rgb(239,182,5)" rx="2" ry="2" />
<text  x="232.67" y="479.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.01%)</title><rect x="161.1" y="309" width="0.1" height="15.0" fill="rgb(231,152,21)" rx="2" ry="2" />
<text  x="164.10" y="319.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="166.5" y="485" width="0.1" height="15.0" fill="rgb(239,222,6)" rx="2" ry="2" />
<text  x="169.49" y="495.5" ></text>
</g>
<g >
<title>SDL_RenderCopy (1 samples, 0.01%)</title><rect x="328.6" y="773" width="0.1" height="15.0" fill="rgb(213,225,54)" rx="2" ry="2" />
<text  x="331.61" y="783.5" ></text>
</g>
<g >
<title>handle_edge_irq (2 samples, 0.02%)</title><rect x="74.0" y="869" width="0.2" height="15.0" fill="rgb(244,134,23)" rx="2" ry="2" />
<text  x="76.95" y="879.5" ></text>
</g>
<g >
<title>Output::DebugStr (1 samples, 0.01%)</title><rect x="935.9" y="469" width="0.1" height="15.0" fill="rgb(229,111,46)" rx="2" ry="2" />
<text  x="938.85" y="479.5" ></text>
</g>
<g >
<title>AsyncHandler::RequestFile (26 samples, 0.28%)</title><rect x="939.4" y="629" width="3.4" height="15.0" fill="rgb(209,198,49)" rx="2" ry="2" />
<text  x="942.44" y="639.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (1 samples, 0.01%)</title><rect x="177.3" y="757" width="0.1" height="15.0" fill="rgb(235,209,21)" rx="2" ry="2" />
<text  x="180.25" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.01%)</title><rect x="940.2" y="565" width="0.1" height="15.0" fill="rgb(227,88,11)" rx="2" ry="2" />
<text  x="943.21" y="575.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="828.6" y="597" width="0.1" height="15.0" fill="rgb(225,151,4)" rx="2" ry="2" />
<text  x="831.58" y="607.5" ></text>
</g>
<g >
<title>std::allocator&lt;Bitmap&gt;::allocator (1 samples, 0.01%)</title><rect x="101.1" y="901" width="0.2" height="15.0" fill="rgb(220,193,20)" rx="2" ry="2" />
<text  x="104.12" y="911.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="561.9" y="629" width="0.1" height="15.0" fill="rgb(238,97,51)" rx="2" ry="2" />
<text  x="564.87" y="639.5" ></text>
</g>
<g >
<title>std::make_shared&lt;int, int&gt; (6 samples, 0.07%)</title><rect x="943.3" y="597" width="0.8" height="15.0" fill="rgb(231,228,39)" rx="2" ry="2" />
<text  x="946.29" y="607.5" ></text>
</g>
<g >
<title>Game_Interpreter::KeyInputState::CheckInput (7 samples, 0.08%)</title><rect x="928.9" y="661" width="0.9" height="15.0" fill="rgb(224,204,34)" rx="2" ry="2" />
<text  x="931.93" y="671.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul, 2ul, 3ul&gt; (2 samples, 0.02%)</title><rect x="167.0" y="629" width="0.3" height="15.0" fill="rgb(206,35,38)" rx="2" ry="2" />
<text  x="170.00" y="639.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (330 samples, 3.58%)</title><rect x="962.8" y="677" width="42.3" height="15.0" fill="rgb(211,72,28)" rx="2" ry="2" />
<text  x="965.77" y="687.5" >Gam..</text>
</g>
<g >
<title>Game_Picture::Show (6 samples, 0.07%)</title><rect x="160.0" y="789" width="0.7" height="15.0" fill="rgb(237,200,28)" rx="2" ry="2" />
<text  x="162.95" y="799.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator() (1 samples, 0.01%)</title><rect x="949.4" y="341" width="0.2" height="15.0" fill="rgb(238,52,22)" rx="2" ry="2" />
<text  x="952.44" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Bitmap, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (5 samples, 0.05%)</title><rect x="297.0" y="709" width="0.6" height="15.0" fill="rgb(254,178,40)" rx="2" ry="2" />
<text  x="299.96" y="719.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::~function (1 samples, 0.01%)</title><rect x="957.1" y="469" width="0.2" height="15.0" fill="rgb(215,137,10)" rx="2" ry="2" />
<text  x="960.13" y="479.5" ></text>
</g>
<g >
<title>FileRequestAsync::operator= (1 samples, 0.01%)</title><rect x="941.1" y="613" width="0.1" height="15.0" fill="rgb(207,153,31)" rx="2" ry="2" />
<text  x="944.11" y="623.5" ></text>
</g>
<g >
<title>Game_System::SePlay (2 samples, 0.02%)</title><rect x="167.0" y="741" width="0.3" height="15.0" fill="rgb(241,150,50)" rx="2" ry="2" />
<text  x="170.00" y="751.5" ></text>
</g>
<g >
<title>pixman_transform_point_3d (1 samples, 0.01%)</title><rect x="190.6" y="661" width="0.1" height="15.0" fill="rgb(223,44,51)" rx="2" ry="2" />
<text  x="193.58" y="671.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;Drawable**&gt; (1 samples, 0.01%)</title><rect x="97.8" y="901" width="0.1" height="15.0" fill="rgb(239,22,6)" rx="2" ry="2" />
<text  x="100.79" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (1 samples, 0.01%)</title><rect x="1109.9" y="725" width="0.1" height="15.0" fill="rgb(243,189,16)" rx="2" ry="2" />
<text  x="1112.90" y="735.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 0ul, 3ul&gt;::__less (1 samples, 0.01%)</title><rect x="951.4" y="309" width="0.1" height="15.0" fill="rgb(219,158,30)" rx="2" ry="2" />
<text  x="954.36" y="319.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Bitmap, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (1 samples, 0.01%)</title><rect x="231.5" y="725" width="0.1" height="15.0" fill="rgb(239,79,34)" rx="2" ry="2" />
<text  x="234.47" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (13 samples, 0.14%)</title><rect x="300.5" y="645" width="1.7" height="15.0" fill="rgb(246,9,52)" rx="2" ry="2" />
<text  x="303.55" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (1 samples, 0.01%)</title><rect x="168.9" y="645" width="0.2" height="15.0" fill="rgb(214,17,47)" rx="2" ry="2" />
<text  x="171.92" y="655.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1155.9" y="741" width="0.1" height="15.0" fill="rgb(217,148,31)" rx="2" ry="2" />
<text  x="1158.91" y="751.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (1 samples, 0.01%)</title><rect x="1111.9" y="645" width="0.2" height="15.0" fill="rgb(238,89,9)" rx="2" ry="2" />
<text  x="1114.95" y="655.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="155.2" y="757" width="0.3" height="15.0" fill="rgb(239,21,28)" rx="2" ry="2" />
<text  x="158.21" y="767.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt; (2 samples, 0.02%)</title><rect x="1104.1" y="661" width="0.3" height="15.0" fill="rgb(222,124,6)" rx="2" ry="2" />
<text  x="1107.13" y="671.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (85 samples, 0.92%)</title><rect x="946.5" y="613" width="10.9" height="15.0" fill="rgb(249,42,44)" rx="2" ry="2" />
<text  x="949.49" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::_M_ptr (22 samples, 0.24%)</title><rect x="243.4" y="693" width="2.8" height="15.0" fill="rgb(211,218,21)" rx="2" ry="2" />
<text  x="246.39" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::operator bool (1 samples, 0.01%)</title><rect x="953.0" y="405" width="0.2" height="15.0" fill="rgb(253,198,10)" rx="2" ry="2" />
<text  x="956.03" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;::_Tuple_impl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, void&gt; (1 samples, 0.01%)</title><rect x="1110.5" y="645" width="0.2" height="15.0" fill="rgb(209,116,12)" rx="2" ry="2" />
<text  x="1113.54" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@plt (1 samples, 0.01%)</title><rect x="1126.9" y="709" width="0.2" height="15.0" fill="rgb(206,121,42)" rx="2" ry="2" />
<text  x="1129.94" y="719.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="167.0" y="485" width="0.1" height="15.0" fill="rgb(218,42,37)" rx="2" ry="2" />
<text  x="170.00" y="495.5" ></text>
</g>
<g >
<title>blk_mq_sched_insert_requests (1 samples, 0.01%)</title><rect x="156.2" y="149" width="0.2" height="15.0" fill="rgb(249,131,42)" rx="2" ry="2" />
<text  x="159.23" y="159.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (6 samples, 0.07%)</title><rect x="155.7" y="885" width="0.8" height="15.0" fill="rgb(210,158,44)" rx="2" ry="2" />
<text  x="158.72" y="895.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::empty (1 samples, 0.01%)</title><rect x="939.6" y="597" width="0.1" height="15.0" fill="rgb(230,23,1)" rx="2" ry="2" />
<text  x="942.57" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="323.7" y="629" width="0.3" height="15.0" fill="rgb(221,128,7)" rx="2" ry="2" />
<text  x="326.74" y="639.5" ></text>
</g>
<g >
<title>__libc_start_main (2 samples, 0.02%)</title><rect x="174.8" y="901" width="0.3" height="15.0" fill="rgb(218,208,46)" rx="2" ry="2" />
<text  x="177.82" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.01%)</title><rect x="951.4" y="357" width="0.1" height="15.0" fill="rgb(252,99,41)" rx="2" ry="2" />
<text  x="954.36" y="367.5" ></text>
</g>
<g >
<title>finish_td (1 samples, 0.01%)</title><rect x="74.1" y="757" width="0.1" height="15.0" fill="rgb(231,184,32)" rx="2" ry="2" />
<text  x="77.08" y="767.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (31 samples, 0.34%)</title><rect x="161.4" y="453" width="3.9" height="15.0" fill="rgb(249,48,37)" rx="2" ry="2" />
<text  x="164.36" y="463.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="1082.3" y="613" width="0.2" height="15.0" fill="rgb(229,136,27)" rx="2" ry="2" />
<text  x="1085.34" y="623.5" ></text>
</g>
<g >
<title>Bitmap::Create (31 samples, 0.34%)</title><rect x="161.4" y="549" width="3.9" height="15.0" fill="rgb(218,102,40)" rx="2" ry="2" />
<text  x="164.36" y="559.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="1082.3" y="629" width="0.2" height="15.0" fill="rgb(245,183,13)" rx="2" ry="2" />
<text  x="1085.34" y="639.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (1 samples, 0.01%)</title><rect x="229.7" y="549" width="0.1" height="15.0" fill="rgb(226,15,30)" rx="2" ry="2" />
<text  x="232.67" y="559.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="1148.7" y="709" width="0.2" height="15.0" fill="rgb(233,52,8)" rx="2" ry="2" />
<text  x="1151.73" y="719.5" ></text>
</g>
<g >
<title>retire_playback_urb (1 samples, 0.01%)</title><rect x="70.7" y="501" width="0.2" height="15.0" fill="rgb(236,45,43)" rx="2" ry="2" />
<text  x="73.75" y="511.5" ></text>
</g>
<g >
<title>std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;::operator() (2 samples, 0.02%)</title><rect x="1110.2" y="613" width="0.2" height="15.0" fill="rgb(211,161,9)" rx="2" ry="2" />
<text  x="1113.15" y="623.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="951.4" y="293" width="0.1" height="15.0" fill="rgb(253,107,18)" rx="2" ry="2" />
<text  x="954.36" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (9 samples, 0.10%)</title><rect x="303.6" y="661" width="1.2" height="15.0" fill="rgb(222,45,27)" rx="2" ry="2" />
<text  x="306.62" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="482.2" y="677" width="0.1" height="15.0" fill="rgb(244,99,50)" rx="2" ry="2" />
<text  x="485.15" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="175.8" y="373" width="0.2" height="15.0" fill="rgb(221,196,51)" rx="2" ry="2" />
<text  x="178.84" y="383.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.01%)</title><rect x="998.5" y="389" width="0.2" height="15.0" fill="rgb(210,149,3)" rx="2" ry="2" />
<text  x="1001.52" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="166.5" y="533" width="0.1" height="15.0" fill="rgb(229,204,45)" rx="2" ry="2" />
<text  x="169.49" y="543.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="70.7" y="645" width="0.2" height="15.0" fill="rgb(210,176,27)" rx="2" ry="2" />
<text  x="73.75" y="655.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (2 samples, 0.02%)</title><rect x="167.0" y="613" width="0.3" height="15.0" fill="rgb(210,102,22)" rx="2" ry="2" />
<text  x="170.00" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="175.8" y="389" width="0.2" height="15.0" fill="rgb(229,99,18)" rx="2" ry="2" />
<text  x="178.84" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_M_lower_bound (2 samples, 0.02%)</title><rect x="166.0" y="517" width="0.2" height="15.0" fill="rgb(248,149,21)" rx="2" ry="2" />
<text  x="168.97" y="527.5" ></text>
</g>
<g >
<title>_IO_new_file_overflow (1 samples, 0.01%)</title><rect x="935.9" y="389" width="0.1" height="15.0" fill="rgb(249,217,49)" rx="2" ry="2" />
<text  x="938.85" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="61.0" y="757" width="0.1" height="15.0" fill="rgb(243,10,53)" rx="2" ry="2" />
<text  x="64.01" y="767.5" ></text>
</g>
<g >
<title>AudioSeCache::~AudioSeCache (2 samples, 0.02%)</title><rect x="167.0" y="517" width="0.3" height="15.0" fill="rgb(218,208,39)" rx="2" ry="2" />
<text  x="170.00" y="527.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (5 samples, 0.05%)</title><rect x="169.2" y="645" width="0.6" height="15.0" fill="rgb(244,225,9)" rx="2" ry="2" />
<text  x="172.18" y="655.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, Sprite*, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="92.5" y="901" width="0.2" height="15.0" fill="rgb(251,54,19)" rx="2" ry="2" />
<text  x="95.54" y="911.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (1 samples, 0.01%)</title><rect x="168.9" y="677" width="0.2" height="15.0" fill="rgb(230,186,34)" rx="2" ry="2" />
<text  x="171.92" y="687.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (2 samples, 0.02%)</title><rect x="175.6" y="885" width="0.2" height="15.0" fill="rgb(212,216,6)" rx="2" ry="2" />
<text  x="178.59" y="895.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;int, (__gnu_cxx::_Lock_policy)2&gt;::operator= (7 samples, 0.08%)</title><rect x="957.9" y="613" width="0.9" height="15.0" fill="rgb(236,146,12)" rx="2" ry="2" />
<text  x="960.90" y="623.5" ></text>
</g>
<g >
<title>user_path_at_empty (1 samples, 0.01%)</title><rect x="160.7" y="421" width="0.1" height="15.0" fill="rgb(214,208,11)" rx="2" ry="2" />
<text  x="163.72" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 0.01%)</title><rect x="174.9" y="245" width="0.2" height="15.0" fill="rgb(242,146,0)" rx="2" ry="2" />
<text  x="177.95" y="255.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (270 samples, 2.93%)</title><rect x="191.2" y="661" width="34.6" height="15.0" fill="rgb(210,144,11)" rx="2" ry="2" />
<text  x="194.22" y="671.5" >[l..</text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="175.6" y="693" width="0.1" height="15.0" fill="rgb(220,125,49)" rx="2" ry="2" />
<text  x="178.59" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="650.9" y="645" width="0.2" height="15.0" fill="rgb(241,181,38)" rx="2" ry="2" />
<text  x="653.94" y="655.5" ></text>
</g>
<g >
<title>usb_hcd_get_frame_number (1 samples, 0.01%)</title><rect x="998.5" y="325" width="0.2" height="15.0" fill="rgb(243,171,25)" rx="2" ry="2" />
<text  x="1001.52" y="335.5" ></text>
</g>
<g >
<title>do_writev (1 samples, 0.01%)</title><rect x="1120.9" y="485" width="0.1" height="15.0" fill="rgb(241,56,38)" rx="2" ry="2" />
<text  x="1123.92" y="495.5" ></text>
</g>
<g >
<title>std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;::operator() (1 samples, 0.01%)</title><rect x="1109.4" y="645" width="0.1" height="15.0" fill="rgb(234,21,4)" rx="2" ry="2" />
<text  x="1112.39" y="655.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="998.5" y="613" width="0.2" height="15.0" fill="rgb(211,51,16)" rx="2" ry="2" />
<text  x="1001.52" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator!= (31 samples, 0.34%)</title><rect x="1148.9" y="773" width="3.9" height="15.0" fill="rgb(254,144,18)" rx="2" ry="2" />
<text  x="1151.86" y="783.5" ></text>
</g>
<g >
<title>FileRequestAsync::IsReady (1 samples, 0.01%)</title><rect x="1106.6" y="709" width="0.1" height="15.0" fill="rgb(245,39,32)" rx="2" ry="2" />
<text  x="1109.57" y="719.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="1051.7" y="533" width="0.1" height="15.0" fill="rgb(240,49,25)" rx="2" ry="2" />
<text  x="1054.71" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.01%)</title><rect x="947.0" y="581" width="0.1" height="15.0" fill="rgb(238,203,8)" rx="2" ry="2" />
<text  x="950.00" y="591.5" ></text>
</g>
<g >
<title>ReaderUtil::Normalize (1 samples, 0.01%)</title><rect x="175.7" y="741" width="0.1" height="15.0" fill="rgb(236,33,0)" rx="2" ry="2" />
<text  x="178.72" y="751.5" ></text>
</g>
<g >
<title>sock_recvmsg (1 samples, 0.01%)</title><rect x="1119.6" y="485" width="0.2" height="15.0" fill="rgb(250,58,16)" rx="2" ry="2" />
<text  x="1122.64" y="495.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (6 samples, 0.07%)</title><rect x="155.7" y="645" width="0.8" height="15.0" fill="rgb(228,106,43)" rx="2" ry="2" />
<text  x="158.72" y="655.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, FileRequestAsync, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="1110.0" y="645" width="0.2" height="15.0" fill="rgb(221,120,31)" rx="2" ry="2" />
<text  x="1113.03" y="655.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (18 samples, 0.20%)</title><rect x="156.5" y="693" width="2.3" height="15.0" fill="rgb(228,4,13)" rx="2" ry="2" />
<text  x="159.49" y="703.5" ></text>
</g>
<g >
<title>speex_resampler_init (1 samples, 0.01%)</title><rect x="936.0" y="437" width="0.1" height="15.0" fill="rgb(225,0,19)" rx="2" ry="2" />
<text  x="938.98" y="447.5" ></text>
</g>
<g >
<title>Game_Screen::GetTone (1 samples, 0.01%)</title><rect x="1107.3" y="757" width="0.2" height="15.0" fill="rgb(230,153,5)" rx="2" ry="2" />
<text  x="1110.33" y="767.5" ></text>
</g>
<g >
<title>Scene::IsAsyncPending (2 samples, 0.02%)</title><rect x="482.8" y="805" width="0.3" height="15.0" fill="rgb(250,155,4)" rx="2" ry="2" />
<text  x="485.79" y="815.5" ></text>
</g>
<g >
<title>FileFinder::FindImage (2 samples, 0.02%)</title><rect x="155.0" y="901" width="0.2" height="15.0" fill="rgb(239,128,31)" rx="2" ry="2" />
<text  x="157.95" y="911.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (1 samples, 0.01%)</title><rect x="168.9" y="725" width="0.2" height="15.0" fill="rgb(217,88,30)" rx="2" ry="2" />
<text  x="171.92" y="735.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt; (1 samples, 0.01%)</title><rect x="935.0" y="613" width="0.1" height="15.0" fill="rgb(229,133,33)" rx="2" ry="2" />
<text  x="937.95" y="623.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (1 samples, 0.01%)</title><rect x="1111.2" y="629" width="0.1" height="15.0" fill="rgb(222,121,44)" rx="2" ry="2" />
<text  x="1114.18" y="639.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**&gt; (1 samples, 0.01%)</title><rect x="181.2" y="693" width="0.2" height="15.0" fill="rgb(237,218,9)" rx="2" ry="2" />
<text  x="184.23" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_getpid (1 samples, 0.01%)</title><rect x="59.3" y="885" width="0.2" height="15.0" fill="rgb(247,215,22)" rx="2" ry="2" />
<text  x="62.34" y="895.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="1189.7" y="821" width="0.2" height="15.0" fill="rgb(207,132,4)" rx="2" ry="2" />
<text  x="1192.74" y="831.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.01%)</title><rect x="98.2" y="901" width="0.1" height="15.0" fill="rgb(231,224,53)" rx="2" ry="2" />
<text  x="101.18" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="174.3" y="901" width="0.1" height="15.0" fill="rgb(214,11,24)" rx="2" ry="2" />
<text  x="177.31" y="911.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="1158.9" y="613" width="0.1" height="15.0" fill="rgb(237,127,29)" rx="2" ry="2" />
<text  x="1161.86" y="623.5" ></text>
</g>
<g >
<title>usb_get_current_frame_number (1 samples, 0.01%)</title><rect x="70.7" y="469" width="0.2" height="15.0" fill="rgb(231,162,41)" rx="2" ry="2" />
<text  x="73.75" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="177.3" y="485" width="0.1" height="15.0" fill="rgb(246,204,10)" rx="2" ry="2" />
<text  x="180.25" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.01%)</title><rect x="175.6" y="533" width="0.1" height="15.0" fill="rgb(244,9,20)" rx="2" ry="2" />
<text  x="178.59" y="543.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="1189.7" y="757" width="0.2" height="15.0" fill="rgb(231,195,13)" rx="2" ry="2" />
<text  x="1192.74" y="767.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="174.8" y="453" width="0.3" height="15.0" fill="rgb(237,101,22)" rx="2" ry="2" />
<text  x="177.82" y="463.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (6 samples, 0.07%)</title><rect x="160.0" y="597" width="0.7" height="15.0" fill="rgb(232,77,47)" rx="2" ry="2" />
<text  x="162.95" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_S_value (1 samples, 0.01%)</title><rect x="949.3" y="325" width="0.1" height="15.0" fill="rgb(246,205,28)" rx="2" ry="2" />
<text  x="952.31" y="335.5" ></text>
</g>
<g >
<title>WriteLog (1 samples, 0.01%)</title><rect x="935.9" y="453" width="0.1" height="15.0" fill="rgb(227,3,11)" rx="2" ry="2" />
<text  x="938.85" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="179.2" y="805" width="0.1" height="15.0" fill="rgb(253,36,0)" rx="2" ry="2" />
<text  x="182.18" y="815.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="958.7" y="421" width="0.1" height="15.0" fill="rgb(244,179,48)" rx="2" ry="2" />
<text  x="961.67" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (9 samples, 0.10%)</title><rect x="1121.0" y="549" width="1.2" height="15.0" fill="rgb(238,220,19)" rx="2" ry="2" />
<text  x="1124.05" y="559.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="169.6" y="517" width="0.1" height="15.0" fill="rgb(230,47,23)" rx="2" ry="2" />
<text  x="172.56" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::Variable, std::allocator&lt;RPG::Variable&gt; &gt;::size (1 samples, 0.01%)</title><rect x="932.3" y="629" width="0.1" height="15.0" fill="rgb(206,166,46)" rx="2" ry="2" />
<text  x="935.26" y="639.5" ></text>
</g>
<g >
<title>Game_Player::GetScreenZ (2 samples, 0.02%)</title><rect x="1108.0" y="741" width="0.2" height="15.0" fill="rgb(239,121,51)" rx="2" ry="2" />
<text  x="1110.98" y="751.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.01%)</title><rect x="1111.4" y="645" width="0.2" height="15.0" fill="rgb(211,43,25)" rx="2" ry="2" />
<text  x="1114.44" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (4 samples, 0.04%)</title><rect x="481.9" y="757" width="0.5" height="15.0" fill="rgb(227,127,26)" rx="2" ry="2" />
<text  x="484.90" y="767.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="74.2" y="917" width="0.1" height="15.0" fill="rgb(243,188,52)" rx="2" ry="2" />
<text  x="77.21" y="927.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;*&gt; (1 samples, 0.01%)</title><rect x="91.5" y="901" width="0.1" height="15.0" fill="rgb(254,55,50)" rx="2" ry="2" />
<text  x="94.51" y="911.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="889.8" y="597" width="0.2" height="15.0" fill="rgb(218,160,28)" rx="2" ry="2" />
<text  x="892.84" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (30 samples, 0.33%)</title><rect x="1113.6" y="725" width="3.9" height="15.0" fill="rgb(213,181,13)" rx="2" ry="2" />
<text  x="1116.61" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (7 samples, 0.08%)</title><rect x="872.0" y="645" width="0.9" height="15.0" fill="rgb(230,186,24)" rx="2" ry="2" />
<text  x="875.03" y="655.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="166.2" y="357" width="0.3" height="15.0" fill="rgb(205,222,5)" rx="2" ry="2" />
<text  x="169.23" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="1111.2" y="581" width="0.1" height="15.0" fill="rgb(215,229,44)" rx="2" ry="2" />
<text  x="1114.18" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (1 samples, 0.01%)</title><rect x="1005.8" y="629" width="0.2" height="15.0" fill="rgb(213,104,2)" rx="2" ry="2" />
<text  x="1008.83" y="639.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (2 samples, 0.02%)</title><rect x="155.2" y="741" width="0.3" height="15.0" fill="rgb(248,13,7)" rx="2" ry="2" />
<text  x="158.21" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (1 samples, 0.01%)</title><rect x="169.7" y="485" width="0.1" height="15.0" fill="rgb(224,2,0)" rx="2" ry="2" />
<text  x="172.69" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;AudioSeData, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (1 samples, 0.01%)</title><rect x="936.1" y="453" width="0.1" height="15.0" fill="rgb(233,147,33)" rx="2" ry="2" />
<text  x="939.11" y="463.5" ></text>
</g>
<g >
<title>Sprite::~Sprite (14 samples, 0.15%)</title><rect x="954.7" y="389" width="1.8" height="15.0" fill="rgb(230,52,1)" rx="2" ry="2" />
<text  x="957.69" y="399.5" ></text>
</g>
<g >
<title>__interceptor_fclose (4 samples, 0.04%)</title><rect x="160.0" y="373" width="0.5" height="15.0" fill="rgb(240,193,18)" rx="2" ry="2" />
<text  x="162.95" y="383.5" ></text>
</g>
<g >
<title>xhci_msi_irq (2 samples, 0.02%)</title><rect x="74.0" y="805" width="0.2" height="15.0" fill="rgb(235,147,19)" rx="2" ry="2" />
<text  x="76.95" y="815.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="177.3" y="821" width="0.1" height="15.0" fill="rgb(229,194,38)" rx="2" ry="2" />
<text  x="180.25" y="831.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt; &gt;::_M_invoke (1 samples, 0.01%)</title><rect x="169.1" y="693" width="0.1" height="15.0" fill="rgb(249,2,44)" rx="2" ry="2" />
<text  x="172.05" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (5 samples, 0.05%)</title><rect x="1084.4" y="709" width="0.6" height="15.0" fill="rgb(246,219,2)" rx="2" ry="2" />
<text  x="1087.39" y="719.5" ></text>
</g>
<g >
<title>Game_Picture::RequestPictureSprite (18 samples, 0.20%)</title><rect x="156.5" y="869" width="2.3" height="15.0" fill="rgb(213,76,19)" rx="2" ry="2" />
<text  x="159.49" y="879.5" ></text>
</g>
<g >
<title>do_filp_open (1 samples, 0.01%)</title><rect x="155.5" y="357" width="0.1" height="15.0" fill="rgb(222,189,37)" rx="2" ry="2" />
<text  x="158.47" y="367.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="582.5" y="309" width="0.1" height="15.0" fill="rgb(238,142,16)" rx="2" ry="2" />
<text  x="585.51" y="319.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="161.1" y="405" width="0.3" height="15.0" fill="rgb(224,221,24)" rx="2" ry="2" />
<text  x="164.10" y="415.5" ></text>
</g>
<g >
<title>Scene::MainFunction (1 samples, 0.01%)</title><rect x="166.9" y="869" width="0.1" height="15.0" fill="rgb(218,116,52)" rx="2" ry="2" />
<text  x="169.87" y="879.5" ></text>
</g>
<g >
<title>__fdget (1 samples, 0.01%)</title><rect x="60.2" y="853" width="0.2" height="15.0" fill="rgb(232,192,50)" rx="2" ry="2" />
<text  x="63.24" y="863.5" ></text>
</g>
<g >
<title>Game_Picture::Show (3 samples, 0.03%)</title><rect x="159.2" y="837" width="0.4" height="15.0" fill="rgb(225,15,1)" rx="2" ry="2" />
<text  x="162.18" y="847.5" ></text>
</g>
<g >
<title>std::__merge_sort_loop&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (7 samples, 0.08%)</title><rect x="327.7" y="709" width="0.9" height="15.0" fill="rgb(236,77,47)" rx="2" ry="2" />
<text  x="330.72" y="719.5" ></text>
</g>
<g >
<title>Game_System::SePlay (2 samples, 0.02%)</title><rect x="166.6" y="901" width="0.3" height="15.0" fill="rgb(223,84,38)" rx="2" ry="2" />
<text  x="169.62" y="911.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (5 samples, 0.05%)</title><rect x="169.2" y="693" width="0.6" height="15.0" fill="rgb(214,117,48)" rx="2" ry="2" />
<text  x="172.18" y="703.5" ></text>
</g>
<g >
<title>Sprite::BlitScreenIntern (357 samples, 3.88%)</title><rect x="182.4" y="741" width="45.7" height="15.0" fill="rgb(214,110,2)" rx="2" ry="2" />
<text  x="185.38" y="751.5" >Spri..</text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Scene, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (2 samples, 0.02%)</title><rect x="1094.9" y="725" width="0.3" height="15.0" fill="rgb(228,136,52)" rx="2" ry="2" />
<text  x="1097.90" y="735.5" ></text>
</g>
<g >
<title>pixman_region32_fini (1 samples, 0.01%)</title><rect x="276.7" y="693" width="0.1" height="15.0" fill="rgb(214,114,43)" rx="2" ry="2" />
<text  x="279.71" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="155.5" y="645" width="0.2" height="15.0" fill="rgb(232,216,25)" rx="2" ry="2" />
<text  x="158.47" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_writev (1 samples, 0.01%)</title><rect x="1120.9" y="501" width="0.1" height="15.0" fill="rgb(228,29,11)" rx="2" ry="2" />
<text  x="1123.92" y="511.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (71 samples, 0.77%)</title><rect x="947.6" y="485" width="9.1" height="15.0" fill="rgb(236,225,6)" rx="2" ry="2" />
<text  x="950.64" y="495.5" ></text>
</g>
<g >
<title>irq_entries_start (1 samples, 0.01%)</title><rect x="1189.1" y="917" width="0.1" height="15.0" fill="rgb(231,127,41)" rx="2" ry="2" />
<text  x="1192.10" y="927.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (40 samples, 0.43%)</title><rect x="161.4" y="741" width="5.1" height="15.0" fill="rgb(238,61,15)" rx="2" ry="2" />
<text  x="164.36" y="751.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandShowPicture (1 samples, 0.01%)</title><rect x="168.9" y="773" width="0.2" height="15.0" fill="rgb(242,152,52)" rx="2" ry="2" />
<text  x="171.92" y="783.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="177.0" y="901" width="0.1" height="15.0" fill="rgb(207,3,12)" rx="2" ry="2" />
<text  x="180.00" y="911.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="957.6" y="549" width="0.2" height="15.0" fill="rgb(231,217,54)" rx="2" ry="2" />
<text  x="960.64" y="559.5" ></text>
</g>
<g >
<title>Weather::Draw (1 samples, 0.01%)</title><rect x="323.2" y="773" width="0.2" height="15.0" fill="rgb(220,60,26)" rx="2" ry="2" />
<text  x="326.23" y="783.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt;::_Tuple_impl&lt;std::shared_ptr&lt;Bitmap&gt; const&amp;, Rect const&amp;, bool&amp;, bool&amp;, Tone const&amp;, Color const&amp;, void&gt; (1 samples, 0.01%)</title><rect x="230.1" y="693" width="0.1" height="15.0" fill="rgb(248,193,26)" rx="2" ry="2" />
<text  x="233.06" y="703.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.01%)</title><rect x="582.5" y="421" width="0.1" height="15.0" fill="rgb(233,85,25)" rx="2" ry="2" />
<text  x="585.51" y="431.5" ></text>
</g>
<g >
<title>Game_Screen::GetPicture (5 samples, 0.05%)</title><rect x="933.7" y="661" width="0.6" height="15.0" fill="rgb(235,157,49)" rx="2" ry="2" />
<text  x="936.67" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (39 samples, 0.42%)</title><rect x="249.4" y="709" width="5.0" height="15.0" fill="rgb(236,114,7)" rx="2" ry="2" />
<text  x="252.41" y="719.5" ></text>
</g>
<g >
<title>ip_route_input_rcu (1 samples, 0.01%)</title><rect x="121.8" y="501" width="0.1" height="15.0" fill="rgb(240,97,22)" rx="2" ry="2" />
<text  x="124.76" y="511.5" ></text>
</g>
<g >
<title>Graphics::Draw (2,321 samples, 25.21%)</title><rect x="180.2" y="805" width="297.5" height="15.0" fill="rgb(228,89,17)" rx="2" ry="2" />
<text  x="183.20" y="815.5" >Graphics::Draw</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="942.8" y="549" width="0.1" height="15.0" fill="rgb(251,117,54)" rx="2" ry="2" />
<text  x="945.77" y="559.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="1129.0" y="661" width="0.1" height="15.0" fill="rgb(243,92,7)" rx="2" ry="2" />
<text  x="1131.99" y="671.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.01%)</title><rect x="159.6" y="421" width="0.1" height="15.0" fill="rgb(213,129,54)" rx="2" ry="2" />
<text  x="162.57" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.0" y="725" width="0.1" height="15.0" fill="rgb(209,165,36)" rx="2" ry="2" />
<text  x="180.00" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (4 samples, 0.04%)</title><rect x="660.3" y="613" width="0.5" height="15.0" fill="rgb(208,109,8)" rx="2" ry="2" />
<text  x="663.30" y="623.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.01%)</title><rect x="167.1" y="405" width="0.2" height="15.0" fill="rgb(246,93,44)" rx="2" ry="2" />
<text  x="170.13" y="415.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (14 samples, 0.15%)</title><rect x="303.0" y="693" width="1.8" height="15.0" fill="rgb(233,5,21)" rx="2" ry="2" />
<text  x="305.98" y="703.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="1059.0" y="613" width="0.1" height="15.0" fill="rgb(227,62,3)" rx="2" ry="2" />
<text  x="1062.02" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="1110.3" y="549" width="0.1" height="15.0" fill="rgb(221,146,32)" rx="2" ry="2" />
<text  x="1113.28" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;MessageOverlayItem, std::allocator&lt;MessageOverlayItem&gt; &gt;::cend (1 samples, 0.01%)</title><rect x="102.3" y="901" width="0.1" height="15.0" fill="rgb(220,30,29)" rx="2" ry="2" />
<text  x="105.28" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Interpreter_Map, std::default_delete&lt;Game_Interpreter_Map&gt; &gt;::operator bool (1 samples, 0.01%)</title><rect x="104.2" y="901" width="0.1" height="15.0" fill="rgb(223,128,13)" rx="2" ry="2" />
<text  x="107.20" y="911.5" ></text>
</g>
<g >
<title>Transition::Update (1 samples, 0.01%)</title><rect x="83.1" y="901" width="0.1" height="15.0" fill="rgb(249,75,8)" rx="2" ry="2" />
<text  x="86.05" y="911.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.01%)</title><rect x="90.4" y="901" width="0.1" height="15.0" fill="rgb(250,184,47)" rx="2" ry="2" />
<text  x="93.36" y="911.5" ></text>
</g>
<g >
<title>Bitmap::Blit (55 samples, 0.60%)</title><rect x="183.0" y="709" width="7.1" height="15.0" fill="rgb(205,217,13)" rx="2" ry="2" />
<text  x="186.02" y="719.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (40 samples, 0.43%)</title><rect x="161.4" y="677" width="5.1" height="15.0" fill="rgb(247,91,47)" rx="2" ry="2" />
<text  x="164.36" y="687.5" ></text>
</g>
<g >
<title>__update_load_avg_cfs_rq (2 samples, 0.02%)</title><rect x="806.2" y="533" width="0.2" height="15.0" fill="rgb(221,192,46)" rx="2" ry="2" />
<text  x="809.15" y="543.5" ></text>
</g>
<g >
<title>icu_63::UnicodeString::UnicodeString (1 samples, 0.01%)</title><rect x="160.6" y="501" width="0.1" height="15.0" fill="rgb(240,211,49)" rx="2" ry="2" />
<text  x="163.59" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2 samples, 0.02%)</title><rect x="93.6" y="901" width="0.2" height="15.0" fill="rgb(239,223,10)" rx="2" ry="2" />
<text  x="96.56" y="911.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;int, (__gnu_cxx::_Lock_policy)2&gt;::operator= (1 samples, 0.01%)</title><rect x="99.2" y="901" width="0.1" height="15.0" fill="rgb(235,229,25)" rx="2" ry="2" />
<text  x="102.20" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt; (28 samples, 0.30%)</title><rect x="989.7" y="645" width="3.6" height="15.0" fill="rgb(230,61,26)" rx="2" ry="2" />
<text  x="992.68" y="655.5" ></text>
</g>
<g >
<title>do_IRQ (2 samples, 0.02%)</title><rect x="74.0" y="901" width="0.2" height="15.0" fill="rgb(223,27,39)" rx="2" ry="2" />
<text  x="76.95" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="161.1" y="421" width="0.3" height="15.0" fill="rgb(217,92,23)" rx="2" ry="2" />
<text  x="164.10" y="431.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (54 samples, 0.59%)</title><rect x="468.6" y="725" width="6.9" height="15.0" fill="rgb(239,74,54)" rx="2" ry="2" />
<text  x="471.57" y="735.5" ></text>
</g>
<g >
<title>scsi_mq_get_budget (1 samples, 0.01%)</title><rect x="156.2" y="53" width="0.2" height="15.0" fill="rgb(215,166,38)" rx="2" ry="2" />
<text  x="159.23" y="63.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (2 samples, 0.02%)</title><rect x="156.2" y="229" width="0.3" height="15.0" fill="rgb(230,12,23)" rx="2" ry="2" />
<text  x="159.23" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (48 samples, 0.52%)</title><rect x="651.1" y="645" width="6.1" height="15.0" fill="rgb(240,32,37)" rx="2" ry="2" />
<text  x="654.07" y="655.5" ></text>
</g>
<g >
<title>vma_merge (1 samples, 0.01%)</title><rect x="161.1" y="261" width="0.1" height="15.0" fill="rgb(216,125,53)" rx="2" ry="2" />
<text  x="164.10" y="271.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (72 samples, 0.78%)</title><rect x="61.5" y="709" width="9.2" height="15.0" fill="rgb(228,15,12)" rx="2" ry="2" />
<text  x="64.52" y="719.5" ></text>
</g>
<g >
<title>finish_task_switch (23 samples, 0.25%)</title><rect x="1123.4" y="597" width="2.9" height="15.0" fill="rgb(250,39,4)" rx="2" ry="2" />
<text  x="1126.36" y="607.5" ></text>
</g>
<g >
<title>do_wp_page (1 samples, 0.01%)</title><rect x="160.1" y="245" width="0.1" height="15.0" fill="rgb(243,166,25)" rx="2" ry="2" />
<text  x="163.08" y="255.5" ></text>
</g>
<g >
<title>posix_get_monotonic_raw (2 samples, 0.02%)</title><rect x="1116.7" y="677" width="0.2" height="15.0" fill="rgb(225,89,36)" rx="2" ry="2" />
<text  x="1119.69" y="687.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="561.9" y="549" width="0.1" height="15.0" fill="rgb(207,161,50)" rx="2" ry="2" />
<text  x="564.87" y="559.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="998.5" y="565" width="0.2" height="15.0" fill="rgb(226,84,31)" rx="2" ry="2" />
<text  x="1001.52" y="575.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, FileRequestAsync, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::find (5 samples, 0.05%)</title><rect x="949.1" y="389" width="0.6" height="15.0" fill="rgb(224,180,9)" rx="2" ry="2" />
<text  x="952.05" y="399.5" ></text>
</g>
<g >
<title>TilemapLayer::DrawTile (353 samples, 3.83%)</title><rect x="259.5" y="741" width="45.3" height="15.0" fill="rgb(246,101,46)" rx="2" ry="2" />
<text  x="262.53" y="751.5" >Tile..</text>
</g>
<g >
<title>up_read (1 samples, 0.01%)</title><rect x="73.7" y="869" width="0.1" height="15.0" fill="rgb(216,97,45)" rx="2" ry="2" />
<text  x="76.70" y="879.5" ></text>
</g>
<g >
<title>AudioSeCache::~AudioSeCache (1 samples, 0.01%)</title><rect x="169.1" y="549" width="0.1" height="15.0" fill="rgb(238,125,54)" rx="2" ry="2" />
<text  x="172.05" y="559.5" ></text>
</g>
<g >
<title>memmove (2 samples, 0.02%)</title><rect x="166.2" y="389" width="0.3" height="15.0" fill="rgb(248,163,50)" rx="2" ry="2" />
<text  x="169.23" y="399.5" ></text>
</g>
<g >
<title>ret_from_intr (2 samples, 0.02%)</title><rect x="468.3" y="709" width="0.3" height="15.0" fill="rgb(236,151,33)" rx="2" ry="2" />
<text  x="471.31" y="719.5" ></text>
</g>
<g >
<title>__gthread_active_p (1 samples, 0.01%)</title><rect x="302.2" y="645" width="0.1" height="15.0" fill="rgb(223,141,48)" rx="2" ry="2" />
<text  x="305.21" y="655.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (5 samples, 0.05%)</title><rect x="160.7" y="677" width="0.7" height="15.0" fill="rgb(251,144,18)" rx="2" ry="2" />
<text  x="163.72" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Game_Event*, std::vector&lt;Game_Event, std::allocator&lt;Game_Event&gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="115.4" y="901" width="0.2" height="15.0" fill="rgb(237,48,36)" rx="2" ry="2" />
<text  x="118.35" y="911.5" ></text>
</g>
<g >
<title>Tone::Tone (1 samples, 0.01%)</title><rect x="952.4" y="405" width="0.1" height="15.0" fill="rgb(235,99,8)" rx="2" ry="2" />
<text  x="955.39" y="415.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="155.2" y="773" width="0.3" height="15.0" fill="rgb(236,43,3)" rx="2" ry="2" />
<text  x="158.21" y="783.5" ></text>
</g>
<g >
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.01%)</title><rect x="170.7" y="773" width="0.1" height="15.0" fill="rgb(251,101,35)" rx="2" ry="2" />
<text  x="173.72" y="783.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="482.2" y="709" width="0.2" height="15.0" fill="rgb(240,146,29)" rx="2" ry="2" />
<text  x="485.15" y="719.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator() (3 samples, 0.03%)</title><rect x="942.3" y="565" width="0.3" height="15.0" fill="rgb(219,96,24)" rx="2" ry="2" />
<text  x="945.26" y="575.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="1119.1" y="565" width="0.2" height="15.0" fill="rgb(211,197,6)" rx="2" ry="2" />
<text  x="1122.13" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Bitmap, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (2 samples, 0.02%)</title><rect x="1103.9" y="709" width="0.2" height="15.0" fill="rgb(223,50,37)" rx="2" ry="2" />
<text  x="1106.87" y="719.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt;&amp;&gt; (4 samples, 0.04%)</title><rect x="942.8" y="597" width="0.5" height="15.0" fill="rgb(231,25,54)" rx="2" ry="2" />
<text  x="945.77" y="607.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="806.4" y="549" width="0.1" height="15.0" fill="rgb(254,174,44)" rx="2" ry="2" />
<text  x="809.41" y="559.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="166.5" y="725" width="0.1" height="15.0" fill="rgb(224,125,15)" rx="2" ry="2" />
<text  x="169.49" y="735.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.7" y="645" width="0.1" height="15.0" fill="rgb(247,157,38)" rx="2" ry="2" />
<text  x="178.72" y="655.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (18 samples, 0.20%)</title><rect x="156.5" y="853" width="2.3" height="15.0" fill="rgb(214,173,30)" rx="2" ry="2" />
<text  x="159.49" y="863.5" ></text>
</g>
<g >
<title>std::bitset&lt;36ul&gt;::reference::reference (1 samples, 0.01%)</title><rect x="481.1" y="773" width="0.2" height="15.0" fill="rgb(244,173,35)" rx="2" ry="2" />
<text  x="484.13" y="783.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (6 samples, 0.07%)</title><rect x="155.7" y="469" width="0.8" height="15.0" fill="rgb(219,41,15)" rx="2" ry="2" />
<text  x="158.72" y="479.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (1 samples, 0.01%)</title><rect x="1120.9" y="597" width="0.1" height="15.0" fill="rgb(227,139,2)" rx="2" ry="2" />
<text  x="1123.92" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::operator+ (1 samples, 0.01%)</title><rect x="955.7" y="309" width="0.1" height="15.0" fill="rgb(253,141,53)" rx="2" ry="2" />
<text  x="958.72" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.01%)</title><rect x="935.7" y="597" width="0.2" height="15.0" fill="rgb(254,81,26)" rx="2" ry="2" />
<text  x="938.72" y="607.5" ></text>
</g>
<g >
<title>vfs_read (5 samples, 0.05%)</title><rect x="155.8" y="357" width="0.7" height="15.0" fill="rgb(241,19,45)" rx="2" ry="2" />
<text  x="158.85" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="961.9" y="629" width="0.1" height="15.0" fill="rgb(206,2,3)" rx="2" ry="2" />
<text  x="964.87" y="639.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (3 samples, 0.03%)</title><rect x="475.5" y="741" width="0.4" height="15.0" fill="rgb(254,138,19)" rx="2" ry="2" />
<text  x="478.49" y="751.5" ></text>
</g>
<g >
<title>ImageBMP::ReadBMP (11 samples, 0.12%)</title><rect x="163.9" y="373" width="1.4" height="15.0" fill="rgb(231,186,27)" rx="2" ry="2" />
<text  x="166.92" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (6 samples, 0.07%)</title><rect x="122.7" y="869" width="0.7" height="15.0" fill="rgb(221,219,29)" rx="2" ry="2" />
<text  x="125.66" y="879.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Scene, (__gnu_cxx::_Lock_policy)2&gt;::get (1 samples, 0.01%)</title><rect x="116.8" y="901" width="0.1" height="15.0" fill="rgb(222,174,12)" rx="2" ry="2" />
<text  x="119.76" y="911.5" ></text>
</g>
<g >
<title>Transition::IsActive (1 samples, 0.01%)</title><rect x="179.3" y="821" width="0.1" height="15.0" fill="rgb(253,44,27)" rx="2" ry="2" />
<text  x="182.30" y="831.5" ></text>
</g>
<g >
<title>Opacity::IsOpaque (1 samples, 0.01%)</title><rect x="191.1" y="677" width="0.1" height="15.0" fill="rgb(209,21,37)" rx="2" ry="2" />
<text  x="194.09" y="687.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (1 samples, 0.01%)</title><rect x="475.2" y="517" width="0.2" height="15.0" fill="rgb(213,91,19)" rx="2" ry="2" />
<text  x="478.23" y="527.5" ></text>
</g>
<g >
<title>Game_Picture::Show (5 samples, 0.05%)</title><rect x="169.2" y="773" width="0.6" height="15.0" fill="rgb(244,100,3)" rx="2" ry="2" />
<text  x="172.18" y="783.5" ></text>
</g>
<g >
<title>Game_Variables_Class::Get (1 samples, 0.01%)</title><rect x="961.2" y="645" width="0.2" height="15.0" fill="rgb(236,180,33)" rx="2" ry="2" />
<text  x="964.23" y="655.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.01%)</title><rect x="582.5" y="437" width="0.1" height="15.0" fill="rgb(235,155,39)" rx="2" ry="2" />
<text  x="585.51" y="447.5" ></text>
</g>
<g >
<title>Game_System::OnSeReady (1 samples, 0.01%)</title><rect x="159.6" y="693" width="0.1" height="15.0" fill="rgb(229,229,22)" rx="2" ry="2" />
<text  x="162.57" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::operator bool (2 samples, 0.02%)</title><rect x="105.9" y="901" width="0.2" height="15.0" fill="rgb(236,21,46)" rx="2" ry="2" />
<text  x="108.87" y="911.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.02%)</title><rect x="953.9" y="341" width="0.3" height="15.0" fill="rgb(254,49,10)" rx="2" ry="2" />
<text  x="956.92" y="351.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (2 samples, 0.02%)</title><rect x="173.8" y="853" width="0.2" height="15.0" fill="rgb(230,130,5)" rx="2" ry="2" />
<text  x="176.79" y="863.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (2 samples, 0.02%)</title><rect x="155.5" y="725" width="0.2" height="15.0" fill="rgb(246,62,0)" rx="2" ry="2" />
<text  x="158.47" y="735.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="1051.7" y="629" width="0.1" height="15.0" fill="rgb(220,184,28)" rx="2" ry="2" />
<text  x="1054.71" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="105.7" y="901" width="0.2" height="15.0" fill="rgb(229,71,7)" rx="2" ry="2" />
<text  x="108.74" y="911.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 0.01%)</title><rect x="175.8" y="341" width="0.2" height="15.0" fill="rgb(211,152,21)" rx="2" ry="2" />
<text  x="178.84" y="351.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="74.9" y="773" width="0.1" height="15.0" fill="rgb(241,186,2)" rx="2" ry="2" />
<text  x="77.85" y="783.5" ></text>
</g>
<g >
<title>__GI__IO_file_xsgetn (1 samples, 0.01%)</title><rect x="160.8" y="549" width="0.2" height="15.0" fill="rgb(247,100,17)" rx="2" ry="2" />
<text  x="163.85" y="559.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (3 samples, 0.03%)</title><rect x="169.2" y="501" width="0.4" height="15.0" fill="rgb(219,14,1)" rx="2" ry="2" />
<text  x="172.18" y="511.5" ></text>
</g>
<g >
<title>Game_Map::Parallax::GetName[abi:cxx11] (1 samples, 0.01%)</title><rect x="1107.2" y="757" width="0.1" height="15.0" fill="rgb(243,31,2)" rx="2" ry="2" />
<text  x="1110.21" y="767.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 0.01%)</title><rect x="161.1" y="325" width="0.1" height="15.0" fill="rgb(232,177,52)" rx="2" ry="2" />
<text  x="164.10" y="335.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Bitmap, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (1 samples, 0.01%)</title><rect x="1104.0" y="693" width="0.1" height="15.0" fill="rgb(206,106,50)" rx="2" ry="2" />
<text  x="1107.00" y="703.5" ></text>
</g>
<g >
<title>Sprite::Refresh (1 samples, 0.01%)</title><rect x="82.3" y="901" width="0.1" height="15.0" fill="rgb(227,75,26)" rx="2" ry="2" />
<text  x="85.28" y="911.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (13 samples, 0.14%)</title><rect x="252.4" y="661" width="1.6" height="15.0" fill="rgb(218,104,22)" rx="2" ry="2" />
<text  x="255.36" y="671.5" ></text>
</g>
<g >
<title>vfs_statx (1 samples, 0.01%)</title><rect x="160.7" y="437" width="0.1" height="15.0" fill="rgb(238,114,14)" rx="2" ry="2" />
<text  x="163.72" y="447.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (1 samples, 0.01%)</title><rect x="159.6" y="789" width="0.1" height="15.0" fill="rgb(216,156,47)" rx="2" ry="2" />
<text  x="162.57" y="799.5" ></text>
</g>
<g >
<title>dequeue_task_fair (1 samples, 0.01%)</title><rect x="1129.3" y="629" width="0.1" height="15.0" fill="rgb(249,110,22)" rx="2" ry="2" />
<text  x="1132.25" y="639.5" ></text>
</g>
<g >
<title>AsyncHandler::IsImportantFilePending (6 samples, 0.07%)</title><rect x="1106.4" y="741" width="0.8" height="15.0" fill="rgb(241,104,12)" rx="2" ry="2" />
<text  x="1109.44" y="751.5" ></text>
</g>
<g >
<title>Game_Map::UpdateCommonEvents (14 samples, 0.15%)</title><rect x="167.3" y="853" width="1.8" height="15.0" fill="rgb(205,83,53)" rx="2" ry="2" />
<text  x="170.26" y="863.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.03%)</title><rect x="165.6" y="277" width="0.4" height="15.0" fill="rgb(250,157,9)" rx="2" ry="2" />
<text  x="168.59" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::get (1 samples, 0.01%)</title><rect x="179.4" y="805" width="0.2" height="15.0" fill="rgb(246,80,2)" rx="2" ry="2" />
<text  x="182.43" y="815.5" ></text>
</g>
<g >
<title>std::_Temporary_buffer&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable*&gt;::~_Temporary_buffer (1 samples, 0.01%)</title><rect x="324.1" y="741" width="0.2" height="15.0" fill="rgb(208,33,26)" rx="2" ry="2" />
<text  x="327.13" y="751.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="160.1" y="277" width="0.1" height="15.0" fill="rgb(235,182,52)" rx="2" ry="2" />
<text  x="163.08" y="287.5" ></text>
</g>
<g >
<title>icu_63::UnicodeString::doCodepageCreate (1 samples, 0.01%)</title><rect x="175.7" y="709" width="0.1" height="15.0" fill="rgb(238,185,19)" rx="2" ry="2" />
<text  x="178.72" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (2 samples, 0.02%)</title><rect x="111.2" y="901" width="0.3" height="15.0" fill="rgb(211,171,18)" rx="2" ry="2" />
<text  x="114.25" y="911.5" ></text>
</g>
<g >
<title>nanosleep@plt (1 samples, 0.01%)</title><rect x="1126.6" y="725" width="0.1" height="15.0" fill="rgb(241,108,1)" rx="2" ry="2" />
<text  x="1129.56" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (2 samples, 0.02%)</title><rect x="74.7" y="901" width="0.3" height="15.0" fill="rgb(236,3,4)" rx="2" ry="2" />
<text  x="77.72" y="911.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, FileRequestAsync, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="942.6" y="613" width="0.2" height="15.0" fill="rgb(231,46,15)" rx="2" ry="2" />
<text  x="945.64" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (368 samples, 4.00%)</title><rect x="562.3" y="693" width="47.1" height="15.0" fill="rgb(241,183,0)" rx="2" ry="2" />
<text  x="565.26" y="703.5" >std:..</text>
</g>
<g >
<title>__x64_sys_clock_gettime (1 samples, 0.01%)</title><rect x="1111.2" y="565" width="0.1" height="15.0" fill="rgb(225,129,21)" rx="2" ry="2" />
<text  x="1114.18" y="575.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, Sprite*, std::default_delete&lt;Sprite&gt; &gt; (1 samples, 0.01%)</title><rect x="952.8" y="341" width="0.1" height="15.0" fill="rgb(226,129,30)" rx="2" ry="2" />
<text  x="955.77" y="351.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="884.6" y="629" width="0.1" height="15.0" fill="rgb(236,87,36)" rx="2" ry="2" />
<text  x="887.59" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (22 samples, 0.24%)</title><rect x="1031.1" y="645" width="2.8" height="15.0" fill="rgb(237,46,45)" rx="2" ry="2" />
<text  x="1034.08" y="655.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="998.5" y="517" width="0.2" height="15.0" fill="rgb(211,62,8)" rx="2" ry="2" />
<text  x="1001.52" y="527.5" ></text>
</g>
<g >
<title>__tz_convert (1 samples, 0.01%)</title><rect x="160.7" y="565" width="0.1" height="15.0" fill="rgb(214,92,49)" rx="2" ry="2" />
<text  x="163.72" y="575.5" ></text>
</g>
<g >
<title>Game_Map::UpdateCommonEvents (8 samples, 0.09%)</title><rect x="159.7" y="885" width="1.0" height="15.0" fill="rgb(230,76,51)" rx="2" ry="2" />
<text  x="162.69" y="895.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="169.1" y="357" width="0.1" height="15.0" fill="rgb(224,224,42)" rx="2" ry="2" />
<text  x="172.05" y="367.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (13 samples, 0.14%)</title><rect x="167.3" y="709" width="1.6" height="15.0" fill="rgb(216,134,46)" rx="2" ry="2" />
<text  x="170.26" y="719.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 1ul, 3ul&gt;::__less (1 samples, 0.01%)</title><rect x="1111.6" y="581" width="0.1" height="15.0" fill="rgb(237,147,31)" rx="2" ry="2" />
<text  x="1114.56" y="591.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (2 samples, 0.02%)</title><rect x="175.8" y="885" width="0.3" height="15.0" fill="rgb(247,205,49)" rx="2" ry="2" />
<text  x="178.84" y="895.5" ></text>
</g>
<g >
<title>Game_CommonEvent::IsWaitingForegroundExecution (4 samples, 0.04%)</title><rect x="1098.4" y="693" width="0.5" height="15.0" fill="rgb(242,59,21)" rx="2" ry="2" />
<text  x="1101.36" y="703.5" ></text>
</g>
<g >
<title>Game_System::OnSeReady (2 samples, 0.02%)</title><rect x="167.0" y="581" width="0.3" height="15.0" fill="rgb(216,86,38)" rx="2" ry="2" />
<text  x="170.00" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt; &gt;::_M_invoke (2 samples, 0.02%)</title><rect x="159.7" y="709" width="0.3" height="15.0" fill="rgb(213,147,21)" rx="2" ry="2" />
<text  x="162.69" y="719.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (5 samples, 0.05%)</title><rect x="169.2" y="677" width="0.6" height="15.0" fill="rgb(223,9,40)" rx="2" ry="2" />
<text  x="172.18" y="687.5" ></text>
</g>
<g >
<title>Scene_Map::UpdateStage1 (14 samples, 0.15%)</title><rect x="167.3" y="885" width="1.8" height="15.0" fill="rgb(239,11,8)" rx="2" ry="2" />
<text  x="170.26" y="895.5" ></text>
</g>
<g >
<title>SdlMixerAudio::SE_Play (1 samples, 0.01%)</title><rect x="169.1" y="597" width="0.1" height="15.0" fill="rgb(230,26,52)" rx="2" ry="2" />
<text  x="172.05" y="607.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (8 samples, 0.09%)</title><rect x="275.7" y="677" width="1.0" height="15.0" fill="rgb(228,67,37)" rx="2" ry="2" />
<text  x="278.68" y="687.5" ></text>
</g>
<g >
<title>Bitmap::ZoomOpacityBlit (287 samples, 3.12%)</title><rect x="190.7" y="709" width="36.8" height="15.0" fill="rgb(223,161,18)" rx="2" ry="2" />
<text  x="193.71" y="719.5" >Bit..</text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (4 samples, 0.04%)</title><rect x="160.0" y="453" width="0.5" height="15.0" fill="rgb(210,7,20)" rx="2" ry="2" />
<text  x="162.95" y="463.5" ></text>
</g>
<g >
<title>Bitmap::GetOpacity (1 samples, 0.01%)</title><rect x="264.7" y="693" width="0.1" height="15.0" fill="rgb(230,56,26)" rx="2" ry="2" />
<text  x="267.66" y="703.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (3 samples, 0.03%)</title><rect x="1108.9" y="677" width="0.4" height="15.0" fill="rgb(221,109,10)" rx="2" ry="2" />
<text  x="1111.87" y="687.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="481.9" y="741" width="0.1" height="15.0" fill="rgb(215,109,25)" rx="2" ry="2" />
<text  x="484.90" y="751.5" ></text>
</g>
<g >
<title>Player::Run (2 samples, 0.02%)</title><rect x="174.8" y="869" width="0.3" height="15.0" fill="rgb(224,7,51)" rx="2" ry="2" />
<text  x="177.82" y="879.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.01%)</title><rect x="958.8" y="597" width="0.1" height="15.0" fill="rgb(208,91,37)" rx="2" ry="2" />
<text  x="961.79" y="607.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.02%)</title><rect x="940.0" y="549" width="0.2" height="15.0" fill="rgb(230,121,35)" rx="2" ry="2" />
<text  x="942.95" y="559.5" ></text>
</g>
<g >
<title>Game_Interpreter::Update (4 samples, 0.04%)</title><rect x="159.1" y="901" width="0.5" height="15.0" fill="rgb(242,13,51)" rx="2" ry="2" />
<text  x="162.05" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_S_key (1 samples, 0.01%)</title><rect x="93.0" y="901" width="0.2" height="15.0" fill="rgb(225,65,37)" rx="2" ry="2" />
<text  x="96.05" y="911.5" ></text>
</g>
<g >
<title>Bitmap::Create (4 samples, 0.04%)</title><rect x="160.0" y="533" width="0.5" height="15.0" fill="rgb(249,197,31)" rx="2" ry="2" />
<text  x="162.95" y="543.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (71 samples, 0.77%)</title><rect x="947.6" y="517" width="9.1" height="15.0" fill="rgb(232,171,26)" rx="2" ry="2" />
<text  x="950.64" y="527.5" ></text>
</g>
<g >
<title>_Xutf8TextListToTextProperty (1 samples, 0.01%)</title><rect x="477.9" y="741" width="0.2" height="15.0" fill="rgb(220,164,2)" rx="2" ry="2" />
<text  x="480.92" y="751.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (739 samples, 8.03%)</title><rect x="515.6" y="709" width="94.7" height="15.0" fill="rgb(205,16,7)" rx="2" ry="2" />
<text  x="518.60" y="719.5" >Game_Interp..</text>
</g>
<g >
<title>task_work_run (1 samples, 0.01%)</title><rect x="160.3" y="261" width="0.2" height="15.0" fill="rgb(214,27,40)" rx="2" ry="2" />
<text  x="163.34" y="271.5" ></text>
</g>
<g >
<title>Graphics::GlobalDraw (10 samples, 0.11%)</title><rect x="180.3" y="789" width="1.3" height="15.0" fill="rgb(252,77,6)" rx="2" ry="2" />
<text  x="183.33" y="799.5" ></text>
</g>
<g >
<title>FileFinder::SplitPath (1 samples, 0.01%)</title><rect x="159.1" y="629" width="0.1" height="15.0" fill="rgb(238,24,10)" rx="2" ry="2" />
<text  x="162.05" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (103 samples, 1.12%)</title><rect x="596.2" y="677" width="13.2" height="15.0" fill="rgb(250,59,50)" rx="2" ry="2" />
<text  x="599.22" y="687.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="940.0" y="517" width="0.1" height="15.0" fill="rgb(233,172,6)" rx="2" ry="2" />
<text  x="942.95" y="527.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="74.9" y="805" width="0.1" height="15.0" fill="rgb(222,184,1)" rx="2" ry="2" />
<text  x="77.85" y="815.5" ></text>
</g>
<g >
<title>pixman_image_composite32 (68 samples, 0.74%)</title><rect x="278.4" y="709" width="8.7" height="15.0" fill="rgb(252,176,54)" rx="2" ry="2" />
<text  x="281.37" y="719.5" ></text>
</g>
<g >
<title>std::allocator&lt;RPG::SaveEventExecFrame&gt;::~allocator (1 samples, 0.01%)</title><rect x="101.3" y="901" width="0.1" height="15.0" fill="rgb(251,162,50)" rx="2" ry="2" />
<text  x="104.25" y="911.5" ></text>
</g>
<g >
<title>FlagSet&lt;Game_Interpreter::Keys, 32ul&gt;::operator[] (1 samples, 0.01%)</title><rect x="76.6" y="901" width="0.2" height="15.0" fill="rgb(246,62,8)" rx="2" ry="2" />
<text  x="79.64" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator++ (60 samples, 0.65%)</title><rect x="1159.0" y="773" width="7.7" height="15.0" fill="rgb(233,72,21)" rx="2" ry="2" />
<text  x="1161.98" y="783.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="900.7" y="581" width="0.2" height="15.0" fill="rgb(206,149,31)" rx="2" ry="2" />
<text  x="903.74" y="591.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="328.4" y="645" width="0.2" height="15.0" fill="rgb(228,110,2)" rx="2" ry="2" />
<text  x="331.36" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (1 samples, 0.01%)</title><rect x="1111.9" y="597" width="0.2" height="15.0" fill="rgb(238,196,27)" rx="2" ry="2" />
<text  x="1114.95" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.8" y="485" width="0.2" height="15.0" fill="rgb(233,200,8)" rx="2" ry="2" />
<text  x="178.84" y="495.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="900.7" y="565" width="0.2" height="15.0" fill="rgb(242,60,53)" rx="2" ry="2" />
<text  x="903.74" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Interpreter_Map, std::default_delete&lt;Game_Interpreter_Map&gt; &gt;::operator bool (1 samples, 0.01%)</title><rect x="1095.2" y="725" width="0.1" height="15.0" fill="rgb(226,12,47)" rx="2" ry="2" />
<text  x="1098.16" y="735.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="943.0" y="421" width="0.2" height="15.0" fill="rgb(207,68,6)" rx="2" ry="2" />
<text  x="946.03" y="431.5" ></text>
</g>
<g >
<title>Game_Map::GetWidth (1 samples, 0.01%)</title><rect x="961.6" y="629" width="0.1" height="15.0" fill="rgb(239,90,33)" rx="2" ry="2" />
<text  x="964.61" y="639.5" ></text>
</g>
<g >
<title>Game_Character::UpdateMovement (8 samples, 0.09%)</title><rect x="1098.2" y="741" width="1.1" height="15.0" fill="rgb(236,53,0)" rx="2" ry="2" />
<text  x="1101.24" y="751.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1189.9" y="789" width="0.1" height="15.0" fill="rgb(223,108,31)" rx="2" ry="2" />
<text  x="1192.87" y="799.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (3 samples, 0.03%)</title><rect x="159.2" y="661" width="0.4" height="15.0" fill="rgb(210,180,25)" rx="2" ry="2" />
<text  x="162.18" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Scene, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (2 samples, 0.02%)</title><rect x="1188.5" y="821" width="0.2" height="15.0" fill="rgb(224,162,26)" rx="2" ry="2" />
<text  x="1191.46" y="831.5" ></text>
</g>
<g >
<title>std::bitset&lt;36ul&gt;::operator[] (1 samples, 0.01%)</title><rect x="481.1" y="789" width="0.2" height="15.0" fill="rgb(250,171,38)" rx="2" ry="2" />
<text  x="484.13" y="799.5" ></text>
</g>
<g >
<title>FileFinder::SplitPath (2 samples, 0.02%)</title><rect x="155.0" y="869" width="0.2" height="15.0" fill="rgb(225,19,25)" rx="2" ry="2" />
<text  x="157.95" y="879.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="477.8" y="677" width="0.1" height="15.0" fill="rgb(219,66,12)" rx="2" ry="2" />
<text  x="480.80" y="687.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.0" y="805" width="0.1" height="15.0" fill="rgb(220,61,54)" rx="2" ry="2" />
<text  x="180.00" y="815.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (125 samples, 1.36%)</title><rect x="532.7" y="677" width="16.0" height="15.0" fill="rgb(215,220,15)" rx="2" ry="2" />
<text  x="535.65" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_write (1 samples, 0.01%)</title><rect x="935.9" y="293" width="0.1" height="15.0" fill="rgb(229,164,18)" rx="2" ry="2" />
<text  x="938.85" y="303.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (3 samples, 0.03%)</title><rect x="475.1" y="565" width="0.4" height="15.0" fill="rgb(235,163,6)" rx="2" ry="2" />
<text  x="478.10" y="575.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="158.5" y="325" width="0.2" height="15.0" fill="rgb(241,122,45)" rx="2" ry="2" />
<text  x="161.54" y="335.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.01%)</title><rect x="226.3" y="661" width="0.2" height="15.0" fill="rgb(222,39,54)" rx="2" ry="2" />
<text  x="229.34" y="671.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1189.7" y="805" width="0.2" height="15.0" fill="rgb(205,115,5)" rx="2" ry="2" />
<text  x="1192.74" y="815.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="160.2" y="309" width="0.3" height="15.0" fill="rgb(229,41,34)" rx="2" ry="2" />
<text  x="163.21" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_M_lower_bound (35 samples, 0.38%)</title><rect x="311.8" y="709" width="4.5" height="15.0" fill="rgb(208,175,22)" rx="2" ry="2" />
<text  x="314.82" y="719.5" ></text>
</g>
<g >
<title>__libc_recvmsg (4 samples, 0.04%)</title><rect x="1127.2" y="613" width="0.5" height="15.0" fill="rgb(228,129,6)" rx="2" ry="2" />
<text  x="1130.20" y="623.5" ></text>
</g>
<g >
<title>Game_Character::IsMoving (1 samples, 0.01%)</title><rect x="1098.0" y="725" width="0.1" height="15.0" fill="rgb(225,3,2)" rx="2" ry="2" />
<text  x="1100.98" y="735.5" ></text>
</g>
<g >
<title>Sdl2Ui::UpdateDisplay (1,163 samples, 12.63%)</title><rect x="328.6" y="789" width="149.1" height="15.0" fill="rgb(211,212,51)" rx="2" ry="2" />
<text  x="331.61" y="799.5" >Sdl2Ui::UpdateDisplay</text>
</g>
<g >
<title>Bitmap::ToneBlit (6 samples, 0.07%)</title><rect x="228.9" y="709" width="0.8" height="15.0" fill="rgb(253,50,46)" rx="2" ry="2" />
<text  x="231.90" y="719.5" ></text>
</g>
<g >
<title>fput (1 samples, 0.01%)</title><rect x="60.4" y="853" width="0.1" height="15.0" fill="rgb(246,150,48)" rx="2" ry="2" />
<text  x="63.37" y="863.5" ></text>
</g>
<g >
<title>std::move&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**&gt; (1 samples, 0.01%)</title><rect x="181.2" y="709" width="0.2" height="15.0" fill="rgb(239,174,31)" rx="2" ry="2" />
<text  x="184.23" y="719.5" ></text>
</g>
<g >
<title>std::less&lt;std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt; &gt;::operator() (1 samples, 0.01%)</title><rect x="229.9" y="693" width="0.2" height="15.0" fill="rgb(249,183,7)" rx="2" ry="2" />
<text  x="232.93" y="703.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (3 samples, 0.03%)</title><rect x="254.0" y="693" width="0.4" height="15.0" fill="rgb(207,165,31)" rx="2" ry="2" />
<text  x="257.02" y="703.5" ></text>
</g>
<g >
<title>easyrpg-player (8,702 samples, 94.52%)</title><rect x="74.7" y="933" width="1115.3" height="15.0" fill="rgb(227,71,3)" rx="2" ry="2" />
<text  x="77.72" y="943.5" >easyrpg-player</text>
</g>
<g >
<title>__fput (1 samples, 0.01%)</title><rect x="160.3" y="229" width="0.2" height="15.0" fill="rgb(215,179,11)" rx="2" ry="2" />
<text  x="163.34" y="239.5" ></text>
</g>
<g >
<title>ip_rcv_finish (1 samples, 0.01%)</title><rect x="121.8" y="549" width="0.1" height="15.0" fill="rgb(251,125,22)" rx="2" ry="2" />
<text  x="124.76" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::cend (1 samples, 0.01%)</title><rect x="481.0" y="773" width="0.1" height="15.0" fill="rgb(205,133,1)" rx="2" ry="2" />
<text  x="484.00" y="783.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.02%)</title><rect x="1111.7" y="677" width="0.2" height="15.0" fill="rgb(231,142,13)" rx="2" ry="2" />
<text  x="1114.69" y="687.5" ></text>
</g>
<g >
<title>Sdl2Ui::Sleep (16 samples, 0.17%)</title><rect x="1128.7" y="805" width="2.1" height="15.0" fill="rgb(249,40,44)" rx="2" ry="2" />
<text  x="1131.74" y="815.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="1110.0" y="549" width="0.2" height="15.0" fill="rgb(208,130,22)" rx="2" ry="2" />
<text  x="1113.03" y="559.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="174.8" y="485" width="0.3" height="15.0" fill="rgb(207,14,30)" rx="2" ry="2" />
<text  x="177.82" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_S_value (3 samples, 0.03%)</title><rect x="314.8" y="693" width="0.4" height="15.0" fill="rgb(253,102,41)" rx="2" ry="2" />
<text  x="317.77" y="703.5" ></text>
</g>
<g >
<title>AsyncHandler::IsFilePending (2 samples, 0.02%)</title><rect x="482.8" y="773" width="0.3" height="15.0" fill="rgb(209,91,49)" rx="2" ry="2" />
<text  x="485.79" y="783.5" ></text>
</g>
<g >
<title>__GI___nanosleep (28 samples, 0.30%)</title><rect x="1123.0" y="725" width="3.6" height="15.0" fill="rgb(245,94,25)" rx="2" ry="2" />
<text  x="1125.97" y="735.5" ></text>
</g>
<g >
<title>Game_Character::GetMoveSpeed (1 samples, 0.01%)</title><rect x="1098.2" y="725" width="0.2" height="15.0" fill="rgb(226,31,33)" rx="2" ry="2" />
<text  x="1101.24" y="735.5" ></text>
</g>
<g >
<title>Window_NumberInput::Update (5 samples, 0.05%)</title><rect x="1110.0" y="757" width="0.7" height="15.0" fill="rgb(244,12,16)" rx="2" ry="2" />
<text  x="1113.03" y="767.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="121.9" y="901" width="0.1" height="15.0" fill="rgb(211,206,0)" rx="2" ry="2" />
<text  x="124.89" y="911.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="225.7" y="629" width="0.1" height="15.0" fill="rgb(242,53,12)" rx="2" ry="2" />
<text  x="228.70" y="639.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandShowPicture (40 samples, 0.43%)</title><rect x="161.4" y="821" width="5.1" height="15.0" fill="rgb(239,104,49)" rx="2" ry="2" />
<text  x="164.36" y="831.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="1122.2" y="693" width="0.4" height="15.0" fill="rgb(251,74,17)" rx="2" ry="2" />
<text  x="1125.20" y="703.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="169.6" y="501" width="0.1" height="15.0" fill="rgb(241,77,0)" rx="2" ry="2" />
<text  x="172.56" y="511.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="1158.9" y="677" width="0.1" height="15.0" fill="rgb(230,11,37)" rx="2" ry="2" />
<text  x="1161.86" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="159.1" y="565" width="0.1" height="15.0" fill="rgb(254,12,27)" rx="2" ry="2" />
<text  x="162.05" y="575.5" ></text>
</g>
<g >
<title>std::function&lt;bool (char32_t)&gt;::operator() (1 samples, 0.01%)</title><rect x="155.3" y="645" width="0.2" height="15.0" fill="rgb(233,178,27)" rx="2" ry="2" />
<text  x="158.34" y="655.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (5 samples, 0.05%)</title><rect x="476.4" y="725" width="0.6" height="15.0" fill="rgb(211,226,30)" rx="2" ry="2" />
<text  x="479.39" y="735.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.03%)</title><rect x="73.3" y="869" width="0.4" height="15.0" fill="rgb(235,125,17)" rx="2" ry="2" />
<text  x="76.31" y="879.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (2 samples, 0.02%)</title><rect x="166.6" y="773" width="0.3" height="15.0" fill="rgb(234,116,40)" rx="2" ry="2" />
<text  x="169.62" y="783.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="168.9" y="549" width="0.2" height="15.0" fill="rgb(245,145,2)" rx="2" ry="2" />
<text  x="171.92" y="559.5" ></text>
</g>
<g >
<title>std::__stable_sort&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (6 samples, 0.07%)</title><rect x="180.8" y="757" width="0.8" height="15.0" fill="rgb(232,7,21)" rx="2" ry="2" />
<text  x="183.84" y="767.5" ></text>
</g>
<g >
<title>Scene_Map::UpdateStage1 (4,910 samples, 53.33%)</title><rect x="483.1" y="789" width="629.2" height="15.0" fill="rgb(219,46,37)" rx="2" ry="2" />
<text  x="486.05" y="799.5" >Scene_Map::UpdateStage1</text>
</g>
<g >
<title>std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;::pair (1 samples, 0.01%)</title><rect x="944.1" y="533" width="0.1" height="15.0" fill="rgb(227,194,17)" rx="2" ry="2" />
<text  x="947.05" y="543.5" ></text>
</g>
<g >
<title>Game_Picture::GetData (2 samples, 0.02%)</title><rect x="933.4" y="629" width="0.3" height="15.0" fill="rgb(208,111,3)" rx="2" ry="2" />
<text  x="936.42" y="639.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="477.8" y="581" width="0.1" height="15.0" fill="rgb(212,120,42)" rx="2" ry="2" />
<text  x="480.80" y="591.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1109.4" y="565" width="0.1" height="15.0" fill="rgb(216,50,31)" rx="2" ry="2" />
<text  x="1112.39" y="575.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="940.0" y="533" width="0.2" height="15.0" fill="rgb(232,169,31)" rx="2" ry="2" />
<text  x="942.95" y="543.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.01%)</title><rect x="1128.4" y="693" width="0.1" height="15.0" fill="rgb(227,139,16)" rx="2" ry="2" />
<text  x="1131.35" y="703.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="477.8" y="597" width="0.1" height="15.0" fill="rgb(212,29,28)" rx="2" ry="2" />
<text  x="480.80" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Game_Event*, std::vector&lt;Game_Event, std::allocator&lt;Game_Event&gt; &gt; &gt;::base (1 samples, 0.01%)</title><rect x="1067.0" y="677" width="0.1" height="15.0" fill="rgb(239,170,41)" rx="2" ry="2" />
<text  x="1069.96" y="687.5" ></text>
</g>
<g >
<title>Bitmap::ConvertImage (19 samples, 0.21%)</title><rect x="161.4" y="389" width="2.4" height="15.0" fill="rgb(213,65,22)" rx="2" ry="2" />
<text  x="164.36" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="926.8" y="645" width="0.1" height="15.0" fill="rgb(248,157,24)" rx="2" ry="2" />
<text  x="929.75" y="655.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, (anonymous namespace)::CacheItem, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="951.4" y="405" width="0.1" height="15.0" fill="rgb(218,36,46)" rx="2" ry="2" />
<text  x="954.36" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="323.2" y="757" width="0.2" height="15.0" fill="rgb(211,139,30)" rx="2" ry="2" />
<text  x="326.23" y="767.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.02%)</title><rect x="181.0" y="709" width="0.2" height="15.0" fill="rgb(217,68,21)" rx="2" ry="2" />
<text  x="183.97" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="1110.0" y="565" width="0.2" height="15.0" fill="rgb(246,182,37)" rx="2" ry="2" />
<text  x="1113.03" y="575.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (3 samples, 0.03%)</title><rect x="1122.2" y="677" width="0.4" height="15.0" fill="rgb(221,224,19)" rx="2" ry="2" />
<text  x="1125.20" y="687.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1 samples, 0.01%)</title><rect x="1117.1" y="661" width="0.1" height="15.0" fill="rgb(236,1,10)" rx="2" ry="2" />
<text  x="1120.08" y="671.5" ></text>
</g>
<g >
<title>__x64_sys_recvmsg (4 samples, 0.04%)</title><rect x="1120.0" y="549" width="0.5" height="15.0" fill="rgb(237,52,38)" rx="2" ry="2" />
<text  x="1123.02" y="559.5" ></text>
</g>
<g >
<title>Utils::DecodeUTF32 (1 samples, 0.01%)</title><rect x="155.3" y="597" width="0.2" height="15.0" fill="rgb(209,153,27)" rx="2" ry="2" />
<text  x="158.34" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.01%)</title><rect x="940.5" y="581" width="0.1" height="15.0" fill="rgb(208,227,14)" rx="2" ry="2" />
<text  x="943.47" y="591.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (4 samples, 0.04%)</title><rect x="165.5" y="357" width="0.5" height="15.0" fill="rgb(240,153,30)" rx="2" ry="2" />
<text  x="168.46" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (2 samples, 0.02%)</title><rect x="155.5" y="869" width="0.2" height="15.0" fill="rgb(251,78,17)" rx="2" ry="2" />
<text  x="158.47" y="879.5" ></text>
</g>
<g >
<title>std::find&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable*&gt; (5 samples, 0.05%)</title><rect x="954.8" y="341" width="0.7" height="15.0" fill="rgb(231,104,19)" rx="2" ry="2" />
<text  x="957.82" y="351.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.01%)</title><rect x="805.9" y="565" width="0.1" height="15.0" fill="rgb(210,166,52)" rx="2" ry="2" />
<text  x="808.89" y="575.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="189.4" y="597" width="0.2" height="15.0" fill="rgb(214,204,26)" rx="2" ry="2" />
<text  x="192.43" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (17 samples, 0.18%)</title><rect x="156.5" y="533" width="2.2" height="15.0" fill="rgb(235,76,43)" rx="2" ry="2" />
<text  x="159.49" y="543.5" ></text>
</g>
<g >
<title>Game_Map::Update (2 samples, 0.02%)</title><rect x="167.0" y="853" width="0.3" height="15.0" fill="rgb(245,49,28)" rx="2" ry="2" />
<text  x="170.00" y="863.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (48 samples, 0.52%)</title><rect x="1112.5" y="757" width="6.1" height="15.0" fill="rgb(237,64,1)" rx="2" ry="2" />
<text  x="1115.46" y="767.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.01%)</title><rect x="1122.5" y="565" width="0.1" height="15.0" fill="rgb(253,148,37)" rx="2" ry="2" />
<text  x="1125.46" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::allocate (1 samples, 0.01%)</title><rect x="159.8" y="517" width="0.2" height="15.0" fill="rgb(250,24,4)" rx="2" ry="2" />
<text  x="162.82" y="527.5" ></text>
</g>
<g >
<title>ReaderUtil::Normalize (1 samples, 0.01%)</title><rect x="166.7" y="709" width="0.2" height="15.0" fill="rgb(213,136,44)" rx="2" ry="2" />
<text  x="169.74" y="719.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (40 samples, 0.43%)</title><rect x="161.4" y="661" width="5.1" height="15.0" fill="rgb(215,136,48)" rx="2" ry="2" />
<text  x="164.36" y="671.5" ></text>
</g>
<g >
<title>Game_Picture::Show (1 samples, 0.01%)</title><rect x="79.6" y="901" width="0.1" height="15.0" fill="rgb(232,151,49)" rx="2" ry="2" />
<text  x="82.59" y="911.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.3" y="613" width="0.1" height="15.0" fill="rgb(238,99,5)" rx="2" ry="2" />
<text  x="180.25" y="623.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;int, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (4 samples, 0.04%)</title><rect x="943.5" y="517" width="0.6" height="15.0" fill="rgb(240,217,20)" rx="2" ry="2" />
<text  x="946.54" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (2 samples, 0.02%)</title><rect x="159.7" y="725" width="0.3" height="15.0" fill="rgb(224,181,4)" rx="2" ry="2" />
<text  x="162.69" y="735.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (6 samples, 0.07%)</title><rect x="160.0" y="629" width="0.7" height="15.0" fill="rgb(251,147,13)" rx="2" ry="2" />
<text  x="162.95" y="639.5" ></text>
</g>
<g >
<title>[anon] (52 samples, 0.56%)</title><rect x="112.3" y="917" width="6.6" height="15.0" fill="rgb(227,225,37)" rx="2" ry="2" />
<text  x="115.27" y="927.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="1006.2" y="629" width="0.1" height="15.0" fill="rgb(252,77,23)" rx="2" ry="2" />
<text  x="1009.21" y="639.5" ></text>
</g>
<g >
<title>AudioDecoder::Create (1 samples, 0.01%)</title><rect x="160.8" y="597" width="0.2" height="15.0" fill="rgb(232,84,35)" rx="2" ry="2" />
<text  x="163.85" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (6 samples, 0.07%)</title><rect x="953.7" y="405" width="0.7" height="15.0" fill="rgb(219,119,3)" rx="2" ry="2" />
<text  x="956.67" y="415.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.01%)</title><rect x="160.1" y="309" width="0.1" height="15.0" fill="rgb(222,5,0)" rx="2" ry="2" />
<text  x="163.08" y="319.5" ></text>
</g>
<g >
<title>operator!= (1 samples, 0.01%)</title><rect x="952.1" y="389" width="0.2" height="15.0" fill="rgb(208,227,30)" rx="2" ry="2" />
<text  x="955.13" y="399.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (4 samples, 0.04%)</title><rect x="160.0" y="501" width="0.5" height="15.0" fill="rgb(229,11,43)" rx="2" ry="2" />
<text  x="162.95" y="511.5" ></text>
</g>
<g >
<title>std::__copy_move_backward_a2&lt;true, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="326.6" y="661" width="0.1" height="15.0" fill="rgb(224,181,27)" rx="2" ry="2" />
<text  x="329.56" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="109.5" y="901" width="0.1" height="15.0" fill="rgb(253,151,13)" rx="2" ry="2" />
<text  x="112.45" y="911.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.04%)</title><rect x="323.5" y="709" width="0.5" height="15.0" fill="rgb(245,83,28)" rx="2" ry="2" />
<text  x="326.49" y="719.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="468.2" y="709" width="0.1" height="15.0" fill="rgb(215,55,0)" rx="2" ry="2" />
<text  x="471.18" y="719.5" ></text>
</g>
<g >
<title>std::mem_fn&lt;void (FileRequestResult*), Game_Picture&gt; (1 samples, 0.01%)</title><rect x="103.6" y="901" width="0.1" height="15.0" fill="rgb(223,100,17)" rx="2" ry="2" />
<text  x="106.56" y="911.5" ></text>
</g>
<g >
<title>Game_Map::IsAnyEventStarting (4 samples, 0.04%)</title><rect x="1098.4" y="709" width="0.5" height="15.0" fill="rgb(209,86,33)" rx="2" ry="2" />
<text  x="1101.36" y="719.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="561.9" y="565" width="0.1" height="15.0" fill="rgb(214,223,24)" rx="2" ry="2" />
<text  x="564.87" y="575.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="176.0" y="453" width="0.1" height="15.0" fill="rgb(232,60,27)" rx="2" ry="2" />
<text  x="178.97" y="463.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (7 samples, 0.08%)</title><rect x="1127.1" y="677" width="0.9" height="15.0" fill="rgb(249,57,10)" rx="2" ry="2" />
<text  x="1130.07" y="687.5" ></text>
</g>
<g >
<title>SdlMixerAudio::SE_Play (2 samples, 0.02%)</title><rect x="159.7" y="613" width="0.3" height="15.0" fill="rgb(239,209,10)" rx="2" ry="2" />
<text  x="162.69" y="623.5" ></text>
</g>
<g >
<title>interrupt_entry (1 samples, 0.01%)</title><rect x="117.8" y="885" width="0.1" height="15.0" fill="rgb(238,53,17)" rx="2" ry="2" />
<text  x="120.79" y="895.5" ></text>
</g>
<g >
<title>std::swap&lt;Bitmap*&gt; (3 samples, 0.03%)</title><rect x="925.7" y="613" width="0.4" height="15.0" fill="rgb(217,140,53)" rx="2" ry="2" />
<text  x="928.73" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::get (7 samples, 0.08%)</title><rect x="1104.5" y="693" width="0.9" height="15.0" fill="rgb(246,45,14)" rx="2" ry="2" />
<text  x="1107.52" y="703.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="900.7" y="597" width="0.2" height="15.0" fill="rgb(217,50,53)" rx="2" ry="2" />
<text  x="903.74" y="607.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandShowPicture (18 samples, 0.20%)</title><rect x="156.5" y="901" width="2.3" height="15.0" fill="rgb(234,89,39)" rx="2" ry="2" />
<text  x="159.49" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1127.8" y="645" width="0.2" height="15.0" fill="rgb(220,189,32)" rx="2" ry="2" />
<text  x="1130.84" y="655.5" ></text>
</g>
<g >
<title>usb_hcd_get_frame_number (1 samples, 0.01%)</title><rect x="70.7" y="453" width="0.2" height="15.0" fill="rgb(239,94,53)" rx="2" ry="2" />
<text  x="73.75" y="463.5" ></text>
</g>
<g >
<title>Game_Interpreter_Map::ExecuteCommand (2 samples, 0.02%)</title><rect x="167.0" y="789" width="0.3" height="15.0" fill="rgb(216,202,40)" rx="2" ry="2" />
<text  x="170.00" y="799.5" ></text>
</g>
<g >
<title>Game_Picture::RequestPictureSprite (2 samples, 0.02%)</title><rect x="174.8" y="645" width="0.3" height="15.0" fill="rgb(205,90,42)" rx="2" ry="2" />
<text  x="177.82" y="655.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (3 samples, 0.03%)</title><rect x="762.2" y="597" width="0.4" height="15.0" fill="rgb(228,95,52)" rx="2" ry="2" />
<text  x="765.19" y="607.5" ></text>
</g>
<g >
<title>[libc-2.29.so] (1 samples, 0.01%)</title><rect x="166.5" y="437" width="0.1" height="15.0" fill="rgb(252,18,22)" rx="2" ry="2" />
<text  x="169.49" y="447.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.01%)</title><rect x="951.4" y="325" width="0.1" height="15.0" fill="rgb(213,39,17)" rx="2" ry="2" />
<text  x="954.36" y="335.5" ></text>
</g>
<g >
<title>speex_resampler_process_interleaved_int (1 samples, 0.01%)</title><rect x="159.7" y="517" width="0.1" height="15.0" fill="rgb(227,195,40)" rx="2" ry="2" />
<text  x="162.69" y="527.5" ></text>
</g>
<g >
<title>ReaderUtil::GetElement&lt;RPG::CommonEvent&gt; (2 samples, 0.02%)</title><rect x="483.9" y="709" width="0.3" height="15.0" fill="rgb(217,195,3)" rx="2" ry="2" />
<text  x="486.95" y="719.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (1,147 samples, 12.46%)</title><rect x="328.9" y="757" width="147.0" height="15.0" fill="rgb(228,202,12)" rx="2" ry="2" />
<text  x="331.87" y="767.5" >[libSDL2-2.0.so.0...</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1119.6" y="421" width="0.2" height="15.0" fill="rgb(229,170,44)" rx="2" ry="2" />
<text  x="1122.64" y="431.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="943.7" y="405" width="0.1" height="15.0" fill="rgb(223,16,52)" rx="2" ry="2" />
<text  x="946.67" y="415.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="1100.4" y="581" width="0.1" height="15.0" fill="rgb(206,209,46)" rx="2" ry="2" />
<text  x="1103.41" y="591.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="59.6" y="837" width="0.1" height="15.0" fill="rgb(229,133,40)" rx="2" ry="2" />
<text  x="62.60" y="847.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 0ul, 3ul&gt;::__less (8 samples, 0.09%)</title><rect x="950.1" y="325" width="1.0" height="15.0" fill="rgb(211,12,26)" rx="2" ry="2" />
<text  x="953.08" y="335.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (1 samples, 0.01%)</title><rect x="189.2" y="661" width="0.1" height="15.0" fill="rgb(218,220,24)" rx="2" ry="2" />
<text  x="192.17" y="671.5" ></text>
</g>
<g >
<title>MakeFlashColor (1 samples, 0.01%)</title><rect x="80.6" y="901" width="0.1" height="15.0" fill="rgb(223,74,37)" rx="2" ry="2" />
<text  x="83.62" y="911.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="1148.6" y="757" width="0.1" height="15.0" fill="rgb(213,170,28)" rx="2" ry="2" />
<text  x="1151.60" y="767.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="957.6" y="533" width="0.2" height="15.0" fill="rgb(222,39,3)" rx="2" ry="2" />
<text  x="960.64" y="543.5" ></text>
</g>
<g >
<title>usb_hcd_giveback_urb (1 samples, 0.01%)</title><rect x="70.7" y="549" width="0.2" height="15.0" fill="rgb(238,97,48)" rx="2" ry="2" />
<text  x="73.75" y="559.5" ></text>
</g>
<g >
<title>ReaderUtil::GetElement&lt;RPG::CommonEvent&gt; (1 samples, 0.01%)</title><rect x="1096.4" y="725" width="0.2" height="15.0" fill="rgb(248,7,52)" rx="2" ry="2" />
<text  x="1099.44" y="735.5" ></text>
</g>
<g >
<title>Color::Color (1 samples, 0.01%)</title><rect x="959.9" y="597" width="0.2" height="15.0" fill="rgb(251,149,12)" rx="2" ry="2" />
<text  x="962.95" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_M_end (1 samples, 0.01%)</title><rect x="93.3" y="901" width="0.1" height="15.0" fill="rgb(208,221,21)" rx="2" ry="2" />
<text  x="96.31" y="911.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (1 samples, 0.01%)</title><rect x="159.6" y="837" width="0.1" height="15.0" fill="rgb(211,54,18)" rx="2" ry="2" />
<text  x="162.57" y="847.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (6 samples, 0.07%)</title><rect x="155.7" y="629" width="0.8" height="15.0" fill="rgb(220,195,15)" rx="2" ry="2" />
<text  x="158.72" y="639.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="1158.9" y="725" width="0.1" height="15.0" fill="rgb(251,90,11)" rx="2" ry="2" />
<text  x="1161.86" y="735.5" ></text>
</g>
<g >
<title>put_prev_task_fair (1 samples, 0.01%)</title><rect x="1130.3" y="645" width="0.1" height="15.0" fill="rgb(205,152,16)" rx="2" ry="2" />
<text  x="1133.28" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.02%)</title><rect x="940.2" y="581" width="0.3" height="15.0" fill="rgb(208,196,29)" rx="2" ry="2" />
<text  x="943.21" y="591.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (8 samples, 0.09%)</title><rect x="945.3" y="597" width="1.1" height="15.0" fill="rgb(251,67,39)" rx="2" ry="2" />
<text  x="948.34" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="957.1" y="373" width="0.2" height="15.0" fill="rgb(228,203,28)" rx="2" ry="2" />
<text  x="960.13" y="383.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="950.2" y="293" width="0.1" height="15.0" fill="rgb(217,55,43)" rx="2" ry="2" />
<text  x="953.21" y="303.5" ></text>
</g>
<g >
<title>Game_System::OnSeReady (1 samples, 0.01%)</title><rect x="159.1" y="677" width="0.1" height="15.0" fill="rgb(213,203,14)" rx="2" ry="2" />
<text  x="162.05" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (16 samples, 0.17%)</title><rect x="1128.7" y="741" width="2.1" height="15.0" fill="rgb(248,6,12)" rx="2" ry="2" />
<text  x="1131.74" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::size (3 samples, 0.03%)</title><rect x="1095.7" y="725" width="0.4" height="15.0" fill="rgb(220,207,5)" rx="2" ry="2" />
<text  x="1098.67" y="735.5" ></text>
</g>
<g >
<title>handle_edge_irq (2 samples, 0.02%)</title><rect x="468.3" y="661" width="0.3" height="15.0" fill="rgb(250,156,0)" rx="2" ry="2" />
<text  x="471.31" y="671.5" ></text>
</g>
<g >
<title>FileRequestResult::~FileRequestResult (1 samples, 0.01%)</title><rect x="76.5" y="901" width="0.1" height="15.0" fill="rgb(237,194,42)" rx="2" ry="2" />
<text  x="79.52" y="911.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1100.4" y="629" width="0.1" height="15.0" fill="rgb(246,158,19)" rx="2" ry="2" />
<text  x="1103.41" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;*, std::vector&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="946.9" y="581" width="0.1" height="15.0" fill="rgb(240,113,38)" rx="2" ry="2" />
<text  x="949.87" y="591.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="1100.4" y="661" width="0.1" height="15.0" fill="rgb(225,179,13)" rx="2" ry="2" />
<text  x="1103.41" y="671.5" ></text>
</g>
<g >
<title>FileRequestAsync::IsReady (6 samples, 0.07%)</title><rect x="75.7" y="901" width="0.8" height="15.0" fill="rgb(233,27,52)" rx="2" ry="2" />
<text  x="78.75" y="911.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="189.4" y="517" width="0.2" height="15.0" fill="rgb(217,220,37)" rx="2" ry="2" />
<text  x="192.43" y="527.5" ></text>
</g>
<g >
<title>Game_Picture::UpdateSprite (8 samples, 0.09%)</title><rect x="951.9" y="421" width="1.0" height="15.0" fill="rgb(210,58,39)" rx="2" ry="2" />
<text  x="954.87" y="431.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="945.1" y="485" width="0.1" height="15.0" fill="rgb(219,131,43)" rx="2" ry="2" />
<text  x="948.08" y="495.5" ></text>
</g>
<g >
<title>Scene::GetRequestedScene (28 samples, 0.30%)</title><rect x="1074.5" y="693" width="3.6" height="15.0" fill="rgb(247,54,10)" rx="2" ry="2" />
<text  x="1077.52" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (2 samples, 0.02%)</title><rect x="1122.3" y="613" width="0.3" height="15.0" fill="rgb(219,171,38)" rx="2" ry="2" />
<text  x="1125.33" y="623.5" ></text>
</g>
<g >
<title>Game_Map::UpdateCommonEvents (4,783 samples, 51.95%)</title><rect x="483.3" y="757" width="613.0" height="15.0" fill="rgb(236,179,27)" rx="2" ry="2" />
<text  x="486.31" y="767.5" >Game_Map::UpdateCommonEvents</text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (1 samples, 0.01%)</title><rect x="227.7" y="645" width="0.2" height="15.0" fill="rgb(251,167,17)" rx="2" ry="2" />
<text  x="230.75" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::end (4 samples, 0.04%)</title><rect x="157.5" y="437" width="0.5" height="15.0" fill="rgb(208,71,0)" rx="2" ry="2" />
<text  x="160.52" y="447.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (5 samples, 0.05%)</title><rect x="170.5" y="901" width="0.6" height="15.0" fill="rgb(227,45,45)" rx="2" ry="2" />
<text  x="173.46" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="189.8" y="661" width="0.3" height="15.0" fill="rgb(251,84,44)" rx="2" ry="2" />
<text  x="192.81" y="671.5" ></text>
</g>
<g >
<title>Bitmap::CheckPixels (17 samples, 0.18%)</title><rect x="156.5" y="469" width="2.2" height="15.0" fill="rgb(208,174,2)" rx="2" ry="2" />
<text  x="159.49" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (50 samples, 0.54%)</title><rect x="978.8" y="645" width="6.4" height="15.0" fill="rgb(235,153,42)" rx="2" ry="2" />
<text  x="981.79" y="655.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (13 samples, 0.14%)</title><rect x="167.3" y="725" width="1.6" height="15.0" fill="rgb(236,24,8)" rx="2" ry="2" />
<text  x="170.26" y="735.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.01%)</title><rect x="950.1" y="277" width="0.1" height="15.0" fill="rgb(227,215,0)" rx="2" ry="2" />
<text  x="953.08" y="287.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (7 samples, 0.08%)</title><rect x="1129.4" y="629" width="0.9" height="15.0" fill="rgb(210,92,32)" rx="2" ry="2" />
<text  x="1132.38" y="639.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.03%)</title><rect x="953.9" y="373" width="0.4" height="15.0" fill="rgb(231,58,35)" rx="2" ry="2" />
<text  x="956.92" y="383.5" ></text>
</g>
<g >
<title>napi_gro_receive (1 samples, 0.01%)</title><rect x="121.8" y="629" width="0.1" height="15.0" fill="rgb(238,1,10)" rx="2" ry="2" />
<text  x="124.76" y="639.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (1 samples, 0.01%)</title><rect x="1107.2" y="677" width="0.1" height="15.0" fill="rgb(206,146,20)" rx="2" ry="2" />
<text  x="1110.21" y="687.5" ></text>
</g>
<g >
<title>__do_page_fault (4 samples, 0.04%)</title><rect x="73.3" y="885" width="0.5" height="15.0" fill="rgb(208,207,30)" rx="2" ry="2" />
<text  x="76.31" y="895.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (4 samples, 0.04%)</title><rect x="939.7" y="581" width="0.5" height="15.0" fill="rgb(217,139,44)" rx="2" ry="2" />
<text  x="942.70" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="175.8" y="837" width="0.3" height="15.0" fill="rgb(248,12,25)" rx="2" ry="2" />
<text  x="178.84" y="847.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="229.7" y="677" width="0.1" height="15.0" fill="rgb(228,77,52)" rx="2" ry="2" />
<text  x="232.67" y="687.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="948.9" y="325" width="0.2" height="15.0" fill="rgb(222,70,8)" rx="2" ry="2" />
<text  x="951.92" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="325.9" y="661" width="0.2" height="15.0" fill="rgb(213,160,44)" rx="2" ry="2" />
<text  x="328.92" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (2 samples, 0.02%)</title><rect x="174.8" y="581" width="0.3" height="15.0" fill="rgb(208,114,36)" rx="2" ry="2" />
<text  x="177.82" y="591.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (6 samples, 0.07%)</title><rect x="160.0" y="757" width="0.7" height="15.0" fill="rgb(232,23,19)" rx="2" ry="2" />
<text  x="162.95" y="767.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="244.9" y="661" width="0.2" height="15.0" fill="rgb(229,204,48)" rx="2" ry="2" />
<text  x="247.92" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (2 samples, 0.02%)</title><rect x="174.8" y="565" width="0.3" height="15.0" fill="rgb(237,68,15)" rx="2" ry="2" />
<text  x="177.82" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator++ (31 samples, 0.34%)</title><rect x="1182.1" y="757" width="3.9" height="15.0" fill="rgb(211,26,17)" rx="2" ry="2" />
<text  x="1185.05" y="767.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;2ul, bool, false&gt;::_Head_base&lt;bool&amp;&gt; (1 samples, 0.01%)</title><rect x="951.6" y="341" width="0.1" height="15.0" fill="rgb(217,119,30)" rx="2" ry="2" />
<text  x="954.62" y="351.5" ></text>
</g>
<g >
<title>ucnv_createConverterFromSharedData_63 (1 samples, 0.01%)</title><rect x="175.7" y="677" width="0.1" height="15.0" fill="rgb(234,85,28)" rx="2" ry="2" />
<text  x="178.72" y="687.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.01%)</title><rect x="1082.3" y="549" width="0.2" height="15.0" fill="rgb(254,108,1)" rx="2" ry="2" />
<text  x="1085.34" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt;, std::allocator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; &gt; &gt;::empty (1 samples, 0.01%)</title><rect x="111.6" y="901" width="0.2" height="15.0" fill="rgb(254,137,28)" rx="2" ry="2" />
<text  x="114.63" y="911.5" ></text>
</g>
<g >
<title>std::bitset&lt;152ul&gt;::operator[] (1 samples, 0.01%)</title><rect x="102.0" y="901" width="0.1" height="15.0" fill="rgb(207,216,3)" rx="2" ry="2" />
<text  x="105.02" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::reset (17 samples, 0.18%)</title><rect x="954.6" y="421" width="2.1" height="15.0" fill="rgb(211,17,52)" rx="2" ry="2" />
<text  x="957.56" y="431.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (2 samples, 0.02%)</title><rect x="155.2" y="853" width="0.3" height="15.0" fill="rgb(211,222,45)" rx="2" ry="2" />
<text  x="158.21" y="863.5" ></text>
</g>
<g >
<title>Game_Interpreter::Update (14 samples, 0.15%)</title><rect x="167.3" y="821" width="1.8" height="15.0" fill="rgb(230,31,52)" rx="2" ry="2" />
<text  x="170.26" y="831.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (40 samples, 0.43%)</title><rect x="161.4" y="725" width="5.1" height="15.0" fill="rgb(244,5,49)" rx="2" ry="2" />
<text  x="164.36" y="735.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="828.6" y="613" width="0.1" height="15.0" fill="rgb(254,210,36)" rx="2" ry="2" />
<text  x="831.58" y="623.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (6 samples, 0.07%)</title><rect x="160.0" y="661" width="0.7" height="15.0" fill="rgb(237,111,22)" rx="2" ry="2" />
<text  x="162.95" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned int const*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt;::base (1 samples, 0.01%)</title><rect x="157.3" y="421" width="0.1" height="15.0" fill="rgb(211,151,39)" rx="2" ry="2" />
<text  x="160.26" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="942.6" y="549" width="0.2" height="15.0" fill="rgb(230,198,3)" rx="2" ry="2" />
<text  x="945.64" y="559.5" ></text>
</g>
<g >
<title>AudioDecoder::Decode (1 samples, 0.01%)</title><rect x="159.7" y="565" width="0.1" height="15.0" fill="rgb(207,172,43)" rx="2" ry="2" />
<text  x="162.69" y="575.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul, 2ul, 3ul&gt; (2 samples, 0.02%)</title><rect x="166.6" y="789" width="0.3" height="15.0" fill="rgb(206,149,6)" rx="2" ry="2" />
<text  x="169.62" y="799.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (3 samples, 0.03%)</title><rect x="159.2" y="677" width="0.4" height="15.0" fill="rgb(244,200,27)" rx="2" ry="2" />
<text  x="162.18" y="687.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (9 samples, 0.10%)</title><rect x="245.1" y="661" width="1.1" height="15.0" fill="rgb(246,189,29)" rx="2" ry="2" />
<text  x="248.05" y="671.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (2 samples, 0.02%)</title><rect x="155.2" y="901" width="0.3" height="15.0" fill="rgb(223,148,38)" rx="2" ry="2" />
<text  x="158.21" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator++ (7 samples, 0.08%)</title><rect x="1187.1" y="773" width="0.8" height="15.0" fill="rgb(213,88,24)" rx="2" ry="2" />
<text  x="1190.05" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_S_key (1 samples, 0.01%)</title><rect x="951.1" y="373" width="0.1" height="15.0" fill="rgb(247,150,47)" rx="2" ry="2" />
<text  x="954.10" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (50 samples, 0.54%)</title><rect x="998.7" y="645" width="6.4" height="15.0" fill="rgb(206,86,27)" rx="2" ry="2" />
<text  x="1001.65" y="655.5" ></text>
</g>
<g >
<title>Bitmap::width (1 samples, 0.01%)</title><rect x="75.1" y="901" width="0.1" height="15.0" fill="rgb(210,207,5)" rx="2" ry="2" />
<text  x="78.11" y="911.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (1 samples, 0.01%)</title><rect x="225.8" y="661" width="0.2" height="15.0" fill="rgb(250,41,20)" rx="2" ry="2" />
<text  x="228.83" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (5 samples, 0.05%)</title><rect x="160.7" y="741" width="0.7" height="15.0" fill="rgb(240,25,11)" rx="2" ry="2" />
<text  x="163.72" y="751.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.7" y="613" width="0.1" height="15.0" fill="rgb(239,223,42)" rx="2" ry="2" />
<text  x="178.72" y="623.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (5 samples, 0.05%)</title><rect x="160.7" y="773" width="0.7" height="15.0" fill="rgb(235,177,23)" rx="2" ry="2" />
<text  x="163.72" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned int&gt;::allocate (1 samples, 0.01%)</title><rect x="177.0" y="581" width="0.1" height="15.0" fill="rgb(221,167,6)" rx="2" ry="2" />
<text  x="180.00" y="591.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (10 samples, 0.11%)</title><rect x="120.6" y="885" width="1.3" height="15.0" fill="rgb(242,167,51)" rx="2" ry="2" />
<text  x="123.60" y="895.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Transition*, std::default_delete&lt;Transition&gt; &gt; (1 samples, 0.01%)</title><rect x="1188.2" y="725" width="0.1" height="15.0" fill="rgb(220,113,42)" rx="2" ry="2" />
<text  x="1191.21" y="735.5" ></text>
</g>
<g >
<title>Game_Interpreter::OnFinishStackFrame (2 samples, 0.02%)</title><rect x="610.3" y="709" width="0.3" height="15.0" fill="rgb(235,66,48)" rx="2" ry="2" />
<text  x="613.32" y="719.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.07%)</title><rect x="953.7" y="421" width="0.7" height="15.0" fill="rgb(250,45,0)" rx="2" ry="2" />
<text  x="956.67" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="1095.5" y="725" width="0.2" height="15.0" fill="rgb(212,48,49)" rx="2" ry="2" />
<text  x="1098.54" y="735.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (1 samples, 0.01%)</title><rect x="177.3" y="581" width="0.1" height="15.0" fill="rgb(224,51,21)" rx="2" ry="2" />
<text  x="180.25" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (4 samples, 0.04%)</title><rect x="118.0" y="901" width="0.6" height="15.0" fill="rgb(220,117,14)" rx="2" ry="2" />
<text  x="121.04" y="911.5" ></text>
</g>
<g >
<title>xhci_giveback_urb_in_irq.isra.43 (1 samples, 0.01%)</title><rect x="957.6" y="421" width="0.2" height="15.0" fill="rgb(251,40,24)" rx="2" ry="2" />
<text  x="960.64" y="431.5" ></text>
</g>
<g >
<title>ImagePNG::ReadPNG (1 samples, 0.01%)</title><rect x="159.4" y="421" width="0.2" height="15.0" fill="rgb(217,16,12)" rx="2" ry="2" />
<text  x="162.44" y="431.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (1 samples, 0.01%)</title><rect x="175.6" y="613" width="0.1" height="15.0" fill="rgb(246,99,26)" rx="2" ry="2" />
<text  x="178.59" y="623.5" ></text>
</g>
<g >
<title>schedule (26 samples, 0.28%)</title><rect x="1123.1" y="629" width="3.3" height="15.0" fill="rgb(249,80,18)" rx="2" ry="2" />
<text  x="1126.10" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;2ul, bool&gt;::_Tuple_impl&lt;bool&amp;&gt; (1 samples, 0.01%)</title><rect x="951.6" y="357" width="0.1" height="15.0" fill="rgb(236,66,53)" rx="2" ry="2" />
<text  x="954.62" y="367.5" ></text>
</g>
<g >
<title>AudioResampler::~AudioResampler (1 samples, 0.01%)</title><rect x="167.1" y="469" width="0.2" height="15.0" fill="rgb(213,157,30)" rx="2" ry="2" />
<text  x="170.13" y="479.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (3 samples, 0.03%)</title><rect x="515.2" y="709" width="0.4" height="15.0" fill="rgb(222,203,19)" rx="2" ry="2" />
<text  x="518.22" y="719.5" ></text>
</g>
<g >
<title>FileFinder::SplitPath (1 samples, 0.01%)</title><rect x="155.3" y="677" width="0.2" height="15.0" fill="rgb(210,132,21)" rx="2" ry="2" />
<text  x="158.34" y="687.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (4 samples, 0.04%)</title><rect x="275.8" y="661" width="0.5" height="15.0" fill="rgb(231,128,22)" rx="2" ry="2" />
<text  x="278.81" y="671.5" ></text>
</g>
<g >
<title>generic_make_request (1 samples, 0.01%)</title><rect x="156.4" y="149" width="0.1" height="15.0" fill="rgb(226,162,28)" rx="2" ry="2" />
<text  x="159.36" y="159.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="1078.2" y="645" width="0.2" height="15.0" fill="rgb(249,37,30)" rx="2" ry="2" />
<text  x="1081.24" y="655.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (2 samples, 0.02%)</title><rect x="170.8" y="789" width="0.3" height="15.0" fill="rgb(239,208,14)" rx="2" ry="2" />
<text  x="173.85" y="799.5" ></text>
</g>
<g >
<title>__interceptor_free (4 samples, 0.04%)</title><rect x="165.5" y="389" width="0.5" height="15.0" fill="rgb(232,205,29)" rx="2" ry="2" />
<text  x="168.46" y="399.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.01%)</title><rect x="942.8" y="501" width="0.1" height="15.0" fill="rgb(239,56,34)" rx="2" ry="2" />
<text  x="945.77" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;MessageOverlay::IsAnyMessageVisible() const::{lambda(MessageOverlayItem const&amp;)#1}&gt;::_Iter_pred (1 samples, 0.01%)</title><rect x="180.5" y="677" width="0.1" height="15.0" fill="rgb(254,39,52)" rx="2" ry="2" />
<text  x="183.46" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="166.5" y="565" width="0.1" height="15.0" fill="rgb(243,166,17)" rx="2" ry="2" />
<text  x="169.49" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_M_end (2 samples, 0.02%)</title><rect x="92.8" y="901" width="0.2" height="15.0" fill="rgb(249,106,35)" rx="2" ry="2" />
<text  x="95.79" y="911.5" ></text>
</g>
<g >
<title>LibsndfileDecoder::~LibsndfileDecoder (1 samples, 0.01%)</title><rect x="169.1" y="421" width="0.1" height="15.0" fill="rgb(253,212,6)" rx="2" ry="2" />
<text  x="172.05" y="431.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="1100.4" y="645" width="0.1" height="15.0" fill="rgb(229,102,15)" rx="2" ry="2" />
<text  x="1103.41" y="655.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (18 samples, 0.20%)</title><rect x="156.5" y="837" width="2.3" height="15.0" fill="rgb(254,115,54)" rx="2" ry="2" />
<text  x="159.49" y="847.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;*, std::vector&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt; &gt;::operator++ (1 samples, 0.01%)</title><rect x="89.5" y="901" width="0.1" height="15.0" fill="rgb(214,22,45)" rx="2" ry="2" />
<text  x="92.46" y="911.5" ></text>
</g>
<g >
<title>__close_fd (1 samples, 0.01%)</title><rect x="160.2" y="261" width="0.1" height="15.0" fill="rgb(224,134,8)" rx="2" ry="2" />
<text  x="163.21" y="271.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (1 samples, 0.01%)</title><rect x="961.6" y="565" width="0.1" height="15.0" fill="rgb(244,83,23)" rx="2" ry="2" />
<text  x="964.61" y="575.5" ></text>
</g>
<g >
<title>std::replace&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, char&gt; (1 samples, 0.01%)</title><rect x="1110.9" y="645" width="0.2" height="15.0" fill="rgb(210,87,41)" rx="2" ry="2" />
<text  x="1113.92" y="655.5" ></text>
</g>
<g >
<title>Cache::System (7 samples, 0.08%)</title><rect x="1108.9" y="709" width="0.9" height="15.0" fill="rgb(253,117,49)" rx="2" ry="2" />
<text  x="1111.87" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::get (3 samples, 0.03%)</title><rect x="297.2" y="693" width="0.4" height="15.0" fill="rgb(221,176,13)" rx="2" ry="2" />
<text  x="300.21" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="159.8" y="533" width="0.2" height="15.0" fill="rgb(242,188,51)" rx="2" ry="2" />
<text  x="162.82" y="543.5" ></text>
</g>
<g >
<title>Cache::Picture (18 samples, 0.20%)</title><rect x="156.5" y="645" width="2.3" height="15.0" fill="rgb(243,36,40)" rx="2" ry="2" />
<text  x="159.49" y="655.5" ></text>
</g>
<g >
<title>copy_msghdr_from_user (1 samples, 0.01%)</title><rect x="1119.5" y="485" width="0.1" height="15.0" fill="rgb(223,33,42)" rx="2" ry="2" />
<text  x="1122.51" y="495.5" ></text>
</g>
<g >
<title>Game_Interpreter::SkipTo (3 samples, 0.03%)</title><rect x="641.7" y="661" width="0.4" height="15.0" fill="rgb(205,147,35)" rx="2" ry="2" />
<text  x="644.72" y="671.5" ></text>
</g>
<g >
<title>Game_Map::UpdateProcessedFlags (1 samples, 0.01%)</title><rect x="1097.9" y="757" width="0.1" height="15.0" fill="rgb(215,183,42)" rx="2" ry="2" />
<text  x="1100.85" y="767.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="161.1" y="357" width="0.1" height="15.0" fill="rgb(205,15,38)" rx="2" ry="2" />
<text  x="164.10" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (52 samples, 0.56%)</title><rect x="1052.0" y="661" width="6.6" height="15.0" fill="rgb(223,111,7)" rx="2" ry="2" />
<text  x="1054.97" y="671.5" ></text>
</g>
<g >
<title>Game_Interpreter::Update (2 samples, 0.02%)</title><rect x="174.8" y="725" width="0.3" height="15.0" fill="rgb(235,220,28)" rx="2" ry="2" />
<text  x="177.82" y="735.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.01%)</title><rect x="176.0" y="501" width="0.1" height="15.0" fill="rgb(230,138,42)" rx="2" ry="2" />
<text  x="178.97" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_read (5 samples, 0.05%)</title><rect x="155.8" y="389" width="0.7" height="15.0" fill="rgb(219,143,51)" rx="2" ry="2" />
<text  x="158.85" y="399.5" ></text>
</g>
<g >
<title>pixman_transform_point_31_16 (1 samples, 0.01%)</title><rect x="190.5" y="629" width="0.1" height="15.0" fill="rgb(225,29,6)" rx="2" ry="2" />
<text  x="193.45" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (2 samples, 0.02%)</title><rect x="161.1" y="565" width="0.3" height="15.0" fill="rgb(234,22,38)" rx="2" ry="2" />
<text  x="164.10" y="575.5" ></text>
</g>
<g >
<title>dd_bio_merge (1 samples, 0.01%)</title><rect x="156.4" y="101" width="0.1" height="15.0" fill="rgb(228,126,13)" rx="2" ry="2" />
<text  x="159.36" y="111.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="155.2" y="613" width="0.1" height="15.0" fill="rgb(253,215,8)" rx="2" ry="2" />
<text  x="158.21" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::size (58 samples, 0.63%)</title><rect x="1087.2" y="709" width="7.4" height="15.0" fill="rgb(211,41,5)" rx="2" ry="2" />
<text  x="1090.21" y="719.5" ></text>
</g>
<g >
<title>FileRequestAsync::Bind&lt;Game_Picture&gt; (29 samples, 0.31%)</title><rect x="942.8" y="629" width="3.7" height="15.0" fill="rgb(212,64,46)" rx="2" ry="2" />
<text  x="945.77" y="639.5" ></text>
</g>
<g >
<title>FileRequestAsync::IsReady (32 samples, 0.35%)</title><rect x="1173.7" y="757" width="4.1" height="15.0" fill="rgb(217,95,22)" rx="2" ry="2" />
<text  x="1176.72" y="767.5" ></text>
</g>
<g >
<title>run_rebalance_domains (3 samples, 0.03%)</title><rect x="762.2" y="581" width="0.4" height="15.0" fill="rgb(241,121,31)" rx="2" ry="2" />
<text  x="765.19" y="591.5" ></text>
</g>
<g >
<title>vfs_write (9 samples, 0.10%)</title><rect x="72.0" y="853" width="1.2" height="15.0" fill="rgb(222,51,2)" rx="2" ry="2" />
<text  x="75.03" y="863.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Game_Event*, std::vector&lt;Game_Event, std::allocator&lt;Game_Event&gt; &gt; &gt;::base (2 samples, 0.02%)</title><rect x="85.4" y="901" width="0.2" height="15.0" fill="rgb(224,50,1)" rx="2" ry="2" />
<text  x="88.36" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="958.7" y="453" width="0.1" height="15.0" fill="rgb(230,208,8)" rx="2" ry="2" />
<text  x="961.67" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Game_CommonEvent*, std::vector&lt;Game_CommonEvent, std::allocator&lt;Game_CommonEvent&gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="1097.5" y="741" width="0.2" height="15.0" fill="rgb(217,169,37)" rx="2" ry="2" />
<text  x="1100.47" y="751.5" ></text>
</g>
<g >
<title>ktime_get_raw_ts64 (1 samples, 0.01%)</title><rect x="1111.2" y="549" width="0.1" height="15.0" fill="rgb(220,16,27)" rx="2" ry="2" />
<text  x="1114.18" y="559.5" ></text>
</g>
<g >
<title>XFlush (14 samples, 0.15%)</title><rect x="1118.9" y="709" width="1.8" height="15.0" fill="rgb(207,79,18)" rx="2" ry="2" />
<text  x="1121.87" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;int, (__gnu_cxx::_Lock_policy)2&gt;::swap (1 samples, 0.01%)</title><rect x="957.9" y="597" width="0.1" height="15.0" fill="rgb(221,8,0)" rx="2" ry="2" />
<text  x="960.90" y="607.5" ></text>
</g>
<g >
<title>x86_pmu_enable (7 samples, 0.08%)</title><rect x="1129.4" y="597" width="0.9" height="15.0" fill="rgb(214,149,32)" rx="2" ry="2" />
<text  x="1132.38" y="607.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="159.6" y="725" width="0.1" height="15.0" fill="rgb(228,156,3)" rx="2" ry="2" />
<text  x="162.57" y="735.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (3 samples, 0.03%)</title><rect x="1127.2" y="485" width="0.4" height="15.0" fill="rgb(246,224,34)" rx="2" ry="2" />
<text  x="1130.20" y="495.5" ></text>
</g>
<g >
<title>Game_Interpreter::Update (8 samples, 0.09%)</title><rect x="159.7" y="853" width="1.0" height="15.0" fill="rgb(223,78,0)" rx="2" ry="2" />
<text  x="162.69" y="863.5" ></text>
</g>
<g >
<title>update_load_avg (1 samples, 0.01%)</title><rect x="1129.3" y="597" width="0.1" height="15.0" fill="rgb(235,127,3)" rx="2" ry="2" />
<text  x="1132.25" y="607.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (3 samples, 0.03%)</title><rect x="74.3" y="917" width="0.4" height="15.0" fill="rgb(239,161,15)" rx="2" ry="2" />
<text  x="77.34" y="927.5" ></text>
</g>
<g >
<title>Scene_Map::Update (2 samples, 0.02%)</title><rect x="174.8" y="805" width="0.3" height="15.0" fill="rgb(218,72,40)" rx="2" ry="2" />
<text  x="177.82" y="815.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.01%)</title><rect x="229.7" y="277" width="0.1" height="15.0" fill="rgb(227,134,17)" rx="2" ry="2" />
<text  x="232.67" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt; (1 samples, 0.01%)</title><rect x="102.5" y="901" width="0.2" height="15.0" fill="rgb(246,52,21)" rx="2" ry="2" />
<text  x="105.53" y="911.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (8 samples, 0.09%)</title><rect x="120.9" y="821" width="1.0" height="15.0" fill="rgb(213,195,48)" rx="2" ry="2" />
<text  x="123.86" y="831.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandShowPicture (2 samples, 0.02%)</title><rect x="174.8" y="677" width="0.3" height="15.0" fill="rgb(250,189,22)" rx="2" ry="2" />
<text  x="177.82" y="687.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (4 samples, 0.04%)</title><rect x="1130.8" y="773" width="0.5" height="15.0" fill="rgb(243,164,39)" rx="2" ry="2" />
<text  x="1133.79" y="783.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="944.4" y="533" width="0.4" height="15.0" fill="rgb(215,58,41)" rx="2" ry="2" />
<text  x="947.44" y="543.5" ></text>
</g>
<g >
<title>[libsndfile.so.1.0.28] (1 samples, 0.01%)</title><rect x="169.1" y="405" width="0.1" height="15.0" fill="rgb(223,35,26)" rx="2" ry="2" />
<text  x="172.05" y="415.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="74.9" y="869" width="0.1" height="15.0" fill="rgb(244,201,29)" rx="2" ry="2" />
<text  x="77.85" y="879.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.0" y="757" width="0.1" height="15.0" fill="rgb(254,203,47)" rx="2" ry="2" />
<text  x="180.00" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_ptr (6 samples, 0.07%)</title><rect x="1155.1" y="757" width="0.8" height="15.0" fill="rgb(214,126,44)" rx="2" ry="2" />
<text  x="1158.14" y="767.5" ></text>
</g>
<g >
<title>Audio (1 samples, 0.01%)</title><rect x="179.6" y="821" width="0.1" height="15.0" fill="rgb(211,143,36)" rx="2" ry="2" />
<text  x="182.56" y="831.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1155.9" y="757" width="0.1" height="15.0" fill="rgb(245,55,9)" rx="2" ry="2" />
<text  x="1158.91" y="767.5" ></text>
</g>
<g >
<title>FileFinder::MakePath (1 samples, 0.01%)</title><rect x="75.5" y="901" width="0.1" height="15.0" fill="rgb(210,122,37)" rx="2" ry="2" />
<text  x="78.49" y="911.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="106.1" y="901" width="0.2" height="15.0" fill="rgb(216,182,33)" rx="2" ry="2" />
<text  x="109.12" y="911.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (1 samples, 0.01%)</title><rect x="166.5" y="853" width="0.1" height="15.0" fill="rgb(249,0,30)" rx="2" ry="2" />
<text  x="169.49" y="863.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, (anonymous namespace)::CacheItem, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="1111.6" y="677" width="0.1" height="15.0" fill="rgb(233,96,41)" rx="2" ry="2" />
<text  x="1114.56" y="687.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (374 samples, 4.06%)</title><rect x="1011.0" y="693" width="47.9" height="15.0" fill="rgb(227,202,7)" rx="2" ry="2" />
<text  x="1013.96" y="703.5" >Game..</text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.0" y="789" width="0.1" height="15.0" fill="rgb(238,19,25)" rx="2" ry="2" />
<text  x="180.00" y="799.5" ></text>
</g>
<g >
<title>clock_gettime@plt (1 samples, 0.01%)</title><rect x="949.7" y="373" width="0.1" height="15.0" fill="rgb(206,175,0)" rx="2" ry="2" />
<text  x="952.69" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;AudioSeCache&gt;::operator() (2 samples, 0.02%)</title><rect x="167.0" y="533" width="0.3" height="15.0" fill="rgb(229,114,43)" rx="2" ry="2" />
<text  x="170.00" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::operator-- (1 samples, 0.01%)</title><rect x="85.2" y="901" width="0.2" height="15.0" fill="rgb(253,206,36)" rx="2" ry="2" />
<text  x="88.23" y="911.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="121.8" y="709" width="0.1" height="15.0" fill="rgb(208,192,36)" rx="2" ry="2" />
<text  x="124.76" y="719.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (40 samples, 0.43%)</title><rect x="161.4" y="597" width="5.1" height="15.0" fill="rgb(241,168,45)" rx="2" ry="2" />
<text  x="164.36" y="607.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.01%)</title><rect x="160.1" y="325" width="0.1" height="15.0" fill="rgb(239,20,1)" rx="2" ry="2" />
<text  x="163.08" y="335.5" ></text>
</g>
<g >
<title>AudioSeCache::Decode (13 samples, 0.14%)</title><rect x="167.3" y="565" width="1.6" height="15.0" fill="rgb(221,108,32)" rx="2" ry="2" />
<text  x="170.26" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;TilemapLayer::TileData, std::allocator&lt;TilemapLayer::TileData&gt; &gt;, std::allocator&lt;std::vector&lt;TilemapLayer::TileData, std::allocator&lt;TilemapLayer::TileData&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="111.8" y="901" width="0.1" height="15.0" fill="rgb(214,77,29)" rx="2" ry="2" />
<text  x="114.76" y="911.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul, 2ul, 3ul&gt; (5 samples, 0.05%)</title><rect x="160.7" y="693" width="0.7" height="15.0" fill="rgb(210,18,14)" rx="2" ry="2" />
<text  x="163.72" y="703.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.03%)</title><rect x="165.6" y="325" width="0.4" height="15.0" fill="rgb(247,155,13)" rx="2" ry="2" />
<text  x="168.59" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (8 samples, 0.09%)</title><rect x="85.6" y="901" width="1.0" height="15.0" fill="rgb(210,159,7)" rx="2" ry="2" />
<text  x="88.62" y="911.5" ></text>
</g>
<g >
<title>__update_load_avg_cfs_rq (1 samples, 0.01%)</title><rect x="762.2" y="565" width="0.1" height="15.0" fill="rgb(253,129,3)" rx="2" ry="2" />
<text  x="765.19" y="575.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator= (1 samples, 0.01%)</title><rect x="98.0" y="901" width="0.2" height="15.0" fill="rgb(235,194,31)" rx="2" ry="2" />
<text  x="101.05" y="911.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (1 samples, 0.01%)</title><rect x="159.1" y="773" width="0.1" height="15.0" fill="rgb(210,180,24)" rx="2" ry="2" />
<text  x="162.05" y="783.5" ></text>
</g>
<g >
<title>Cache::SystemOrBlack (7 samples, 0.08%)</title><rect x="1108.9" y="741" width="0.9" height="15.0" fill="rgb(244,174,5)" rx="2" ry="2" />
<text  x="1111.87" y="751.5" ></text>
</g>
<g >
<title>dput.part.33 (1 samples, 0.01%)</title><rect x="160.3" y="197" width="0.2" height="15.0" fill="rgb(229,208,33)" rx="2" ry="2" />
<text  x="163.34" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="961.6" y="613" width="0.1" height="15.0" fill="rgb(230,129,38)" rx="2" ry="2" />
<text  x="964.61" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_S_key (1 samples, 0.01%)</title><rect x="949.3" y="341" width="0.1" height="15.0" fill="rgb(205,119,36)" rx="2" ry="2" />
<text  x="952.31" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::get (7 samples, 0.08%)</title><rect x="306.1" y="709" width="0.9" height="15.0" fill="rgb(234,172,2)" rx="2" ry="2" />
<text  x="309.06" y="719.5" ></text>
</g>
<g >
<title>ImageBMP::ReadBMP (1 samples, 0.01%)</title><rect x="175.6" y="597" width="0.1" height="15.0" fill="rgb(223,96,7)" rx="2" ry="2" />
<text  x="178.59" y="607.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (2 samples, 0.02%)</title><rect x="174.8" y="629" width="0.3" height="15.0" fill="rgb(209,145,39)" rx="2" ry="2" />
<text  x="177.82" y="639.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="582.5" y="597" width="0.1" height="15.0" fill="rgb(233,15,41)" rx="2" ry="2" />
<text  x="585.51" y="607.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (3 samples, 0.03%)</title><rect x="1130.9" y="741" width="0.4" height="15.0" fill="rgb(219,229,22)" rx="2" ry="2" />
<text  x="1133.92" y="751.5" ></text>
</g>
<g >
<title>Bitmap::MultiplyAlpha (10 samples, 0.11%)</title><rect x="162.5" y="373" width="1.3" height="15.0" fill="rgb(218,160,12)" rx="2" ry="2" />
<text  x="165.51" y="383.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (1 samples, 0.01%)</title><rect x="957.9" y="581" width="0.1" height="15.0" fill="rgb(247,58,21)" rx="2" ry="2" />
<text  x="960.90" y="591.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Game_Picture*, std::default_delete&lt;Game_Picture&gt; &gt; (1 samples, 0.01%)</title><rect x="926.6" y="613" width="0.2" height="15.0" fill="rgb(216,225,37)" rx="2" ry="2" />
<text  x="929.62" y="623.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, FileRequestResult*&amp;&amp;&gt;::_M_head (1 samples, 0.01%)</title><rect x="947.5" y="453" width="0.1" height="15.0" fill="rgb(247,151,16)" rx="2" ry="2" />
<text  x="950.51" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="166.7" y="645" width="0.2" height="15.0" fill="rgb(206,92,37)" rx="2" ry="2" />
<text  x="169.74" y="655.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="1128.4" y="677" width="0.1" height="15.0" fill="rgb(205,25,45)" rx="2" ry="2" />
<text  x="1131.35" y="687.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (3 samples, 0.03%)</title><rect x="159.2" y="437" width="0.4" height="15.0" fill="rgb(233,27,9)" rx="2" ry="2" />
<text  x="162.18" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Sprite*, std::default_delete&lt;Sprite&gt; &gt; (1 samples, 0.01%)</title><rect x="952.8" y="357" width="0.1" height="15.0" fill="rgb(244,192,22)" rx="2" ry="2" />
<text  x="955.77" y="367.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::reset (4 samples, 0.04%)</title><rect x="165.5" y="549" width="0.5" height="15.0" fill="rgb(240,215,34)" rx="2" ry="2" />
<text  x="168.46" y="559.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (18 samples, 0.20%)</title><rect x="156.5" y="789" width="2.3" height="15.0" fill="rgb(229,29,10)" rx="2" ry="2" />
<text  x="159.49" y="799.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator= (1 samples, 0.01%)</title><rect x="953.2" y="373" width="0.1" height="15.0" fill="rgb(243,189,42)" rx="2" ry="2" />
<text  x="956.15" y="383.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="935.0" y="581" width="0.1" height="15.0" fill="rgb(243,125,29)" rx="2" ry="2" />
<text  x="937.95" y="591.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, true&gt; (1 samples, 0.01%)</title><rect x="951.6" y="405" width="0.1" height="15.0" fill="rgb(209,166,14)" rx="2" ry="2" />
<text  x="954.62" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_default_append (1 samples, 0.01%)</title><rect x="177.0" y="629" width="0.1" height="15.0" fill="rgb(206,98,40)" rx="2" ry="2" />
<text  x="180.00" y="639.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (4 samples, 0.04%)</title><rect x="323.5" y="693" width="0.5" height="15.0" fill="rgb(244,181,33)" rx="2" ry="2" />
<text  x="326.49" y="703.5" ></text>
</g>
<g >
<title>Cache::Picture (2 samples, 0.02%)</title><rect x="155.2" y="725" width="0.3" height="15.0" fill="rgb(222,74,33)" rx="2" ry="2" />
<text  x="158.21" y="735.5" ></text>
</g>
<g >
<title>AudioResampler::~AudioResampler (1 samples, 0.01%)</title><rect x="169.1" y="501" width="0.1" height="15.0" fill="rgb(224,116,27)" rx="2" ry="2" />
<text  x="172.05" y="511.5" ></text>
</g>
<g >
<title>Game_Player::Update (11 samples, 0.12%)</title><rect x="1098.0" y="757" width="1.4" height="15.0" fill="rgb(239,205,36)" rx="2" ry="2" />
<text  x="1100.98" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::Variable, std::allocator&lt;RPG::Variable&gt; &gt;::size (1 samples, 0.01%)</title><rect x="118.6" y="901" width="0.1" height="15.0" fill="rgb(228,225,36)" rx="2" ry="2" />
<text  x="121.55" y="911.5" ></text>
</g>
<g >
<title>generic_exec_single (1 samples, 0.01%)</title><rect x="165.7" y="117" width="0.1" height="15.0" fill="rgb(243,194,34)" rx="2" ry="2" />
<text  x="168.72" y="127.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (71 samples, 0.77%)</title><rect x="947.6" y="469" width="9.1" height="15.0" fill="rgb(238,9,52)" rx="2" ry="2" />
<text  x="950.64" y="479.5" ></text>
</g>
<g >
<title>schedule (8 samples, 0.09%)</title><rect x="1121.0" y="437" width="1.1" height="15.0" fill="rgb(243,193,20)" rx="2" ry="2" />
<text  x="1124.05" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.01%)</title><rect x="155.1" y="693" width="0.1" height="15.0" fill="rgb(223,192,12)" rx="2" ry="2" />
<text  x="158.08" y="703.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (18 samples, 0.20%)</title><rect x="1120.7" y="709" width="2.3" height="15.0" fill="rgb(224,53,36)" rx="2" ry="2" />
<text  x="1123.66" y="719.5" ></text>
</g>
<g >
<title>native_write_msr (1 samples, 0.01%)</title><rect x="70.6" y="693" width="0.1" height="15.0" fill="rgb(227,71,7)" rx="2" ry="2" />
<text  x="73.62" y="703.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_init_functor (4 samples, 0.04%)</title><rect x="944.8" y="597" width="0.5" height="15.0" fill="rgb(213,92,42)" rx="2" ry="2" />
<text  x="947.82" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int const&amp;, int const&amp;, int const&amp;, int const&amp;&gt;::_Tuple_impl (1 samples, 0.01%)</title><rect x="229.9" y="581" width="0.2" height="15.0" fill="rgb(232,178,35)" rx="2" ry="2" />
<text  x="232.93" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (5 samples, 0.05%)</title><rect x="759.9" y="597" width="0.6" height="15.0" fill="rgb(205,102,37)" rx="2" ry="2" />
<text  x="762.88" y="607.5" ></text>
</g>
<g >
<title>i40e_napi_poll (1 samples, 0.01%)</title><rect x="121.8" y="661" width="0.1" height="15.0" fill="rgb(245,24,20)" rx="2" ry="2" />
<text  x="124.76" y="671.5" ></text>
</g>
<g >
<title>Scene_Map::Update (1 samples, 0.01%)</title><rect x="82.0" y="901" width="0.2" height="15.0" fill="rgb(238,78,32)" rx="2" ry="2" />
<text  x="85.03" y="911.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (5 samples, 0.05%)</title><rect x="155.8" y="309" width="0.7" height="15.0" fill="rgb(219,82,9)" rx="2" ry="2" />
<text  x="158.85" y="319.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="225.7" y="581" width="0.1" height="15.0" fill="rgb(250,190,50)" rx="2" ry="2" />
<text  x="228.70" y="591.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, Transition*, std::default_delete&lt;Transition&gt; &gt; (2 samples, 0.02%)</title><rect x="97.4" y="901" width="0.3" height="15.0" fill="rgb(242,162,24)" rx="2" ry="2" />
<text  x="100.41" y="911.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (2 samples, 0.02%)</title><rect x="475.1" y="549" width="0.3" height="15.0" fill="rgb(210,69,24)" rx="2" ry="2" />
<text  x="478.10" y="559.5" ></text>
</g>
<g >
<title>Sprite::GetHeight (1 samples, 0.01%)</title><rect x="230.8" y="725" width="0.2" height="15.0" fill="rgb(235,60,17)" rx="2" ry="2" />
<text  x="233.83" y="735.5" ></text>
</g>
<g >
<title>AudioSeCache::Decode (14 samples, 0.15%)</title><rect x="936.1" y="469" width="1.8" height="15.0" fill="rgb(219,201,32)" rx="2" ry="2" />
<text  x="939.11" y="479.5" ></text>
</g>
<g >
<title>Cache::Picture (2 samples, 0.02%)</title><rect x="155.5" y="709" width="0.2" height="15.0" fill="rgb(225,115,1)" rx="2" ry="2" />
<text  x="158.47" y="719.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (1 samples, 0.01%)</title><rect x="156.4" y="181" width="0.1" height="15.0" fill="rgb(207,221,5)" rx="2" ry="2" />
<text  x="159.36" y="191.5" ></text>
</g>
<g >
<title>Player::IncFrame (1 samples, 0.01%)</title><rect x="1170.0" y="805" width="0.1" height="15.0" fill="rgb(224,90,30)" rx="2" ry="2" />
<text  x="1173.01" y="815.5" ></text>
</g>
<g >
<title>perf_pmu_enable.part.105 (7 samples, 0.08%)</title><rect x="1129.4" y="613" width="0.9" height="15.0" fill="rgb(221,213,11)" rx="2" ry="2" />
<text  x="1132.38" y="623.5" ></text>
</g>
<g >
<title>__interceptor_recvmsg (4 samples, 0.04%)</title><rect x="1120.0" y="629" width="0.5" height="15.0" fill="rgb(227,128,51)" rx="2" ry="2" />
<text  x="1123.02" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (4 samples, 0.04%)</title><rect x="165.5" y="501" width="0.5" height="15.0" fill="rgb(235,74,48)" rx="2" ry="2" />
<text  x="168.46" y="511.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandMovePicture (40 samples, 0.43%)</title><rect x="930.6" y="677" width="5.1" height="15.0" fill="rgb(241,102,23)" rx="2" ry="2" />
<text  x="933.60" y="687.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1 samples, 0.01%)</title><rect x="71.6" y="805" width="0.2" height="15.0" fill="rgb(240,108,35)" rx="2" ry="2" />
<text  x="74.65" y="815.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (4 samples, 0.04%)</title><rect x="160.0" y="405" width="0.5" height="15.0" fill="rgb(207,23,35)" rx="2" ry="2" />
<text  x="162.95" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (2 samples, 0.02%)</title><rect x="754.4" y="613" width="0.2" height="15.0" fill="rgb(232,9,49)" rx="2" ry="2" />
<text  x="757.37" y="623.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="1155.9" y="693" width="0.1" height="15.0" fill="rgb(207,107,15)" rx="2" ry="2" />
<text  x="1158.91" y="703.5" ></text>
</g>
<g >
<title>__memcpy_sse2_unaligned (1 samples, 0.01%)</title><rect x="470.9" y="581" width="0.1" height="15.0" fill="rgb(222,87,36)" rx="2" ry="2" />
<text  x="473.88" y="591.5" ></text>
</g>
<g >
<title>deactivate_task (1 samples, 0.01%)</title><rect x="1123.2" y="597" width="0.2" height="15.0" fill="rgb(226,75,26)" rx="2" ry="2" />
<text  x="1126.23" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (4 samples, 0.04%)</title><rect x="160.0" y="437" width="0.5" height="15.0" fill="rgb(210,188,36)" rx="2" ry="2" />
<text  x="162.95" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (6 samples, 0.07%)</title><rect x="155.7" y="837" width="0.8" height="15.0" fill="rgb(222,34,24)" rx="2" ry="2" />
<text  x="158.72" y="847.5" ></text>
</g>
<g >
<title>[libX11.so.6.3.0] (8 samples, 0.09%)</title><rect x="1127.1" y="709" width="1.0" height="15.0" fill="rgb(216,30,22)" rx="2" ry="2" />
<text  x="1130.07" y="719.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.3" y="693" width="0.1" height="15.0" fill="rgb(253,84,9)" rx="2" ry="2" />
<text  x="180.25" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Game_Event*, std::vector&lt;Game_Event, std::allocator&lt;Game_Event&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="89.8" y="901" width="0.2" height="15.0" fill="rgb(218,168,25)" rx="2" ry="2" />
<text  x="92.85" y="911.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (1 samples, 0.01%)</title><rect x="582.5" y="373" width="0.1" height="15.0" fill="rgb(211,194,46)" rx="2" ry="2" />
<text  x="585.51" y="383.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;::~tuple (1 samples, 0.01%)</title><rect x="951.7" y="405" width="0.2" height="15.0" fill="rgb(238,109,19)" rx="2" ry="2" />
<text  x="954.74" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="1189.2" y="917" width="0.2" height="15.0" fill="rgb(232,139,25)" rx="2" ry="2" />
<text  x="1192.23" y="927.5" ></text>
</g>
<g >
<title>AudioSeCache::Decode (1 samples, 0.01%)</title><rect x="159.6" y="661" width="0.1" height="15.0" fill="rgb(227,44,5)" rx="2" ry="2" />
<text  x="162.57" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_S_value (1 samples, 0.01%)</title><rect x="1110.0" y="581" width="0.2" height="15.0" fill="rgb(205,174,14)" rx="2" ry="2" />
<text  x="1113.03" y="591.5" ></text>
</g>
<g >
<title>Cache::System (5 samples, 0.05%)</title><rect x="1110.0" y="693" width="0.7" height="15.0" fill="rgb(222,102,48)" rx="2" ry="2" />
<text  x="1113.03" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt;::push_back (1 samples, 0.01%)</title><rect x="944.1" y="597" width="0.1" height="15.0" fill="rgb(253,187,15)" rx="2" ry="2" />
<text  x="947.05" y="607.5" ></text>
</g>
<g >
<title>icu_63::UnicodeString::UnicodeString (1 samples, 0.01%)</title><rect x="175.7" y="725" width="0.1" height="15.0" fill="rgb(244,140,25)" rx="2" ry="2" />
<text  x="178.72" y="735.5" ></text>
</g>
<g >
<title>Bitmap::CheckOpacity (17 samples, 0.18%)</title><rect x="156.5" y="453" width="2.2" height="15.0" fill="rgb(252,208,7)" rx="2" ry="2" />
<text  x="159.49" y="463.5" ></text>
</g>
<g >
<title>Game_Map::SetNeedRefresh (1 samples, 0.01%)</title><rect x="864.5" y="661" width="0.1" height="15.0" fill="rgb(254,200,18)" rx="2" ry="2" />
<text  x="867.47" y="671.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (16 samples, 0.17%)</title><rect x="1126.7" y="789" width="2.0" height="15.0" fill="rgb(228,140,42)" rx="2" ry="2" />
<text  x="1129.69" y="799.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (76 samples, 0.83%)</title><rect x="947.1" y="549" width="9.8" height="15.0" fill="rgb(237,28,13)" rx="2" ry="2" />
<text  x="950.13" y="559.5" ></text>
</g>
<g >
<title>[libX11.so.6.3.0] (7 samples, 0.08%)</title><rect x="1119.1" y="661" width="0.9" height="15.0" fill="rgb(244,225,14)" rx="2" ry="2" />
<text  x="1122.13" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="174.9" y="309" width="0.2" height="15.0" fill="rgb(218,70,26)" rx="2" ry="2" />
<text  x="177.95" y="319.5" ></text>
</g>
<g >
<title>Game_Picture::GetData (1 samples, 0.01%)</title><rect x="1103.0" y="709" width="0.1" height="15.0" fill="rgb(212,216,22)" rx="2" ry="2" />
<text  x="1105.98" y="719.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="304.8" y="709" width="0.1" height="15.0" fill="rgb(246,78,52)" rx="2" ry="2" />
<text  x="307.78" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::_M_ptr (2 samples, 0.02%)</title><rect x="926.1" y="629" width="0.3" height="15.0" fill="rgb(237,6,49)" rx="2" ry="2" />
<text  x="929.11" y="639.5" ></text>
</g>
<g >
<title>scheduler_ipi (1 samples, 0.01%)</title><rect x="73.8" y="885" width="0.2" height="15.0" fill="rgb(227,119,1)" rx="2" ry="2" />
<text  x="76.83" y="895.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::CommonEvent, std::allocator&lt;RPG::CommonEvent&gt; &gt;::size (1 samples, 0.01%)</title><rect x="1096.4" y="709" width="0.2" height="15.0" fill="rgb(252,193,3)" rx="2" ry="2" />
<text  x="1099.44" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (17 samples, 0.18%)</title><rect x="156.5" y="517" width="2.2" height="15.0" fill="rgb(242,188,6)" rx="2" ry="2" />
<text  x="159.49" y="527.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (10 samples, 0.11%)</title><rect x="120.6" y="869" width="1.3" height="15.0" fill="rgb(214,48,45)" rx="2" ry="2" />
<text  x="123.60" y="879.5" ></text>
</g>
<g >
<title>Transition::Draw (1 samples, 0.01%)</title><rect x="166.9" y="805" width="0.1" height="15.0" fill="rgb(242,206,1)" rx="2" ry="2" />
<text  x="169.87" y="815.5" ></text>
</g>
<g >
<title>handle_tx_event (1 samples, 0.01%)</title><rect x="998.5" y="485" width="0.2" height="15.0" fill="rgb(253,148,22)" rx="2" ry="2" />
<text  x="1001.52" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned int*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt;::base (1 samples, 0.01%)</title><rect x="157.4" y="421" width="0.1" height="15.0" fill="rgb(208,34,19)" rx="2" ry="2" />
<text  x="160.39" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::operator= (2 samples, 0.02%)</title><rect x="1097.2" y="709" width="0.3" height="15.0" fill="rgb(223,2,13)" rx="2" ry="2" />
<text  x="1100.21" y="719.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.01%)</title><rect x="1111.1" y="549" width="0.1" height="15.0" fill="rgb(208,218,35)" rx="2" ry="2" />
<text  x="1114.05" y="559.5" ></text>
</g>
<g >
<title>Cache::Picture (2 samples, 0.02%)</title><rect x="175.8" y="757" width="0.3" height="15.0" fill="rgb(251,106,46)" rx="2" ry="2" />
<text  x="178.84" y="767.5" ></text>
</g>
<g >
<title>std::forward&lt;int&gt; (1 samples, 0.01%)</title><rect x="943.4" y="485" width="0.1" height="15.0" fill="rgb(222,209,28)" rx="2" ry="2" />
<text  x="946.41" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;short&gt;::_M_valptr (3 samples, 0.03%)</title><rect x="314.1" y="661" width="0.4" height="15.0" fill="rgb(247,219,31)" rx="2" ry="2" />
<text  x="317.13" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="481.5" y="725" width="0.1" height="15.0" fill="rgb(225,8,22)" rx="2" ry="2" />
<text  x="484.51" y="735.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="954.9" y="277" width="0.2" height="15.0" fill="rgb(219,99,39)" rx="2" ry="2" />
<text  x="957.95" y="287.5" ></text>
</g>
<g >
<title>handle_tx_event (1 samples, 0.01%)</title><rect x="957.6" y="469" width="0.2" height="15.0" fill="rgb(232,43,34)" rx="2" ry="2" />
<text  x="960.64" y="479.5" ></text>
</g>
<g >
<title>variables (3 samples, 0.03%)</title><rect x="894.8" y="645" width="0.4" height="15.0" fill="rgb(224,193,53)" rx="2" ry="2" />
<text  x="897.84" y="655.5" ></text>
</g>
<g >
<title>Game_CommonEvent::Update (45 samples, 0.49%)</title><rect x="160.7" y="885" width="5.8" height="15.0" fill="rgb(238,211,54)" rx="2" ry="2" />
<text  x="163.72" y="895.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (1 samples, 0.01%)</title><rect x="1120.8" y="597" width="0.1" height="15.0" fill="rgb(235,31,47)" rx="2" ry="2" />
<text  x="1123.79" y="607.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.01%)</title><rect x="167.1" y="389" width="0.2" height="15.0" fill="rgb(250,36,53)" rx="2" ry="2" />
<text  x="170.13" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Sprite*, std::default_delete&lt;Sprite&gt; &gt; (2 samples, 0.02%)</title><rect x="926.1" y="613" width="0.3" height="15.0" fill="rgb(236,2,43)" rx="2" ry="2" />
<text  x="929.11" y="623.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="177.3" y="405" width="0.1" height="15.0" fill="rgb(247,68,22)" rx="2" ry="2" />
<text  x="180.25" y="415.5" ></text>
</g>
<g >
<title>memmove@plt (1 samples, 0.01%)</title><rect x="955.8" y="245" width="0.2" height="15.0" fill="rgb(253,1,28)" rx="2" ry="2" />
<text  x="958.85" y="255.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.01%)</title><rect x="1109.1" y="549" width="0.2" height="15.0" fill="rgb(213,168,21)" rx="2" ry="2" />
<text  x="1112.13" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::resize (1 samples, 0.01%)</title><rect x="177.0" y="645" width="0.1" height="15.0" fill="rgb(206,69,23)" rx="2" ry="2" />
<text  x="180.00" y="655.5" ></text>
</g>
<g >
<title>FlagSet&lt;Game_Interpreter::Keys, 32ul&gt;::operator[] (4 samples, 0.04%)</title><rect x="929.2" y="645" width="0.5" height="15.0" fill="rgb(242,179,48)" rx="2" ry="2" />
<text  x="932.19" y="655.5" ></text>
</g>
<g >
<title>__libc_recvmsg (4 samples, 0.04%)</title><rect x="1120.0" y="613" width="0.5" height="15.0" fill="rgb(207,195,11)" rx="2" ry="2" />
<text  x="1123.02" y="623.5" ></text>
</g>
<g >
<title>Game_Character::IsJumping (1 samples, 0.01%)</title><rect x="1098.0" y="709" width="0.1" height="15.0" fill="rgb(220,162,1)" rx="2" ry="2" />
<text  x="1100.98" y="719.5" ></text>
</g>
<g >
<title>Game_Variables_Class::Get (36 samples, 0.39%)</title><rect x="829.1" y="661" width="4.6" height="15.0" fill="rgb(248,28,30)" rx="2" ry="2" />
<text  x="832.09" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (1 samples, 0.01%)</title><rect x="231.0" y="693" width="0.1" height="15.0" fill="rgb(236,26,14)" rx="2" ry="2" />
<text  x="233.95" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (19 samples, 0.21%)</title><rect x="1056.1" y="645" width="2.4" height="15.0" fill="rgb(226,99,22)" rx="2" ry="2" />
<text  x="1059.07" y="655.5" ></text>
</g>
<g >
<title>ChipIdToIndex (1 samples, 0.01%)</title><rect x="961.5" y="645" width="0.1" height="15.0" fill="rgb(228,180,43)" rx="2" ry="2" />
<text  x="964.48" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt; &gt; &gt;::size (1 samples, 0.01%)</title><rect x="934.2" y="645" width="0.1" height="15.0" fill="rgb(209,135,5)" rx="2" ry="2" />
<text  x="937.19" y="655.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="158.5" y="261" width="0.2" height="15.0" fill="rgb(242,111,40)" rx="2" ry="2" />
<text  x="161.54" y="271.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1119.6" y="437" width="0.2" height="15.0" fill="rgb(233,218,27)" rx="2" ry="2" />
<text  x="1122.64" y="447.5" ></text>
</g>
<g >
<title>AsyncHandler::RequestFile (1 samples, 0.01%)</title><rect x="1110.0" y="661" width="0.2" height="15.0" fill="rgb(213,73,5)" rx="2" ry="2" />
<text  x="1113.03" y="671.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (40 samples, 0.43%)</title><rect x="161.4" y="613" width="5.1" height="15.0" fill="rgb(238,191,30)" rx="2" ry="2" />
<text  x="164.36" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;TilemapLayer::TileData, std::allocator&lt;TilemapLayer::TileData&gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="110.1" y="901" width="0.1" height="15.0" fill="rgb(244,45,29)" rx="2" ry="2" />
<text  x="113.10" y="911.5" ></text>
</g>
<g >
<title>handle_irq_event (2 samples, 0.02%)</title><rect x="468.3" y="645" width="0.3" height="15.0" fill="rgb(225,215,39)" rx="2" ry="2" />
<text  x="471.31" y="655.5" ></text>
</g>
<g >
<title>[libspeexdsp.so.1.5.0] (1 samples, 0.01%)</title><rect x="161.0" y="485" width="0.1" height="15.0" fill="rgb(248,165,51)" rx="2" ry="2" />
<text  x="163.98" y="495.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1111.1" y="565" width="0.1" height="15.0" fill="rgb(254,175,48)" rx="2" ry="2" />
<text  x="1114.05" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="177.3" y="453" width="0.1" height="15.0" fill="rgb(232,11,22)" rx="2" ry="2" />
<text  x="180.25" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (3 samples, 0.03%)</title><rect x="104.7" y="901" width="0.4" height="15.0" fill="rgb(251,160,51)" rx="2" ry="2" />
<text  x="107.71" y="911.5" ></text>
</g>
<g >
<title>trb_in_td (1 samples, 0.01%)</title><rect x="889.8" y="469" width="0.2" height="15.0" fill="rgb(207,199,21)" rx="2" ry="2" />
<text  x="892.84" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (3 samples, 0.03%)</title><rect x="661.2" y="613" width="0.4" height="15.0" fill="rgb(252,60,6)" rx="2" ry="2" />
<text  x="664.20" y="623.5" ></text>
</g>
<g >
<title>_XFetchEventCookie (1 samples, 0.01%)</title><rect x="1120.7" y="677" width="0.1" height="15.0" fill="rgb(213,5,37)" rx="2" ry="2" />
<text  x="1123.66" y="687.5" ></text>
</g>
<g >
<title>__interceptor_free (1 samples, 0.01%)</title><rect x="189.7" y="661" width="0.1" height="15.0" fill="rgb(208,56,34)" rx="2" ry="2" />
<text  x="192.69" y="671.5" ></text>
</g>
<g >
<title>operator!= (1 samples, 0.01%)</title><rect x="90.6" y="901" width="0.1" height="15.0" fill="rgb(219,63,19)" rx="2" ry="2" />
<text  x="93.61" y="911.5" ></text>
</g>
<g >
<title>operator!= (1 samples, 0.01%)</title><rect x="1103.2" y="677" width="0.2" height="15.0" fill="rgb(206,92,31)" rx="2" ry="2" />
<text  x="1106.23" y="687.5" ></text>
</g>
<g >
<title>Scene::IsAsyncPending (1 samples, 0.01%)</title><rect x="81.8" y="901" width="0.1" height="15.0" fill="rgb(244,130,43)" rx="2" ry="2" />
<text  x="84.77" y="911.5" ></text>
</g>
<g >
<title>XEventsQueued (1 samples, 0.01%)</title><rect x="113.3" y="901" width="0.1" height="15.0" fill="rgb(212,198,19)" rx="2" ry="2" />
<text  x="116.30" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::Variable, std::allocator&lt;RPG::Variable&gt; &gt;::size (2 samples, 0.02%)</title><rect x="895.9" y="661" width="0.2" height="15.0" fill="rgb(227,32,1)" rx="2" ry="2" />
<text  x="898.87" y="671.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="156.4" y="85" width="0.1" height="15.0" fill="rgb(247,131,10)" rx="2" ry="2" />
<text  x="159.36" y="95.5" ></text>
</g>
<g >
<title>std::less&lt;short&gt;::operator() (8 samples, 0.09%)</title><rect x="315.3" y="693" width="1.0" height="15.0" fill="rgb(227,22,41)" rx="2" ry="2" />
<text  x="318.29" y="703.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="175.7" y="661" width="0.1" height="15.0" fill="rgb(223,199,27)" rx="2" ry="2" />
<text  x="178.72" y="671.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (62 samples, 0.67%)</title><rect x="1118.7" y="757" width="8.0" height="15.0" fill="rgb(239,147,53)" rx="2" ry="2" />
<text  x="1121.74" y="767.5" ></text>
</g>
<g >
<title>Game_Map::UpdateCommonEvents (6 samples, 0.07%)</title><rect x="169.1" y="869" width="0.7" height="15.0" fill="rgb(242,113,49)" rx="2" ry="2" />
<text  x="172.05" y="879.5" ></text>
</g>
<g >
<title>record_times (1 samples, 0.01%)</title><rect x="72.8" y="677" width="0.1" height="15.0" fill="rgb(240,120,21)" rx="2" ry="2" />
<text  x="75.80" y="687.5" ></text>
</g>
<g >
<title>Sprite_Timer::Update (1 samples, 0.01%)</title><rect x="1108.4" y="757" width="0.1" height="15.0" fill="rgb(222,106,8)" rx="2" ry="2" />
<text  x="1111.36" y="767.5" ></text>
</g>
<g >
<title>AsyncHandler::RequestFile (12 samples, 0.13%)</title><rect x="948.2" y="405" width="1.5" height="15.0" fill="rgb(244,21,10)" rx="2" ry="2" />
<text  x="951.16" y="415.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (5 samples, 0.05%)</title><rect x="155.8" y="277" width="0.7" height="15.0" fill="rgb(250,152,47)" rx="2" ry="2" />
<text  x="158.85" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;short&gt;::_M_ptr (1 samples, 0.01%)</title><rect x="84.3" y="901" width="0.2" height="15.0" fill="rgb(249,146,44)" rx="2" ry="2" />
<text  x="87.33" y="911.5" ></text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.01%)</title><rect x="72.8" y="629" width="0.1" height="15.0" fill="rgb(254,208,54)" rx="2" ry="2" />
<text  x="75.80" y="639.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, (anonymous namespace)::CacheItem, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::find (2 samples, 0.02%)</title><rect x="166.0" y="549" width="0.2" height="15.0" fill="rgb(235,12,33)" rx="2" ry="2" />
<text  x="168.97" y="559.5" ></text>
</g>
<g >
<title>__sched_text_start (2 samples, 0.02%)</title><rect x="122.1" y="805" width="0.3" height="15.0" fill="rgb(235,19,27)" rx="2" ry="2" />
<text  x="125.14" y="815.5" ></text>
</g>
<g >
<title>xhci_irq (2 samples, 0.02%)</title><rect x="74.0" y="789" width="0.2" height="15.0" fill="rgb(229,3,9)" rx="2" ry="2" />
<text  x="76.95" y="799.5" ></text>
</g>
<g >
<title>Bitmap::Create (2 samples, 0.02%)</title><rect x="155.5" y="693" width="0.2" height="15.0" fill="rgb(214,48,38)" rx="2" ry="2" />
<text  x="158.47" y="703.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1128.5" y="677" width="0.2" height="15.0" fill="rgb(214,168,35)" rx="2" ry="2" />
<text  x="1131.48" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt; (65 samples, 0.71%)</title><rect x="574.3" y="677" width="8.3" height="15.0" fill="rgb(243,173,43)" rx="2" ry="2" />
<text  x="577.30" y="687.5" ></text>
</g>
<g >
<title>error_entry (1 samples, 0.01%)</title><rect x="175.6" y="341" width="0.1" height="15.0" fill="rgb(236,18,35)" rx="2" ry="2" />
<text  x="178.59" y="351.5" ></text>
</g>
<g >
<title>Game_Map::GetWidth (1 samples, 0.01%)</title><rect x="79.1" y="901" width="0.1" height="15.0" fill="rgb(252,205,26)" rx="2" ry="2" />
<text  x="82.08" y="911.5" ></text>
</g>
<g >
<title>Bitmap::width (4 samples, 0.04%)</title><rect x="1102.5" y="693" width="0.5" height="15.0" fill="rgb(233,33,7)" rx="2" ry="2" />
<text  x="1105.46" y="703.5" ></text>
</g>
<g >
<title>std::stable_sort&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, bool (*)(Drawable const*, Drawable const*)&gt; (6 samples, 0.07%)</title><rect x="180.8" y="773" width="0.8" height="15.0" fill="rgb(244,154,27)" rx="2" ry="2" />
<text  x="183.84" y="783.5" ></text>
</g>
<g >
<title>std::move&lt;std::shared_ptr&lt;Bitmap&gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="103.9" y="901" width="0.2" height="15.0" fill="rgb(224,203,19)" rx="2" ry="2" />
<text  x="106.94" y="911.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="1120.9" y="517" width="0.1" height="15.0" fill="rgb(222,121,30)" rx="2" ry="2" />
<text  x="1123.92" y="527.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, Drawable**, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="327.3" y="661" width="0.3" height="15.0" fill="rgb(236,211,2)" rx="2" ry="2" />
<text  x="330.33" y="671.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="1189.7" y="853" width="0.2" height="15.0" fill="rgb(250,32,27)" rx="2" ry="2" />
<text  x="1192.74" y="863.5" ></text>
</g>
<g >
<title>Bitmap::StretchBlit (286 samples, 3.11%)</title><rect x="190.7" y="693" width="36.7" height="15.0" fill="rgb(207,90,19)" rx="2" ry="2" />
<text  x="193.71" y="703.5" >Bit..</text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.0" y="741" width="0.1" height="15.0" fill="rgb(254,207,53)" rx="2" ry="2" />
<text  x="180.00" y="751.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="161.1" y="437" width="0.3" height="15.0" fill="rgb(231,223,30)" rx="2" ry="2" />
<text  x="164.10" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (15 samples, 0.16%)</title><rect x="1003.0" y="629" width="1.9" height="15.0" fill="rgb(243,0,44)" rx="2" ry="2" />
<text  x="1006.01" y="639.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.01%)</title><rect x="176.0" y="469" width="0.1" height="15.0" fill="rgb(245,74,44)" rx="2" ry="2" />
<text  x="178.97" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (40 samples, 0.43%)</title><rect x="161.4" y="709" width="5.1" height="15.0" fill="rgb(254,140,46)" rx="2" ry="2" />
<text  x="164.36" y="719.5" ></text>
</g>
<g >
<title>perf_pmu_enable.part.105 (8 samples, 0.09%)</title><rect x="1121.0" y="373" width="1.1" height="15.0" fill="rgb(224,158,41)" rx="2" ry="2" />
<text  x="1124.05" y="383.5" ></text>
</g>
<g >
<title>FileRequestAsync::IsReady (83 samples, 0.90%)</title><rect x="1138.1" y="773" width="10.6" height="15.0" fill="rgb(216,115,21)" rx="2" ry="2" />
<text  x="1141.09" y="783.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="943.9" y="357" width="0.2" height="15.0" fill="rgb(227,138,8)" rx="2" ry="2" />
<text  x="946.93" y="367.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="954.9" y="309" width="0.2" height="15.0" fill="rgb(217,68,19)" rx="2" ry="2" />
<text  x="957.95" y="319.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (9 samples, 0.10%)</title><rect x="1121.0" y="597" width="1.2" height="15.0" fill="rgb(226,166,54)" rx="2" ry="2" />
<text  x="1124.05" y="607.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.01%)</title><rect x="176.0" y="549" width="0.1" height="15.0" fill="rgb(213,14,30)" rx="2" ry="2" />
<text  x="178.97" y="559.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt;::_M_head (3 samples, 0.03%)</title><rect x="96.5" y="901" width="0.4" height="15.0" fill="rgb(206,142,0)" rx="2" ry="2" />
<text  x="99.51" y="911.5" ></text>
</g>
<g >
<title>ImageBMP::ReadBMP (1 samples, 0.01%)</title><rect x="177.3" y="565" width="0.1" height="15.0" fill="rgb(205,213,2)" rx="2" ry="2" />
<text  x="180.25" y="575.5" ></text>
</g>
<g >
<title>Game_Map::GetNeedRefresh (2 samples, 0.02%)</title><rect x="1062.3" y="709" width="0.3" height="15.0" fill="rgb(229,20,14)" rx="2" ry="2" />
<text  x="1065.35" y="719.5" ></text>
</g>
<g >
<title>std::_Bit_reference::operator bool (1 samples, 0.01%)</title><rect x="483.4" y="693" width="0.2" height="15.0" fill="rgb(217,170,38)" rx="2" ry="2" />
<text  x="486.44" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="1109.8" y="725" width="0.1" height="15.0" fill="rgb(217,72,10)" rx="2" ry="2" />
<text  x="1112.77" y="735.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="889.8" y="549" width="0.2" height="15.0" fill="rgb(208,222,22)" rx="2" ry="2" />
<text  x="892.84" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (3 samples, 0.03%)</title><rect x="969.2" y="645" width="0.4" height="15.0" fill="rgb(237,17,38)" rx="2" ry="2" />
<text  x="972.17" y="655.5" ></text>
</g>
<g >
<title>TilemapLayer::Draw(int)::{lambda(int, int)#1}::operator() (1 samples, 0.01%)</title><rect x="82.5" y="901" width="0.2" height="15.0" fill="rgb(252,195,54)" rx="2" ry="2" />
<text  x="85.54" y="911.5" ></text>
</g>
<g >
<title>native_write_msr (1 samples, 0.01%)</title><rect x="165.7" y="53" width="0.1" height="15.0" fill="rgb(222,196,30)" rx="2" ry="2" />
<text  x="168.72" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;short, std::allocator&lt;short&gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="111.5" y="901" width="0.1" height="15.0" fill="rgb(218,133,29)" rx="2" ry="2" />
<text  x="114.51" y="911.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="70.7" y="693" width="0.2" height="15.0" fill="rgb(221,189,44)" rx="2" ry="2" />
<text  x="73.75" y="703.5" ></text>
</g>
<g >
<title>ptep_clear_flush (2 samples, 0.02%)</title><rect x="165.7" y="229" width="0.3" height="15.0" fill="rgb(230,49,10)" rx="2" ry="2" />
<text  x="168.72" y="239.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (42 samples, 0.46%)</title><rect x="470.1" y="645" width="5.4" height="15.0" fill="rgb(246,218,26)" rx="2" ry="2" />
<text  x="473.11" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;TilemapLayer::TileData, std::allocator&lt;TilemapLayer::TileData&gt; &gt;::operator[] (3 samples, 0.03%)</title><rect x="322.1" y="741" width="0.4" height="15.0" fill="rgb(226,48,18)" rx="2" ry="2" />
<text  x="325.08" y="751.5" ></text>
</g>
<g >
<title>[libX11.so.6.3.0] (8 samples, 0.09%)</title><rect x="1127.1" y="693" width="1.0" height="15.0" fill="rgb(226,49,36)" rx="2" ry="2" />
<text  x="1130.07" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_M_begin (4 samples, 0.04%)</title><rect x="310.7" y="709" width="0.5" height="15.0" fill="rgb(205,123,43)" rx="2" ry="2" />
<text  x="313.67" y="719.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="169.1" y="373" width="0.1" height="15.0" fill="rgb(241,51,20)" rx="2" ry="2" />
<text  x="172.05" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**&gt; (1 samples, 0.01%)</title><rect x="324.3" y="693" width="0.1" height="15.0" fill="rgb(223,42,39)" rx="2" ry="2" />
<text  x="327.26" y="703.5" ></text>
</g>
<g >
<title>Game_Interpreter_Map::ExecuteCommand (3,525 samples, 38.29%)</title><rect x="610.6" y="709" width="451.7" height="15.0" fill="rgb(224,170,48)" rx="2" ry="2" />
<text  x="613.57" y="719.5" >Game_Interpreter_Map::ExecuteCommand</text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr (1 samples, 0.01%)</title><rect x="1109.6" y="693" width="0.2" height="15.0" fill="rgb(248,225,45)" rx="2" ry="2" />
<text  x="1112.64" y="703.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (2 samples, 0.02%)</title><rect x="175.8" y="773" width="0.3" height="15.0" fill="rgb(214,145,2)" rx="2" ry="2" />
<text  x="178.84" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::Variable, std::allocator&lt;RPG::Variable&gt; &gt;::size (1 samples, 0.01%)</title><rect x="110.0" y="901" width="0.1" height="15.0" fill="rgb(237,99,6)" rx="2" ry="2" />
<text  x="112.97" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (5 samples, 0.05%)</title><rect x="108.0" y="901" width="0.7" height="15.0" fill="rgb(220,215,9)" rx="2" ry="2" />
<text  x="111.04" y="911.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;::_Tuple_impl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, void&gt; (1 samples, 0.01%)</title><rect x="951.6" y="373" width="0.1" height="15.0" fill="rgb(231,75,39)" rx="2" ry="2" />
<text  x="954.62" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_nanosleep (27 samples, 0.29%)</title><rect x="1123.1" y="677" width="3.5" height="15.0" fill="rgb(209,127,50)" rx="2" ry="2" />
<text  x="1126.10" y="687.5" ></text>
</g>
<g >
<title>Game_Variables_Class::Set (146 samples, 1.59%)</title><rect x="876.5" y="661" width="18.7" height="15.0" fill="rgb(234,133,0)" rx="2" ry="2" />
<text  x="879.51" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_S_key (12 samples, 0.13%)</title><rect x="316.3" y="709" width="1.5" height="15.0" fill="rgb(234,150,18)" rx="2" ry="2" />
<text  x="319.31" y="719.5" ></text>
</g>
<g >
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.01%)</title><rect x="947.0" y="533" width="0.1" height="15.0" fill="rgb(218,76,2)" rx="2" ry="2" />
<text  x="950.00" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (52 samples, 0.56%)</title><rect x="1027.4" y="661" width="6.6" height="15.0" fill="rgb(248,51,44)" rx="2" ry="2" />
<text  x="1030.36" y="671.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="918.4" y="613" width="0.2" height="15.0" fill="rgb(233,146,16)" rx="2" ry="2" />
<text  x="921.42" y="623.5" ></text>
</g>
<g >
<title>__x64_sys_sched_yield (2 samples, 0.02%)</title><rect x="122.1" y="853" width="0.3" height="15.0" fill="rgb(224,65,45)" rx="2" ry="2" />
<text  x="125.14" y="863.5" ></text>
</g>
<g >
<title>Window_Base::Update (5 samples, 0.05%)</title><rect x="1110.0" y="725" width="0.7" height="15.0" fill="rgb(238,69,53)" rx="2" ry="2" />
<text  x="1113.03" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Window_Gold, std::default_delete&lt;Window_Gold&gt; &gt;::get (1 samples, 0.01%)</title><rect x="1112.1" y="741" width="0.1" height="15.0" fill="rgb(244,227,14)" rx="2" ry="2" />
<text  x="1115.08" y="751.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="176.0" y="437" width="0.1" height="15.0" fill="rgb(227,48,45)" rx="2" ry="2" />
<text  x="178.97" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (60 samples, 0.65%)</title><rect x="971.1" y="645" width="7.7" height="15.0" fill="rgb(213,182,46)" rx="2" ry="2" />
<text  x="974.10" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (21 samples, 0.23%)</title><rect x="251.3" y="677" width="2.7" height="15.0" fill="rgb(225,138,22)" rx="2" ry="2" />
<text  x="254.33" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="652.2" y="629" width="0.2" height="15.0" fill="rgb(244,206,34)" rx="2" ry="2" />
<text  x="655.23" y="639.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1006.2" y="661" width="0.1" height="15.0" fill="rgb(243,1,53)" rx="2" ry="2" />
<text  x="1009.21" y="671.5" ></text>
</g>
<g >
<title>std::bitset&lt;36ul&gt;::reference::operator= (1 samples, 0.01%)</title><rect x="480.7" y="773" width="0.2" height="15.0" fill="rgb(227,209,40)" rx="2" ry="2" />
<text  x="483.74" y="783.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::operator()&lt;FileRequestResult*, void&gt; (2 samples, 0.02%)</title><rect x="166.6" y="805" width="0.3" height="15.0" fill="rgb(242,39,6)" rx="2" ry="2" />
<text  x="169.62" y="815.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (3 samples, 0.03%)</title><rect x="159.2" y="757" width="0.4" height="15.0" fill="rgb(222,121,39)" rx="2" ry="2" />
<text  x="162.18" y="767.5" ></text>
</g>
<g >
<title>Game_Variables_Class::Set (2 samples, 0.02%)</title><rect x="80.2" y="901" width="0.3" height="15.0" fill="rgb(213,26,12)" rx="2" ry="2" />
<text  x="83.23" y="911.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (1 samples, 0.01%)</title><rect x="961.7" y="565" width="0.2" height="15.0" fill="rgb(213,11,29)" rx="2" ry="2" />
<text  x="964.74" y="575.5" ></text>
</g>
<g >
<title>FileFinder::MakePath (2 samples, 0.02%)</title><rect x="1110.8" y="661" width="0.3" height="15.0" fill="rgb(226,211,52)" rx="2" ry="2" />
<text  x="1113.80" y="671.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (2 samples, 0.02%)</title><rect x="167.0" y="773" width="0.3" height="15.0" fill="rgb(245,211,3)" rx="2" ry="2" />
<text  x="170.00" y="783.5" ></text>
</g>
<g >
<title>TilemapLayer::Draw(int)::{lambda(int, int)#2}::operator() (1 samples, 0.01%)</title><rect x="82.7" y="901" width="0.1" height="15.0" fill="rgb(230,56,48)" rx="2" ry="2" />
<text  x="85.67" y="911.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (13 samples, 0.14%)</title><rect x="167.3" y="613" width="1.6" height="15.0" fill="rgb(218,96,21)" rx="2" ry="2" />
<text  x="170.26" y="623.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (1 samples, 0.01%)</title><rect x="175.8" y="565" width="0.2" height="15.0" fill="rgb(220,189,51)" rx="2" ry="2" />
<text  x="178.84" y="575.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.02%)</title><rect x="166.2" y="373" width="0.3" height="15.0" fill="rgb(251,23,37)" rx="2" ry="2" />
<text  x="169.23" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="166.5" y="597" width="0.1" height="15.0" fill="rgb(250,127,27)" rx="2" ry="2" />
<text  x="169.49" y="607.5" ></text>
</g>
<g >
<title>ttwu_do_activate (1 samples, 0.01%)</title><rect x="828.6" y="517" width="0.1" height="15.0" fill="rgb(206,226,35)" rx="2" ry="2" />
<text  x="831.58" y="527.5" ></text>
</g>
<g >
<title>__vfs_write (9 samples, 0.10%)</title><rect x="72.0" y="837" width="1.2" height="15.0" fill="rgb(208,31,1)" rx="2" ry="2" />
<text  x="75.03" y="847.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (2 samples, 0.02%)</title><rect x="174.8" y="613" width="0.3" height="15.0" fill="rgb(244,197,49)" rx="2" ry="2" />
<text  x="177.82" y="623.5" ></text>
</g>
<g >
<title>Player::MainLoop (7,876 samples, 85.54%)</title><rect x="179.3" y="853" width="1009.4" height="15.0" fill="rgb(228,1,18)" rx="2" ry="2" />
<text  x="182.30" y="863.5" >Player::MainLoop</text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::end (7 samples, 0.08%)</title><rect x="318.1" y="709" width="0.9" height="15.0" fill="rgb(241,5,37)" rx="2" ry="2" />
<text  x="321.10" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::base (3 samples, 0.03%)</title><rect x="573.9" y="677" width="0.4" height="15.0" fill="rgb(250,6,12)" rx="2" ry="2" />
<text  x="576.92" y="687.5" ></text>
</g>
<g >
<title>Output::Debug (1 samples, 0.01%)</title><rect x="160.7" y="629" width="0.1" height="15.0" fill="rgb(234,80,17)" rx="2" ry="2" />
<text  x="163.72" y="639.5" ></text>
</g>
<g >
<title>std::default_delete&lt;AudioDecoder&gt;::operator() (1 samples, 0.01%)</title><rect x="167.1" y="485" width="0.2" height="15.0" fill="rgb(225,166,34)" rx="2" ry="2" />
<text  x="170.13" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 0.01%)</title><rect x="175.8" y="357" width="0.2" height="15.0" fill="rgb(245,152,45)" rx="2" ry="2" />
<text  x="178.84" y="367.5" ></text>
</g>
<g >
<title>Graphics::SortDrawableList (2 samples, 0.02%)</title><rect x="325.5" y="661" width="0.3" height="15.0" fill="rgb(238,194,20)" rx="2" ry="2" />
<text  x="328.54" y="671.5" ></text>
</g>
<g >
<title>pixman_image_composite32@plt (1 samples, 0.01%)</title><rect x="189.3" y="693" width="0.1" height="15.0" fill="rgb(239,98,40)" rx="2" ry="2" />
<text  x="192.30" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="1111.4" y="677" width="0.2" height="15.0" fill="rgb(240,143,0)" rx="2" ry="2" />
<text  x="1114.44" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt; &gt;::_M_invoke (1 samples, 0.01%)</title><rect x="159.6" y="773" width="0.1" height="15.0" fill="rgb(208,20,41)" rx="2" ry="2" />
<text  x="162.57" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::operator++ (1 samples, 0.01%)</title><rect x="955.1" y="293" width="0.1" height="15.0" fill="rgb(213,148,16)" rx="2" ry="2" />
<text  x="958.08" y="303.5" ></text>
</g>
<g >
<title>Opacity::IsSplit (2 samples, 0.02%)</title><rect x="278.1" y="693" width="0.3" height="15.0" fill="rgb(223,205,33)" rx="2" ry="2" />
<text  x="281.12" y="703.5" ></text>
</g>
<g >
<title>net_rx_action (1 samples, 0.01%)</title><rect x="121.8" y="677" width="0.1" height="15.0" fill="rgb(240,108,19)" rx="2" ry="2" />
<text  x="124.76" y="687.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Transition*, std::default_delete&lt;Transition&gt; &gt; (1 samples, 0.01%)</title><rect x="1169.9" y="757" width="0.1" height="15.0" fill="rgb(245,103,50)" rx="2" ry="2" />
<text  x="1172.88" y="767.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.01%)</title><rect x="477.8" y="645" width="0.1" height="15.0" fill="rgb(224,187,29)" rx="2" ry="2" />
<text  x="480.80" y="655.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (1 samples, 0.01%)</title><rect x="165.7" y="85" width="0.1" height="15.0" fill="rgb(243,105,36)" rx="2" ry="2" />
<text  x="168.72" y="95.5" ></text>
</g>
<g >
<title>TilemapLayer::Draw(int)::{lambda(int, int)#1}::operator() (1 samples, 0.01%)</title><rect x="240.7" y="757" width="0.1" height="15.0" fill="rgb(227,85,6)" rx="2" ry="2" />
<text  x="243.69" y="767.5" ></text>
</g>
<g >
<title>operator== (1 samples, 0.01%)</title><rect x="90.7" y="901" width="0.2" height="15.0" fill="rgb(242,46,48)" rx="2" ry="2" />
<text  x="93.74" y="911.5" ></text>
</g>
<g >
<title>psi_task_change (1 samples, 0.01%)</title><rect x="828.6" y="485" width="0.1" height="15.0" fill="rgb(211,16,45)" rx="2" ry="2" />
<text  x="831.58" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (10 samples, 0.11%)</title><rect x="655.9" y="613" width="1.3" height="15.0" fill="rgb(235,10,53)" rx="2" ry="2" />
<text  x="658.94" y="623.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (1 samples, 0.01%)</title><rect x="961.7" y="581" width="0.2" height="15.0" fill="rgb(225,12,10)" rx="2" ry="2" />
<text  x="964.74" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="155.2" y="581" width="0.1" height="15.0" fill="rgb(212,25,29)" rx="2" ry="2" />
<text  x="158.21" y="591.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="889.8" y="533" width="0.2" height="15.0" fill="rgb(249,198,36)" rx="2" ry="2" />
<text  x="892.84" y="543.5" ></text>
</g>
<g >
<title>Cache::Picture (3 samples, 0.03%)</title><rect x="159.2" y="597" width="0.4" height="15.0" fill="rgb(246,1,42)" rx="2" ry="2" />
<text  x="162.18" y="607.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.04%)</title><rect x="1127.2" y="581" width="0.5" height="15.0" fill="rgb(254,213,33)" rx="2" ry="2" />
<text  x="1130.20" y="591.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.01%)</title><rect x="1004.9" y="565" width="0.2" height="15.0" fill="rgb(238,31,1)" rx="2" ry="2" />
<text  x="1007.93" y="575.5" ></text>
</g>
<g >
<title>AsyncHandler::RequestFile (1 samples, 0.01%)</title><rect x="935.7" y="645" width="0.2" height="15.0" fill="rgb(219,130,27)" rx="2" ry="2" />
<text  x="938.72" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="155.5" y="581" width="0.2" height="15.0" fill="rgb(216,84,6)" rx="2" ry="2" />
<text  x="158.47" y="591.5" ></text>
</g>
<g >
<title>Game_Player::CheckEventTriggerHere (1 samples, 0.01%)</title><rect x="1099.3" y="741" width="0.1" height="15.0" fill="rgb(246,128,12)" rx="2" ry="2" />
<text  x="1102.26" y="751.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="1108.9" y="597" width="0.4" height="15.0" fill="rgb(211,187,19)" rx="2" ry="2" />
<text  x="1111.87" y="607.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.01%)</title><rect x="482.3" y="677" width="0.1" height="15.0" fill="rgb(254,133,50)" rx="2" ry="2" />
<text  x="485.28" y="687.5" ></text>
</g>
<g >
<title>ucnv_createConverter_63 (1 samples, 0.01%)</title><rect x="175.7" y="693" width="0.1" height="15.0" fill="rgb(206,174,7)" rx="2" ry="2" />
<text  x="178.72" y="703.5" ></text>
</g>
<g >
<title>anon_vma_clone (1 samples, 0.01%)</title><rect x="175.8" y="261" width="0.2" height="15.0" fill="rgb(218,229,38)" rx="2" ry="2" />
<text  x="178.84" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data@plt (1 samples, 0.01%)</title><rect x="940.3" y="565" width="0.2" height="15.0" fill="rgb(222,18,29)" rx="2" ry="2" />
<text  x="943.34" y="575.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (2 samples, 0.02%)</title><rect x="188.9" y="661" width="0.3" height="15.0" fill="rgb(205,101,48)" rx="2" ry="2" />
<text  x="191.92" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="935.9" y="261" width="0.1" height="15.0" fill="rgb(229,9,30)" rx="2" ry="2" />
<text  x="938.85" y="271.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (2 samples, 0.02%)</title><rect x="166.6" y="837" width="0.3" height="15.0" fill="rgb(242,79,30)" rx="2" ry="2" />
<text  x="169.62" y="847.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="1006.2" y="597" width="0.1" height="15.0" fill="rgb(207,17,39)" rx="2" ry="2" />
<text  x="1009.21" y="607.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 1ul, 3ul&gt;::__less (2 samples, 0.02%)</title><rect x="166.0" y="453" width="0.2" height="15.0" fill="rgb(227,187,25)" rx="2" ry="2" />
<text  x="168.97" y="463.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (72 samples, 0.78%)</title><rect x="753.0" y="645" width="9.2" height="15.0" fill="rgb(251,17,49)" rx="2" ry="2" />
<text  x="755.96" y="655.5" ></text>
</g>
<g >
<title>GetParallaxParams (1 samples, 0.01%)</title><rect x="1107.2" y="741" width="0.1" height="15.0" fill="rgb(228,24,29)" rx="2" ry="2" />
<text  x="1110.21" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::get (1 samples, 0.01%)</title><rect x="179.2" y="821" width="0.1" height="15.0" fill="rgb(247,130,49)" rx="2" ry="2" />
<text  x="182.18" y="831.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (2 samples, 0.02%)</title><rect x="928.7" y="661" width="0.2" height="15.0" fill="rgb(254,212,34)" rx="2" ry="2" />
<text  x="931.67" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (76 samples, 0.83%)</title><rect x="947.1" y="565" width="9.8" height="15.0" fill="rgb(239,106,9)" rx="2" ry="2" />
<text  x="950.13" y="575.5" ></text>
</g>
<g >
<title>poll_schedule_timeout.constprop.14 (8 samples, 0.09%)</title><rect x="1121.0" y="485" width="1.1" height="15.0" fill="rgb(249,220,42)" rx="2" ry="2" />
<text  x="1124.05" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="159.6" y="709" width="0.1" height="15.0" fill="rgb(214,26,18)" rx="2" ry="2" />
<text  x="162.57" y="719.5" ></text>
</g>
<g >
<title>irq_chip_ack_parent (1 samples, 0.01%)</title><rect x="59.6" y="789" width="0.1" height="15.0" fill="rgb(239,57,9)" rx="2" ry="2" />
<text  x="62.60" y="799.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (16 samples, 0.17%)</title><rect x="935.9" y="645" width="2.0" height="15.0" fill="rgb(216,150,43)" rx="2" ry="2" />
<text  x="938.85" y="655.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="168.9" y="469" width="0.2" height="15.0" fill="rgb(218,46,21)" rx="2" ry="2" />
<text  x="171.92" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="327.2" y="677" width="0.1" height="15.0" fill="rgb(219,151,13)" rx="2" ry="2" />
<text  x="330.20" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Scene, (__gnu_cxx::_Lock_policy)2&gt;::get (23 samples, 0.25%)</title><rect x="1079.5" y="677" width="3.0" height="15.0" fill="rgb(245,189,12)" rx="2" ry="2" />
<text  x="1082.52" y="687.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.01%)</title><rect x="482.7" y="741" width="0.1" height="15.0" fill="rgb(254,134,48)" rx="2" ry="2" />
<text  x="485.67" y="751.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="468.4" y="613" width="0.2" height="15.0" fill="rgb(215,208,34)" rx="2" ry="2" />
<text  x="471.44" y="623.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="158.5" y="309" width="0.2" height="15.0" fill="rgb(214,156,9)" rx="2" ry="2" />
<text  x="161.54" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::end (1 samples, 0.01%)</title><rect x="1167.7" y="757" width="0.1" height="15.0" fill="rgb(205,186,26)" rx="2" ry="2" />
<text  x="1170.70" y="767.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.8" y="421" width="0.2" height="15.0" fill="rgb(218,214,50)" rx="2" ry="2" />
<text  x="178.84" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="175.6" y="661" width="0.1" height="15.0" fill="rgb(222,32,0)" rx="2" ry="2" />
<text  x="178.59" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="177.3" y="421" width="0.1" height="15.0" fill="rgb(211,52,5)" rx="2" ry="2" />
<text  x="180.25" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="89.3" y="901" width="0.2" height="15.0" fill="rgb(213,199,50)" rx="2" ry="2" />
<text  x="92.33" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="477.9" y="677" width="0.2" height="15.0" fill="rgb(249,134,10)" rx="2" ry="2" />
<text  x="480.92" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_M_lower_bound (2 samples, 0.02%)</title><rect x="1110.2" y="629" width="0.2" height="15.0" fill="rgb(222,93,29)" rx="2" ry="2" />
<text  x="1113.15" y="639.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (2 samples, 0.02%)</title><rect x="155.5" y="885" width="0.2" height="15.0" fill="rgb(220,18,1)" rx="2" ry="2" />
<text  x="158.47" y="895.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (1 samples, 0.01%)</title><rect x="1119.6" y="469" width="0.2" height="15.0" fill="rgb(220,19,2)" rx="2" ry="2" />
<text  x="1122.64" y="479.5" ></text>
</g>
<g >
<title>std::find_if&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, Input::UiSource::Update()::{lambda(int)#1}&gt; (12 samples, 0.13%)</title><rect x="479.1" y="741" width="1.5" height="15.0" fill="rgb(225,135,18)" rx="2" ry="2" />
<text  x="482.08" y="751.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (8 samples, 0.09%)</title><rect x="120.9" y="805" width="1.0" height="15.0" fill="rgb(252,93,28)" rx="2" ry="2" />
<text  x="123.86" y="815.5" ></text>
</g>
<g >
<title>Game_Picture::Update (52 samples, 0.56%)</title><rect x="1099.5" y="741" width="6.7" height="15.0" fill="rgb(208,105,33)" rx="2" ry="2" />
<text  x="1102.52" y="751.5" ></text>
</g>
<g >
<title>Bitmap::BlitFast (80 samples, 0.87%)</title><rect x="276.8" y="725" width="10.3" height="15.0" fill="rgb(223,179,7)" rx="2" ry="2" />
<text  x="279.84" y="735.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="957.1" y="357" width="0.2" height="15.0" fill="rgb(228,93,4)" rx="2" ry="2" />
<text  x="960.13" y="367.5" ></text>
</g>
<g >
<title>__GI__IO_file_open (2 samples, 0.02%)</title><rect x="155.5" y="453" width="0.2" height="15.0" fill="rgb(245,130,54)" rx="2" ry="2" />
<text  x="158.47" y="463.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="175.6" y="869" width="0.2" height="15.0" fill="rgb(253,203,50)" rx="2" ry="2" />
<text  x="178.59" y="879.5" ></text>
</g>
<g >
<title>Rect::Rect (11 samples, 0.12%)</title><rect x="294.1" y="725" width="1.4" height="15.0" fill="rgb(233,22,28)" rx="2" ry="2" />
<text  x="297.14" y="735.5" ></text>
</g>
<g >
<title>sockfd_lookup_light (1 samples, 0.01%)</title><rect x="1120.4" y="517" width="0.1" height="15.0" fill="rgb(228,29,0)" rx="2" ry="2" />
<text  x="1123.41" y="527.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandShowPicture (5 samples, 0.05%)</title><rect x="169.2" y="789" width="0.6" height="15.0" fill="rgb(207,226,1)" rx="2" ry="2" />
<text  x="172.18" y="799.5" ></text>
</g>
<g >
<title>do_syscall_64 (9 samples, 0.10%)</title><rect x="1121.0" y="533" width="1.2" height="15.0" fill="rgb(254,36,12)" rx="2" ry="2" />
<text  x="1124.05" y="543.5" ></text>
</g>
<g >
<title>FileFinder::MakePath (1 samples, 0.01%)</title><rect x="165.3" y="533" width="0.2" height="15.0" fill="rgb(216,221,37)" rx="2" ry="2" />
<text  x="168.33" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator* (12 samples, 0.13%)</title><rect x="969.6" y="645" width="1.5" height="15.0" fill="rgb(236,83,14)" rx="2" ry="2" />
<text  x="972.56" y="655.5" ></text>
</g>
<g >
<title>Scene::IsAsyncPending (6 samples, 0.07%)</title><rect x="1106.4" y="757" width="0.8" height="15.0" fill="rgb(226,126,38)" rx="2" ry="2" />
<text  x="1109.44" y="767.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="1189.9" y="837" width="0.1" height="15.0" fill="rgb(235,143,35)" rx="2" ry="2" />
<text  x="1192.87" y="847.5" ></text>
</g>
<g >
<title>Opacity::IsTransparent (3 samples, 0.03%)</title><rect x="278.0" y="709" width="0.4" height="15.0" fill="rgb(242,75,32)" rx="2" ry="2" />
<text  x="280.99" y="719.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="1058.9" y="677" width="0.2" height="15.0" fill="rgb(243,183,24)" rx="2" ry="2" />
<text  x="1061.89" y="687.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="1189.7" y="901" width="0.2" height="15.0" fill="rgb(246,73,42)" rx="2" ry="2" />
<text  x="1192.74" y="911.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (3 samples, 0.03%)</title><rect x="1130.9" y="725" width="0.4" height="15.0" fill="rgb(230,3,15)" rx="2" ry="2" />
<text  x="1133.92" y="735.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.01%)</title><rect x="1108.2" y="725" width="0.2" height="15.0" fill="rgb(235,155,52)" rx="2" ry="2" />
<text  x="1111.23" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Scene, (__gnu_cxx::_Lock_policy)2&gt;::get (2 samples, 0.02%)</title><rect x="1188.5" y="805" width="0.2" height="15.0" fill="rgb(228,141,40)" rx="2" ry="2" />
<text  x="1191.46" y="815.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (2 samples, 0.02%)</title><rect x="1131.0" y="709" width="0.3" height="15.0" fill="rgb(242,23,50)" rx="2" ry="2" />
<text  x="1134.04" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (11 samples, 0.12%)</title><rect x="997.1" y="629" width="1.4" height="15.0" fill="rgb(209,183,32)" rx="2" ry="2" />
<text  x="1000.11" y="639.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (8 samples, 0.09%)</title><rect x="113.4" y="901" width="1.1" height="15.0" fill="rgb(242,210,50)" rx="2" ry="2" />
<text  x="116.43" y="911.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="175.8" y="789" width="0.3" height="15.0" fill="rgb(237,38,40)" rx="2" ry="2" />
<text  x="178.84" y="799.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;::~_Tuple_impl (1 samples, 0.01%)</title><rect x="951.7" y="373" width="0.2" height="15.0" fill="rgb(208,25,25)" rx="2" ry="2" />
<text  x="954.74" y="383.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.01%)</title><rect x="943.9" y="373" width="0.2" height="15.0" fill="rgb(221,112,46)" rx="2" ry="2" />
<text  x="946.93" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="480.1" y="677" width="0.1" height="15.0" fill="rgb(210,102,43)" rx="2" ry="2" />
<text  x="483.10" y="687.5" ></text>
</g>
<g >
<title>Sprite::SetFlashEffect (1 samples, 0.01%)</title><rect x="1103.2" y="693" width="0.2" height="15.0" fill="rgb(217,179,41)" rx="2" ry="2" />
<text  x="1106.23" y="703.5" ></text>
</g>
<g >
<title>sockfd_lookup_light (1 samples, 0.01%)</title><rect x="1127.6" y="533" width="0.1" height="15.0" fill="rgb(212,80,48)" rx="2" ry="2" />
<text  x="1130.58" y="543.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (2,980 samples, 32.37%)</title><rect x="629.0" y="693" width="382.0" height="15.0" fill="rgb(254,112,31)" rx="2" ry="2" />
<text  x="632.03" y="703.5" >Game_Interpreter::ExecuteCommand</text>
</g>
<g >
<title>Game_Map::Refresh (2 samples, 0.02%)</title><rect x="1094.6" y="725" width="0.3" height="15.0" fill="rgb(232,98,32)" rx="2" ry="2" />
<text  x="1097.65" y="735.5" ></text>
</g>
<g >
<title>Sprite::SetFlashEffect (1 samples, 0.01%)</title><rect x="952.0" y="389" width="0.1" height="15.0" fill="rgb(228,153,4)" rx="2" ry="2" />
<text  x="955.00" y="399.5" ></text>
</g>
<g >
<title>enqueue_task_fair (1 samples, 0.01%)</title><rect x="72.2" y="693" width="0.1" height="15.0" fill="rgb(243,38,49)" rx="2" ry="2" />
<text  x="75.16" y="703.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (5 samples, 0.05%)</title><rect x="246.2" y="693" width="0.6" height="15.0" fill="rgb(223,185,20)" rx="2" ry="2" />
<text  x="249.21" y="703.5" ></text>
</g>
<g >
<title>AsyncHandler::IsImportantFilePending (297 samples, 3.23%)</title><rect x="1131.3" y="805" width="38.1" height="15.0" fill="rgb(219,60,2)" rx="2" ry="2" />
<text  x="1134.30" y="815.5" >Asy..</text>
</g>
<g >
<title>std::get&lt;1ul, Game_Picture*, std::_Placeholder&lt;1&gt; &gt; (1 samples, 0.01%)</title><rect x="102.9" y="901" width="0.1" height="15.0" fill="rgb(229,27,10)" rx="2" ry="2" />
<text  x="105.92" y="911.5" ></text>
</g>
<g >
<title>put_timespec64 (3 samples, 0.03%)</title><rect x="1116.9" y="677" width="0.4" height="15.0" fill="rgb(221,16,36)" rx="2" ry="2" />
<text  x="1119.95" y="687.5" ></text>
</g>
<g >
<title>Game_Character::GetBushDepth (2 samples, 0.02%)</title><rect x="1107.6" y="741" width="0.2" height="15.0" fill="rgb(233,5,51)" rx="2" ry="2" />
<text  x="1110.59" y="751.5" ></text>
</g>
<g >
<title>std::default_delete&lt;AudioDecoder&gt;::operator() (1 samples, 0.01%)</title><rect x="169.1" y="453" width="0.1" height="15.0" fill="rgb(229,147,38)" rx="2" ry="2" />
<text  x="172.05" y="463.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.01%)</title><rect x="482.7" y="757" width="0.1" height="15.0" fill="rgb(243,70,33)" rx="2" ry="2" />
<text  x="485.67" y="767.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="167.0" y="501" width="0.1" height="15.0" fill="rgb(234,206,4)" rx="2" ry="2" />
<text  x="170.00" y="511.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.02%)</title><rect x="166.0" y="437" width="0.2" height="15.0" fill="rgb(239,58,54)" rx="2" ry="2" />
<text  x="168.97" y="447.5" ></text>
</g>
<g >
<title>Graphics::IsTransitionPending (5 samples, 0.05%)</title><rect x="1169.4" y="805" width="0.6" height="15.0" fill="rgb(246,227,17)" rx="2" ry="2" />
<text  x="1172.37" y="815.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="166.5" y="773" width="0.1" height="15.0" fill="rgb(216,228,41)" rx="2" ry="2" />
<text  x="169.49" y="783.5" ></text>
</g>
<g >
<title>prepare_transfer (1 samples, 0.01%)</title><rect x="582.5" y="341" width="0.1" height="15.0" fill="rgb(251,119,22)" rx="2" ry="2" />
<text  x="585.51" y="351.5" ></text>
</g>
<g >
<title>Sdl2Ui::GetTicks (50 samples, 0.54%)</title><rect x="1112.3" y="805" width="6.4" height="15.0" fill="rgb(230,96,53)" rx="2" ry="2" />
<text  x="1115.33" y="815.5" ></text>
</g>
<g >
<title>vfs_writev (1 samples, 0.01%)</title><rect x="1120.9" y="469" width="0.1" height="15.0" fill="rgb(210,12,41)" rx="2" ry="2" />
<text  x="1123.92" y="479.5" ></text>
</g>
<g >
<title>Bitmap::Blit (113 samples, 1.23%)</title><rect x="262.4" y="725" width="14.4" height="15.0" fill="rgb(220,52,3)" rx="2" ry="2" />
<text  x="265.35" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::base (13 samples, 0.14%)</title><rect x="86.6" y="901" width="1.7" height="15.0" fill="rgb(214,186,40)" rx="2" ry="2" />
<text  x="89.64" y="911.5" ></text>
</g>
<g >
<title>Game_Picture::SyncCurrentToFinish (3 samples, 0.03%)</title><rect x="959.3" y="645" width="0.4" height="15.0" fill="rgb(253,0,33)" rx="2" ry="2" />
<text  x="962.31" y="655.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.01%)</title><rect x="176.0" y="485" width="0.1" height="15.0" fill="rgb(232,64,30)" rx="2" ry="2" />
<text  x="178.97" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::swap (1 samples, 0.01%)</title><rect x="944.1" y="501" width="0.1" height="15.0" fill="rgb(239,9,42)" rx="2" ry="2" />
<text  x="947.05" y="511.5" ></text>
</g>
<g >
<title>update_min_vruntime (1 samples, 0.01%)</title><rect x="61.3" y="709" width="0.1" height="15.0" fill="rgb(205,160,42)" rx="2" ry="2" />
<text  x="64.27" y="719.5" ></text>
</g>
<g >
<title>memset@plt (1 samples, 0.01%)</title><rect x="482.0" y="741" width="0.2" height="15.0" fill="rgb(251,121,42)" rx="2" ry="2" />
<text  x="485.03" y="751.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (3 samples, 0.03%)</title><rect x="181.2" y="741" width="0.4" height="15.0" fill="rgb(243,220,2)" rx="2" ry="2" />
<text  x="184.23" y="751.5" ></text>
</g>
<g >
<title>Sprite::GetZ (1 samples, 0.01%)</title><rect x="325.8" y="661" width="0.1" height="15.0" fill="rgb(210,125,16)" rx="2" ry="2" />
<text  x="328.79" y="671.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (6 samples, 0.07%)</title><rect x="1116.6" y="693" width="0.7" height="15.0" fill="rgb(222,56,20)" rx="2" ry="2" />
<text  x="1119.56" y="703.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (3 samples, 0.03%)</title><rect x="159.2" y="549" width="0.4" height="15.0" fill="rgb(216,108,14)" rx="2" ry="2" />
<text  x="162.18" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (1 samples, 0.01%)</title><rect x="829.0" y="645" width="0.1" height="15.0" fill="rgb(234,185,39)" rx="2" ry="2" />
<text  x="831.96" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::_M_ptr (4 samples, 0.04%)</title><rect x="100.5" y="901" width="0.5" height="15.0" fill="rgb(227,125,15)" rx="2" ry="2" />
<text  x="103.48" y="911.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="806.4" y="517" width="0.1" height="15.0" fill="rgb(243,65,53)" rx="2" ry="2" />
<text  x="809.41" y="527.5" ></text>
</g>
<g >
<title>Cache::Picture (1 samples, 0.01%)</title><rect x="177.3" y="741" width="0.1" height="15.0" fill="rgb(254,88,30)" rx="2" ry="2" />
<text  x="180.25" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;, std::allocator&lt;std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt; &gt; &gt;::_M_erase_at_end (2 samples, 0.02%)</title><rect x="957.1" y="565" width="0.3" height="15.0" fill="rgb(234,23,47)" rx="2" ry="2" />
<text  x="960.13" y="575.5" ></text>
</g>
<g >
<title>native_write_msr (7 samples, 0.08%)</title><rect x="1129.4" y="549" width="0.9" height="15.0" fill="rgb(207,222,25)" rx="2" ry="2" />
<text  x="1132.38" y="559.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (4 samples, 0.04%)</title><rect x="226.9" y="629" width="0.5" height="15.0" fill="rgb(250,182,46)" rx="2" ry="2" />
<text  x="229.85" y="639.5" ></text>
</g>
<g >
<title>mutex_unlock (1 samples, 0.01%)</title><rect x="1127.5" y="469" width="0.1" height="15.0" fill="rgb(253,138,18)" rx="2" ry="2" />
<text  x="1130.46" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (27 samples, 0.29%)</title><rect x="1123.1" y="709" width="3.5" height="15.0" fill="rgb(217,158,44)" rx="2" ry="2" />
<text  x="1126.10" y="719.5" ></text>
</g>
<g >
<title>Game_Picture::RequestPictureSprite (1 samples, 0.01%)</title><rect x="166.5" y="901" width="0.1" height="15.0" fill="rgb(226,213,45)" rx="2" ry="2" />
<text  x="169.49" y="911.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1058.5" y="645" width="0.1" height="15.0" fill="rgb(215,141,6)" rx="2" ry="2" />
<text  x="1061.50" y="655.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="1158.9" y="661" width="0.1" height="15.0" fill="rgb(243,148,36)" rx="2" ry="2" />
<text  x="1161.86" y="671.5" ></text>
</g>
<g >
<title>vfs_read (4 samples, 0.04%)</title><rect x="71.3" y="853" width="0.5" height="15.0" fill="rgb(207,201,53)" rx="2" ry="2" />
<text  x="74.26" y="863.5" ></text>
</g>
<g >
<title>do_wp_page (1 samples, 0.01%)</title><rect x="73.6" y="837" width="0.1" height="15.0" fill="rgb(224,29,41)" rx="2" ry="2" />
<text  x="76.57" y="847.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (4 samples, 0.04%)</title><rect x="1120.0" y="645" width="0.5" height="15.0" fill="rgb(244,29,2)" rx="2" ry="2" />
<text  x="1123.02" y="655.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (1 samples, 0.01%)</title><rect x="1128.2" y="725" width="0.2" height="15.0" fill="rgb(237,68,20)" rx="2" ry="2" />
<text  x="1131.23" y="735.5" ></text>
</g>
<g >
<title>std::locale::~locale@plt (1 samples, 0.01%)</title><rect x="482.4" y="773" width="0.1" height="15.0" fill="rgb(215,93,51)" rx="2" ry="2" />
<text  x="485.41" y="783.5" ></text>
</g>
<g >
<title>task_tick_fair (1 samples, 0.01%)</title><rect x="943.0" y="293" width="0.2" height="15.0" fill="rgb(213,193,23)" rx="2" ry="2" />
<text  x="946.03" y="303.5" ></text>
</g>
<g >
<title>perf_pmu_enable.part.105 (23 samples, 0.25%)</title><rect x="1123.4" y="565" width="2.9" height="15.0" fill="rgb(250,212,44)" rx="2" ry="2" />
<text  x="1126.36" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_read (2 samples, 0.02%)</title><rect x="57.9" y="901" width="0.3" height="15.0" fill="rgb(213,144,20)" rx="2" ry="2" />
<text  x="60.93" y="911.5" ></text>
</g>
<g >
<title>find_vma (1 samples, 0.01%)</title><rect x="177.0" y="453" width="0.1" height="15.0" fill="rgb(246,67,17)" rx="2" ry="2" />
<text  x="180.00" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_openat (2 samples, 0.02%)</title><rect x="155.5" y="389" width="0.2" height="15.0" fill="rgb(229,95,47)" rx="2" ry="2" />
<text  x="158.47" y="399.5" ></text>
</g>
<g >
<title>Game_System::GetAllowMenu (2 samples, 0.02%)</title><rect x="1098.9" y="709" width="0.2" height="15.0" fill="rgb(233,146,44)" rx="2" ry="2" />
<text  x="1101.88" y="719.5" ></text>
</g>
<g >
<title>_XReply (9 samples, 0.10%)</title><rect x="1121.0" y="645" width="1.2" height="15.0" fill="rgb(227,193,43)" rx="2" ry="2" />
<text  x="1124.05" y="655.5" ></text>
</g>
<g >
<title>AudioDecoder::Decode (1 samples, 0.01%)</title><rect x="159.7" y="581" width="0.1" height="15.0" fill="rgb(224,71,27)" rx="2" ry="2" />
<text  x="162.69" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt; &gt;::_M_invoke (16 samples, 0.17%)</title><rect x="935.9" y="581" width="2.0" height="15.0" fill="rgb(207,175,12)" rx="2" ry="2" />
<text  x="938.85" y="591.5" ></text>
</g>
<g >
<title>[[stack]] (291 samples, 3.16%)</title><rect x="75.0" y="917" width="37.3" height="15.0" fill="rgb(216,147,12)" rx="2" ry="2" />
<text  x="77.98" y="927.5" >[[s..</text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="259.4" y="645" width="0.1" height="15.0" fill="rgb(211,47,47)" rx="2" ry="2" />
<text  x="262.41" y="655.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="174.9" y="293" width="0.2" height="15.0" fill="rgb(223,181,15)" rx="2" ry="2" />
<text  x="177.95" y="303.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (13 samples, 0.14%)</title><rect x="167.3" y="693" width="1.6" height="15.0" fill="rgb(234,25,51)" rx="2" ry="2" />
<text  x="170.26" y="703.5" ></text>
</g>
<g >
<title>pthread_self (1 samples, 0.01%)</title><rect x="477.4" y="693" width="0.1" height="15.0" fill="rgb(221,0,47)" rx="2" ry="2" />
<text  x="480.41" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (42 samples, 0.46%)</title><rect x="590.8" y="661" width="5.4" height="15.0" fill="rgb(230,49,53)" rx="2" ry="2" />
<text  x="593.84" y="671.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (6 samples, 0.07%)</title><rect x="160.0" y="677" width="0.7" height="15.0" fill="rgb(227,103,51)" rx="2" ry="2" />
<text  x="162.95" y="687.5" ></text>
</g>
<g >
<title>Game_System::SePlay (1 samples, 0.01%)</title><rect x="169.1" y="773" width="0.1" height="15.0" fill="rgb(207,224,45)" rx="2" ry="2" />
<text  x="172.05" y="783.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy (18 samples, 0.20%)</title><rect x="300.0" y="677" width="2.3" height="15.0" fill="rgb(232,194,31)" rx="2" ry="2" />
<text  x="303.03" y="687.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.6" y="453" width="0.1" height="15.0" fill="rgb(249,136,53)" rx="2" ry="2" />
<text  x="178.59" y="463.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (4 samples, 0.04%)</title><rect x="950.6" y="309" width="0.5" height="15.0" fill="rgb(207,13,1)" rx="2" ry="2" />
<text  x="953.59" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (2 samples, 0.02%)</title><rect x="562.0" y="693" width="0.3" height="15.0" fill="rgb(252,41,45)" rx="2" ry="2" />
<text  x="565.00" y="703.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (76 samples, 0.83%)</title><rect x="947.1" y="581" width="9.8" height="15.0" fill="rgb(229,208,26)" rx="2" ry="2" />
<text  x="950.13" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::base (5 samples, 0.05%)</title><rect x="1043.6" y="645" width="0.7" height="15.0" fill="rgb(253,220,50)" rx="2" ry="2" />
<text  x="1046.64" y="655.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="1148.6" y="629" width="0.1" height="15.0" fill="rgb(240,5,33)" rx="2" ry="2" />
<text  x="1151.60" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; const*, std::vector&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt;, std::allocator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="288.6" y="693" width="0.2" height="15.0" fill="rgb(209,3,22)" rx="2" ry="2" />
<text  x="291.63" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (4 samples, 0.04%)</title><rect x="1009.8" y="677" width="0.5" height="15.0" fill="rgb(243,209,49)" rx="2" ry="2" />
<text  x="1012.80" y="687.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="160.3" y="277" width="0.2" height="15.0" fill="rgb(216,192,15)" rx="2" ry="2" />
<text  x="163.34" y="287.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="70.7" y="709" width="0.2" height="15.0" fill="rgb(224,1,16)" rx="2" ry="2" />
<text  x="73.75" y="719.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (2 samples, 0.02%)</title><rect x="166.6" y="757" width="0.3" height="15.0" fill="rgb(215,200,50)" rx="2" ry="2" />
<text  x="169.62" y="767.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.01%)</title><rect x="175.1" y="901" width="0.1" height="15.0" fill="rgb(251,61,36)" rx="2" ry="2" />
<text  x="178.07" y="911.5" ></text>
</g>
<g >
<title>Game_Picture::Show (18 samples, 0.20%)</title><rect x="156.5" y="885" width="2.3" height="15.0" fill="rgb(237,111,33)" rx="2" ry="2" />
<text  x="159.49" y="895.5" ></text>
</g>
<g >
<title>Scene_Map::Update (4,910 samples, 53.33%)</title><rect x="483.1" y="805" width="629.2" height="15.0" fill="rgb(231,81,47)" rx="2" ry="2" />
<text  x="486.05" y="815.5" >Scene_Map::Update</text>
</g>
<g >
<title>_IO_new_fclose (2 samples, 0.02%)</title><rect x="160.2" y="357" width="0.3" height="15.0" fill="rgb(251,92,10)" rx="2" ry="2" />
<text  x="163.21" y="367.5" ></text>
</g>
<g >
<title>FileRequestAsync::CallListeners (6 samples, 0.07%)</title><rect x="155.7" y="869" width="0.8" height="15.0" fill="rgb(252,49,31)" rx="2" ry="2" />
<text  x="158.72" y="879.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1155.9" y="725" width="0.1" height="15.0" fill="rgb(211,5,8)" rx="2" ry="2" />
<text  x="1158.91" y="735.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="70.7" y="677" width="0.2" height="15.0" fill="rgb(249,193,18)" rx="2" ry="2" />
<text  x="73.75" y="687.5" ></text>
</g>
<g >
<title>hrtimer_nanosleep (15 samples, 0.16%)</title><rect x="1128.9" y="709" width="1.9" height="15.0" fill="rgb(239,94,33)" rx="2" ry="2" />
<text  x="1131.87" y="719.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;int&gt;::~weak_ptr (1 samples, 0.01%)</title><rect x="957.3" y="469" width="0.1" height="15.0" fill="rgb(244,211,50)" rx="2" ry="2" />
<text  x="960.26" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="155.5" y="741" width="0.2" height="15.0" fill="rgb(231,162,28)" rx="2" ry="2" />
<text  x="158.47" y="751.5" ></text>
</g>
<g >
<title>account_process_tick (1 samples, 0.01%)</title><rect x="805.9" y="517" width="0.1" height="15.0" fill="rgb(235,189,11)" rx="2" ry="2" />
<text  x="808.89" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="175.8" y="661" width="0.3" height="15.0" fill="rgb(254,61,7)" rx="2" ry="2" />
<text  x="178.84" y="671.5" ></text>
</g>
<g >
<title>Game_Picture::GetData (2 samples, 0.02%)</title><rect x="939.1" y="645" width="0.2" height="15.0" fill="rgb(241,14,17)" rx="2" ry="2" />
<text  x="942.06" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (5 samples, 0.05%)</title><rect x="169.2" y="661" width="0.6" height="15.0" fill="rgb(232,227,32)" rx="2" ry="2" />
<text  x="172.18" y="671.5" ></text>
</g>
<g >
<title>Sprite::~Sprite (11 samples, 0.12%)</title><rect x="954.7" y="373" width="1.4" height="15.0" fill="rgb(208,77,33)" rx="2" ry="2" />
<text  x="957.69" y="383.5" ></text>
</g>
<g >
<title>Game_System::SePlay (1 samples, 0.01%)</title><rect x="159.6" y="853" width="0.1" height="15.0" fill="rgb(226,133,29)" rx="2" ry="2" />
<text  x="162.57" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_valptr (8 samples, 0.09%)</title><rect x="1181.0" y="741" width="1.1" height="15.0" fill="rgb(247,49,54)" rx="2" ry="2" />
<text  x="1184.03" y="751.5" ></text>
</g>
<g >
<title>Game_Variables_Class::Get (1 samples, 0.01%)</title><rect x="1006.1" y="677" width="0.1" height="15.0" fill="rgb(241,75,30)" rx="2" ry="2" />
<text  x="1009.09" y="687.5" ></text>
</g>
<g >
<title>Game_Picture::SyncCurrentToFinish (2 samples, 0.02%)</title><rect x="1100.5" y="725" width="0.3" height="15.0" fill="rgb(206,163,34)" rx="2" ry="2" />
<text  x="1103.54" y="735.5" ></text>
</g>
<g >
<title>hrtimer_try_to_cancel (1 samples, 0.01%)</title><rect x="1126.4" y="645" width="0.2" height="15.0" fill="rgb(211,219,36)" rx="2" ry="2" />
<text  x="1129.43" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="166.5" y="549" width="0.1" height="15.0" fill="rgb(251,84,13)" rx="2" ry="2" />
<text  x="169.49" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (17 samples, 0.18%)</title><rect x="156.5" y="501" width="2.2" height="15.0" fill="rgb(248,184,3)" rx="2" ry="2" />
<text  x="159.49" y="511.5" ></text>
</g>
<g >
<title>Sdl2Ui::ProcessEvent (62 samples, 0.67%)</title><rect x="1118.7" y="789" width="8.0" height="15.0" fill="rgb(221,223,23)" rx="2" ry="2" />
<text  x="1121.74" y="799.5" ></text>
</g>
<g >
<title>__blk_mq_delay_run_hw_queue (1 samples, 0.01%)</title><rect x="156.2" y="117" width="0.2" height="15.0" fill="rgb(206,198,27)" rx="2" ry="2" />
<text  x="159.23" y="127.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.3" y="709" width="0.1" height="15.0" fill="rgb(252,22,49)" rx="2" ry="2" />
<text  x="180.25" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;AudioSeData, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (6 samples, 0.07%)</title><rect x="936.2" y="453" width="0.8" height="15.0" fill="rgb(216,36,44)" rx="2" ry="2" />
<text  x="939.24" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::end (13 samples, 0.14%)</title><rect x="760.5" y="613" width="1.7" height="15.0" fill="rgb(251,85,10)" rx="2" ry="2" />
<text  x="763.52" y="623.5" ></text>
</g>
<g >
<title>AsyncHandler::IsFilePending (127 samples, 1.38%)</title><rect x="1170.1" y="773" width="16.3" height="15.0" fill="rgb(205,34,37)" rx="2" ry="2" />
<text  x="1173.13" y="783.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="952.3" y="325" width="0.1" height="15.0" fill="rgb(211,55,2)" rx="2" ry="2" />
<text  x="955.26" y="335.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (1 samples, 0.01%)</title><rect x="229.7" y="517" width="0.1" height="15.0" fill="rgb(214,60,41)" rx="2" ry="2" />
<text  x="232.67" y="527.5" ></text>
</g>
<g >
<title>Game_Interpreter_Map::ExecuteCommand (1 samples, 0.01%)</title><rect x="159.6" y="901" width="0.1" height="15.0" fill="rgb(216,159,7)" rx="2" ry="2" />
<text  x="162.57" y="911.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (5 samples, 0.05%)</title><rect x="160.7" y="661" width="0.7" height="15.0" fill="rgb(240,220,39)" rx="2" ry="2" />
<text  x="163.72" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (1 samples, 0.01%)</title><rect x="227.7" y="709" width="0.2" height="15.0" fill="rgb(253,26,47)" rx="2" ry="2" />
<text  x="230.75" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.01%)</title><rect x="174.8" y="389" width="0.1" height="15.0" fill="rgb(243,141,2)" rx="2" ry="2" />
<text  x="177.82" y="399.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.02%)</title><rect x="155.0" y="741" width="0.2" height="15.0" fill="rgb(236,147,42)" rx="2" ry="2" />
<text  x="157.95" y="751.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="1119.3" y="565" width="0.5" height="15.0" fill="rgb(222,50,9)" rx="2" ry="2" />
<text  x="1122.25" y="575.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="122.4" y="885" width="0.1" height="15.0" fill="rgb(249,111,44)" rx="2" ry="2" />
<text  x="125.40" y="895.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="561.9" y="645" width="0.1" height="15.0" fill="rgb(252,58,41)" rx="2" ry="2" />
<text  x="564.87" y="655.5" ></text>
</g>
<g >
<title>std::__merge_adaptive&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, long, Drawable**, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (3 samples, 0.03%)</title><rect x="324.3" y="725" width="0.3" height="15.0" fill="rgb(233,173,29)" rx="2" ry="2" />
<text  x="327.26" y="735.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (1 samples, 0.01%)</title><rect x="169.1" y="741" width="0.1" height="15.0" fill="rgb(243,9,53)" rx="2" ry="2" />
<text  x="172.05" y="751.5" ></text>
</g>
<g >
<title>Utils::Tokenize (1 samples, 0.01%)</title><rect x="155.3" y="661" width="0.2" height="15.0" fill="rgb(219,71,1)" rx="2" ry="2" />
<text  x="158.34" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_create_storage (1 samples, 0.01%)</title><rect x="175.6" y="549" width="0.1" height="15.0" fill="rgb(215,167,36)" rx="2" ry="2" />
<text  x="178.59" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="935.0" y="629" width="0.1" height="15.0" fill="rgb(205,182,37)" rx="2" ry="2" />
<text  x="937.95" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.01%)</title><rect x="942.6" y="597" width="0.2" height="15.0" fill="rgb(245,149,48)" rx="2" ry="2" />
<text  x="945.64" y="607.5" ></text>
</g>
<g >
<title>Color::Color (1 samples, 0.01%)</title><rect x="1103.1" y="677" width="0.1" height="15.0" fill="rgb(239,32,38)" rx="2" ry="2" />
<text  x="1106.11" y="687.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="944.8" y="549" width="0.4" height="15.0" fill="rgb(216,229,37)" rx="2" ry="2" />
<text  x="947.82" y="559.5" ></text>
</g>
<g >
<title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="71.0" y="773" width="0.1" height="15.0" fill="rgb(234,191,19)" rx="2" ry="2" />
<text  x="74.01" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="950.2" y="277" width="0.1" height="15.0" fill="rgb(233,226,24)" rx="2" ry="2" />
<text  x="953.21" y="287.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (50 samples, 0.54%)</title><rect x="1112.3" y="789" width="6.4" height="15.0" fill="rgb(250,100,17)" rx="2" ry="2" />
<text  x="1115.33" y="799.5" ></text>
</g>
<g >
<title>Graphics::GlobalDraw (1 samples, 0.01%)</title><rect x="166.9" y="821" width="0.1" height="15.0" fill="rgb(244,220,25)" rx="2" ry="2" />
<text  x="169.87" y="831.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="159.8" y="469" width="0.2" height="15.0" fill="rgb(248,145,48)" rx="2" ry="2" />
<text  x="162.82" y="479.5" ></text>
</g>
<g >
<title>Opacity::IsSplit (3 samples, 0.03%)</title><rect x="264.9" y="693" width="0.4" height="15.0" fill="rgb(233,70,22)" rx="2" ry="2" />
<text  x="267.92" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;int, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;int&gt;, int&gt; (5 samples, 0.05%)</title><rect x="943.4" y="549" width="0.7" height="15.0" fill="rgb(225,74,27)" rx="2" ry="2" />
<text  x="946.41" y="559.5" ></text>
</g>
<g >
<title>MapUpdateAsyncContext::IsActive (1 samples, 0.01%)</title><rect x="80.7" y="901" width="0.2" height="15.0" fill="rgb(238,11,2)" rx="2" ry="2" />
<text  x="83.75" y="911.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::operator= (1 samples, 0.01%)</title><rect x="954.4" y="405" width="0.2" height="15.0" fill="rgb(233,113,50)" rx="2" ry="2" />
<text  x="957.44" y="415.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (11 samples, 0.12%)</title><rect x="1120.8" y="693" width="1.4" height="15.0" fill="rgb(241,19,36)" rx="2" ry="2" />
<text  x="1123.79" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="178.8" y="917" width="0.1" height="15.0" fill="rgb(247,163,4)" rx="2" ry="2" />
<text  x="181.79" y="927.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="174.9" y="261" width="0.2" height="15.0" fill="rgb(224,105,43)" rx="2" ry="2" />
<text  x="177.95" y="271.5" ></text>
</g>
<g >
<title>std::move&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="955.8" y="309" width="0.2" height="15.0" fill="rgb(223,218,46)" rx="2" ry="2" />
<text  x="958.85" y="319.5" ></text>
</g>
<g >
<title>Rect::IsOutOfBounds (1 samples, 0.01%)</title><rect x="230.4" y="725" width="0.2" height="15.0" fill="rgb(248,227,35)" rx="2" ry="2" />
<text  x="233.44" y="735.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (7 samples, 0.08%)</title><rect x="327.7" y="693" width="0.9" height="15.0" fill="rgb(210,92,12)" rx="2" ry="2" />
<text  x="330.72" y="703.5" ></text>
</g>
<g >
<title>dput (1 samples, 0.01%)</title><rect x="160.3" y="213" width="0.2" height="15.0" fill="rgb(226,61,23)" rx="2" ry="2" />
<text  x="163.34" y="223.5" ></text>
</g>
<g >
<title>ext4_readpages (1 samples, 0.01%)</title><rect x="156.4" y="197" width="0.1" height="15.0" fill="rgb(210,148,4)" rx="2" ry="2" />
<text  x="159.36" y="207.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, Sprite*, std::default_delete&lt;Sprite&gt; &gt; (1 samples, 0.01%)</title><rect x="176.9" y="901" width="0.1" height="15.0" fill="rgb(240,49,39)" rx="2" ry="2" />
<text  x="179.87" y="911.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (2 samples, 0.02%)</title><rect x="114.2" y="869" width="0.3" height="15.0" fill="rgb(215,70,48)" rx="2" ry="2" />
<text  x="117.20" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_S_left (1 samples, 0.01%)</title><rect x="93.2" y="901" width="0.1" height="15.0" fill="rgb(227,129,3)" rx="2" ry="2" />
<text  x="96.18" y="911.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (1 samples, 0.01%)</title><rect x="901.0" y="661" width="0.1" height="15.0" fill="rgb(225,114,43)" rx="2" ry="2" />
<text  x="903.99" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::get (2 samples, 0.02%)</title><rect x="242.2" y="725" width="0.3" height="15.0" fill="rgb(241,111,39)" rx="2" ry="2" />
<text  x="245.23" y="735.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="961.9" y="597" width="0.1" height="15.0" fill="rgb(227,213,0)" rx="2" ry="2" />
<text  x="964.87" y="607.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="957.6" y="517" width="0.2" height="15.0" fill="rgb(233,209,27)" rx="2" ry="2" />
<text  x="960.64" y="527.5" ></text>
</g>
<g >
<title>x86_pmu_enable (8 samples, 0.09%)</title><rect x="1121.0" y="357" width="1.1" height="15.0" fill="rgb(208,102,14)" rx="2" ry="2" />
<text  x="1124.05" y="367.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (1 samples, 0.01%)</title><rect x="58.2" y="901" width="0.1" height="15.0" fill="rgb(237,91,53)" rx="2" ry="2" />
<text  x="61.19" y="911.5" ></text>
</g>
<g >
<title>pixman_image_get_width (2 samples, 0.02%)</title><rect x="1102.7" y="677" width="0.3" height="15.0" fill="rgb(241,226,41)" rx="2" ry="2" />
<text  x="1105.72" y="687.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.02%)</title><rect x="943.8" y="421" width="0.3" height="15.0" fill="rgb(240,222,50)" rx="2" ry="2" />
<text  x="946.80" y="431.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="175.6" y="821" width="0.2" height="15.0" fill="rgb(236,83,7)" rx="2" ry="2" />
<text  x="178.59" y="831.5" ></text>
</g>
<g >
<title>do_wp_page (1 samples, 0.01%)</title><rect x="176.0" y="421" width="0.1" height="15.0" fill="rgb(246,144,28)" rx="2" ry="2" />
<text  x="178.97" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_read (1 samples, 0.01%)</title><rect x="155.7" y="405" width="0.1" height="15.0" fill="rgb(212,0,46)" rx="2" ry="2" />
<text  x="158.72" y="415.5" ></text>
</g>
<g >
<title>Game_Map::LoopHorizontal (1 samples, 0.01%)</title><rect x="961.7" y="645" width="0.2" height="15.0" fill="rgb(217,164,30)" rx="2" ry="2" />
<text  x="964.74" y="655.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="942.6" y="485" width="0.2" height="15.0" fill="rgb(216,147,23)" rx="2" ry="2" />
<text  x="945.64" y="495.5" ></text>
</g>
<g >
<title>ImageBMP::ReadBMP (1 samples, 0.01%)</title><rect x="176.0" y="565" width="0.1" height="15.0" fill="rgb(226,224,8)" rx="2" ry="2" />
<text  x="178.97" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt; &gt;::_M_invoke (1 samples, 0.01%)</title><rect x="159.1" y="757" width="0.1" height="15.0" fill="rgb(213,170,3)" rx="2" ry="2" />
<text  x="162.05" y="767.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;std::move_iterator&lt;unsigned char*&gt;, unsigned char*&gt; (1 samples, 0.01%)</title><rect x="159.6" y="565" width="0.1" height="15.0" fill="rgb(217,35,17)" rx="2" ry="2" />
<text  x="162.57" y="575.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="102.4" y="901" width="0.1" height="15.0" fill="rgb(239,107,22)" rx="2" ry="2" />
<text  x="105.41" y="911.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (1 samples, 0.01%)</title><rect x="477.8" y="741" width="0.1" height="15.0" fill="rgb(234,59,4)" rx="2" ry="2" />
<text  x="480.80" y="751.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (2 samples, 0.02%)</title><rect x="175.6" y="901" width="0.2" height="15.0" fill="rgb(236,151,45)" rx="2" ry="2" />
<text  x="178.59" y="911.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="74.9" y="885" width="0.1" height="15.0" fill="rgb(245,171,45)" rx="2" ry="2" />
<text  x="77.85" y="895.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;int, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::deallocate (5 samples, 0.05%)</title><rect x="958.2" y="517" width="0.6" height="15.0" fill="rgb(221,17,1)" rx="2" ry="2" />
<text  x="961.15" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;::_M_create (2 samples, 0.02%)</title><rect x="155.0" y="789" width="0.2" height="15.0" fill="rgb(207,32,15)" rx="2" ry="2" />
<text  x="157.95" y="799.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (16 samples, 0.17%)</title><rect x="1126.7" y="757" width="2.0" height="15.0" fill="rgb(254,212,23)" rx="2" ry="2" />
<text  x="1129.69" y="767.5" ></text>
</g>
<g >
<title>Game_Variables_Class::Get (2 samples, 0.02%)</title><rect x="932.1" y="645" width="0.3" height="15.0" fill="rgb(208,146,41)" rx="2" ry="2" />
<text  x="935.14" y="655.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.02%)</title><rect x="161.1" y="517" width="0.3" height="15.0" fill="rgb(248,119,12)" rx="2" ry="2" />
<text  x="164.10" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::size (12 samples, 0.13%)</title><rect x="1060.3" y="693" width="1.5" height="15.0" fill="rgb(230,33,22)" rx="2" ry="2" />
<text  x="1063.30" y="703.5" ></text>
</g>
<g >
<title>std::less&lt;short&gt;::operator() (1 samples, 0.01%)</title><rect x="103.2" y="901" width="0.1" height="15.0" fill="rgb(216,109,20)" rx="2" ry="2" />
<text  x="106.17" y="911.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (5 samples, 0.05%)</title><rect x="169.2" y="725" width="0.6" height="15.0" fill="rgb(222,207,17)" rx="2" ry="2" />
<text  x="172.18" y="735.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (16 samples, 0.17%)</title><rect x="935.9" y="597" width="2.0" height="15.0" fill="rgb(253,130,46)" rx="2" ry="2" />
<text  x="938.85" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="177.0" y="885" width="0.1" height="15.0" fill="rgb(225,132,54)" rx="2" ry="2" />
<text  x="180.00" y="895.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="115.1" y="901" width="0.1" height="15.0" fill="rgb(248,44,28)" rx="2" ry="2" />
<text  x="118.09" y="911.5" ></text>
</g>
<g >
<title>std::move_backward&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="326.6" y="677" width="0.1" height="15.0" fill="rgb(217,204,35)" rx="2" ry="2" />
<text  x="329.56" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1 samples, 0.01%)</title><rect x="482.9" y="741" width="0.2" height="15.0" fill="rgb(208,147,50)" rx="2" ry="2" />
<text  x="485.92" y="751.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="1110.8" y="645" width="0.1" height="15.0" fill="rgb(224,181,12)" rx="2" ry="2" />
<text  x="1113.80" y="655.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="900.7" y="613" width="0.2" height="15.0" fill="rgb(245,216,35)" rx="2" ry="2" />
<text  x="903.74" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::operator bool (1 samples, 0.01%)</title><rect x="179.4" y="821" width="0.2" height="15.0" fill="rgb(253,211,54)" rx="2" ry="2" />
<text  x="182.43" y="831.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt; (1 samples, 0.01%)</title><rect x="116.9" y="901" width="0.1" height="15.0" fill="rgb(252,10,1)" rx="2" ry="2" />
<text  x="119.89" y="911.5" ></text>
</g>
<g >
<title>blk_mq_sched_dispatch_requests (1 samples, 0.01%)</title><rect x="156.2" y="85" width="0.2" height="15.0" fill="rgb(217,30,0)" rx="2" ry="2" />
<text  x="159.23" y="95.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (1 samples, 0.01%)</title><rect x="159.1" y="821" width="0.1" height="15.0" fill="rgb(226,172,9)" rx="2" ry="2" />
<text  x="162.05" y="831.5" ></text>
</g>
<g >
<title>Graphics::Draw (1 samples, 0.01%)</title><rect x="166.9" y="837" width="0.1" height="15.0" fill="rgb(222,211,5)" rx="2" ry="2" />
<text  x="169.87" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_valptr (7 samples, 0.08%)</title><rect x="95.2" y="901" width="0.9" height="15.0" fill="rgb(218,72,17)" rx="2" ry="2" />
<text  x="98.23" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (2 samples, 0.02%)</title><rect x="755.8" y="597" width="0.2" height="15.0" fill="rgb(249,2,47)" rx="2" ry="2" />
<text  x="758.78" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (7 samples, 0.08%)</title><rect x="56.9" y="917" width="0.9" height="15.0" fill="rgb(247,42,15)" rx="2" ry="2" />
<text  x="59.91" y="927.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.01%)</title><rect x="477.3" y="709" width="0.1" height="15.0" fill="rgb(208,11,0)" rx="2" ry="2" />
<text  x="480.28" y="719.5" ></text>
</g>
<g >
<title>usb_submit_urb (1 samples, 0.01%)</title><rect x="957.6" y="357" width="0.2" height="15.0" fill="rgb(231,54,9)" rx="2" ry="2" />
<text  x="960.64" y="367.5" ></text>
</g>
<g >
<title>pixman_region32_rectangles (1 samples, 0.01%)</title><rect x="287.0" y="693" width="0.1" height="15.0" fill="rgb(214,62,31)" rx="2" ry="2" />
<text  x="289.96" y="703.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="889.8" y="501" width="0.2" height="15.0" fill="rgb(237,122,37)" rx="2" ry="2" />
<text  x="892.84" y="511.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.03%)</title><rect x="944.8" y="565" width="0.4" height="15.0" fill="rgb(242,18,7)" rx="2" ry="2" />
<text  x="947.82" y="575.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="548.5" y="645" width="0.2" height="15.0" fill="rgb(239,48,47)" rx="2" ry="2" />
<text  x="551.54" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (18 samples, 0.20%)</title><rect x="652.4" y="629" width="2.3" height="15.0" fill="rgb(226,186,22)" rx="2" ry="2" />
<text  x="655.35" y="639.5" ></text>
</g>
<g >
<title>copyout (1 samples, 0.01%)</title><rect x="156.0" y="245" width="0.1" height="15.0" fill="rgb(222,127,10)" rx="2" ry="2" />
<text  x="158.98" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="1110.0" y="629" width="0.2" height="15.0" fill="rgb(206,180,48)" rx="2" ry="2" />
<text  x="1113.03" y="639.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="169.1" y="645" width="0.1" height="15.0" fill="rgb(212,177,5)" rx="2" ry="2" />
<text  x="172.05" y="655.5" ></text>
</g>
<g >
<title>__fget (1 samples, 0.01%)</title><rect x="71.9" y="821" width="0.1" height="15.0" fill="rgb(205,177,6)" rx="2" ry="2" />
<text  x="74.90" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="180.6" y="773" width="0.1" height="15.0" fill="rgb(208,164,19)" rx="2" ry="2" />
<text  x="183.59" y="783.5" ></text>
</g>
<g >
<title>Scene::HasRequestedScene (3 samples, 0.03%)</title><rect x="81.4" y="901" width="0.4" height="15.0" fill="rgb(241,189,27)" rx="2" ry="2" />
<text  x="84.39" y="911.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="175.6" y="741" width="0.1" height="15.0" fill="rgb(237,173,21)" rx="2" ry="2" />
<text  x="178.59" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="155.2" y="597" width="0.1" height="15.0" fill="rgb(230,111,11)" rx="2" ry="2" />
<text  x="158.21" y="607.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt; (1 samples, 0.01%)</title><rect x="97.3" y="901" width="0.1" height="15.0" fill="rgb(220,195,47)" rx="2" ry="2" />
<text  x="100.28" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt;::_M_erase (2 samples, 0.02%)</title><rect x="955.7" y="325" width="0.3" height="15.0" fill="rgb(212,94,21)" rx="2" ry="2" />
<text  x="958.72" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (9 samples, 0.10%)</title><rect x="1059.1" y="693" width="1.2" height="15.0" fill="rgb(248,12,23)" rx="2" ry="2" />
<text  x="1062.15" y="703.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (1 samples, 0.01%)</title><rect x="177.3" y="885" width="0.1" height="15.0" fill="rgb(239,155,48)" rx="2" ry="2" />
<text  x="180.25" y="895.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::operator()&lt;FileRequestResult*, void&gt; (16 samples, 0.17%)</title><rect x="935.9" y="565" width="2.0" height="15.0" fill="rgb(219,101,35)" rx="2" ry="2" />
<text  x="938.85" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="175.6" y="853" width="0.2" height="15.0" fill="rgb(236,13,46)" rx="2" ry="2" />
<text  x="178.59" y="863.5" ></text>
</g>
<g >
<title>run_rebalance_domains (3 samples, 0.03%)</title><rect x="806.0" y="565" width="0.4" height="15.0" fill="rgb(238,48,53)" rx="2" ry="2" />
<text  x="809.02" y="575.5" ></text>
</g>
<g >
<title>Game_Picture::RequestPictureSprite (1 samples, 0.01%)</title><rect x="168.9" y="741" width="0.2" height="15.0" fill="rgb(250,97,6)" rx="2" ry="2" />
<text  x="171.92" y="751.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;Input::UiSource::Update()::{lambda(int)#1}&gt; &gt; (12 samples, 0.13%)</title><rect x="479.1" y="709" width="1.5" height="15.0" fill="rgb(234,95,48)" rx="2" ry="2" />
<text  x="482.08" y="719.5" ></text>
</g>
<g >
<title>std::map&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, (anonymous namespace)::CacheItem, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="169.7" y="517" width="0.1" height="15.0" fill="rgb(228,163,17)" rx="2" ry="2" />
<text  x="172.69" y="527.5" ></text>
</g>
<g >
<title>x86_pmu_enable (23 samples, 0.25%)</title><rect x="1123.4" y="549" width="2.9" height="15.0" fill="rgb(244,128,41)" rx="2" ry="2" />
<text  x="1126.36" y="559.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (2 samples, 0.02%)</title><rect x="155.5" y="549" width="0.2" height="15.0" fill="rgb(230,228,3)" rx="2" ry="2" />
<text  x="158.47" y="559.5" ></text>
</g>
<g >
<title>_IO_new_file_close_it (2 samples, 0.02%)</title><rect x="160.2" y="341" width="0.3" height="15.0" fill="rgb(211,171,31)" rx="2" ry="2" />
<text  x="163.21" y="351.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (18 samples, 0.20%)</title><rect x="156.5" y="661" width="2.3" height="15.0" fill="rgb(243,2,12)" rx="2" ry="2" />
<text  x="159.49" y="671.5" ></text>
</g>
<g >
<title>intel_pmu_disable_all (1 samples, 0.01%)</title><rect x="156.1" y="149" width="0.1" height="15.0" fill="rgb(231,55,40)" rx="2" ry="2" />
<text  x="159.11" y="159.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (2 samples, 0.02%)</title><rect x="475.6" y="725" width="0.3" height="15.0" fill="rgb(212,41,25)" rx="2" ry="2" />
<text  x="478.62" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="160.7" y="485" width="0.1" height="15.0" fill="rgb(225,33,14)" rx="2" ry="2" />
<text  x="163.72" y="495.5" ></text>
</g>
<g >
<title>Game_Picture::Show (40 samples, 0.43%)</title><rect x="161.4" y="805" width="5.1" height="15.0" fill="rgb(210,137,3)" rx="2" ry="2" />
<text  x="164.36" y="815.5" ></text>
</g>
<g >
<title>pixman_image_unref (4 samples, 0.04%)</title><rect x="189.6" y="693" width="0.5" height="15.0" fill="rgb(241,191,24)" rx="2" ry="2" />
<text  x="192.56" y="703.5" ></text>
</g>
<g >
<title>__interceptor_recvmsg (6 samples, 0.07%)</title><rect x="1119.1" y="613" width="0.8" height="15.0" fill="rgb(243,179,11)" rx="2" ry="2" />
<text  x="1122.13" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (1 samples, 0.01%)</title><rect x="97.9" y="901" width="0.1" height="15.0" fill="rgb(218,193,46)" rx="2" ry="2" />
<text  x="100.92" y="911.5" ></text>
</g>
<g >
<title>Game_Picture::RequestPictureSprite (6 samples, 0.07%)</title><rect x="160.0" y="773" width="0.7" height="15.0" fill="rgb(227,144,32)" rx="2" ry="2" />
<text  x="162.95" y="783.5" ></text>
</g>
<g >
<title>hrtimer_wakeup (1 samples, 0.01%)</title><rect x="828.6" y="565" width="0.1" height="15.0" fill="rgb(219,174,53)" rx="2" ry="2" />
<text  x="831.58" y="575.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="957.6" y="565" width="0.2" height="15.0" fill="rgb(233,88,14)" rx="2" ry="2" />
<text  x="960.64" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (1 samples, 0.01%)</title><rect x="177.3" y="533" width="0.1" height="15.0" fill="rgb(225,28,21)" rx="2" ry="2" />
<text  x="180.25" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (1 samples, 0.01%)</title><rect x="951.5" y="389" width="0.1" height="15.0" fill="rgb(252,44,42)" rx="2" ry="2" />
<text  x="954.49" y="399.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (16 samples, 0.17%)</title><rect x="1128.7" y="789" width="2.1" height="15.0" fill="rgb(245,134,4)" rx="2" ry="2" />
<text  x="1131.74" y="799.5" ></text>
</g>
<g >
<title>writev (1 samples, 0.01%)</title><rect x="1120.9" y="581" width="0.1" height="15.0" fill="rgb(230,98,39)" rx="2" ry="2" />
<text  x="1123.92" y="591.5" ></text>
</g>
<g >
<title>SdlMixerAudio::SE_Play (13 samples, 0.14%)</title><rect x="167.3" y="581" width="1.6" height="15.0" fill="rgb(233,54,31)" rx="2" ry="2" />
<text  x="170.26" y="591.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="957.6" y="501" width="0.2" height="15.0" fill="rgb(234,7,35)" rx="2" ry="2" />
<text  x="960.64" y="511.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (1 samples, 0.01%)</title><rect x="159.1" y="805" width="0.1" height="15.0" fill="rgb(247,15,39)" rx="2" ry="2" />
<text  x="162.05" y="815.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="189.4" y="645" width="0.2" height="15.0" fill="rgb(233,21,9)" rx="2" ry="2" />
<text  x="192.43" y="655.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="74.9" y="821" width="0.1" height="15.0" fill="rgb(210,15,11)" rx="2" ry="2" />
<text  x="77.85" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt;::operator()&lt;Drawable**, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="324.5" y="693" width="0.1" height="15.0" fill="rgb(252,147,30)" rx="2" ry="2" />
<text  x="327.51" y="703.5" ></text>
</g>
<g >
<title>Game_Interpreter::IsRunning (2 samples, 0.02%)</title><rect x="484.2" y="725" width="0.3" height="15.0" fill="rgb(247,192,34)" rx="2" ry="2" />
<text  x="487.20" y="735.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="961.7" y="549" width="0.2" height="15.0" fill="rgb(241,199,28)" rx="2" ry="2" />
<text  x="964.74" y="559.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="59.6" y="821" width="0.1" height="15.0" fill="rgb(209,205,48)" rx="2" ry="2" />
<text  x="62.60" y="831.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.03%)</title><rect x="956.1" y="373" width="0.4" height="15.0" fill="rgb(214,186,5)" rx="2" ry="2" />
<text  x="959.10" y="383.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="582.5" y="549" width="0.1" height="15.0" fill="rgb(236,228,47)" rx="2" ry="2" />
<text  x="585.51" y="559.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (2 samples, 0.02%)</title><rect x="175.8" y="597" width="0.3" height="15.0" fill="rgb(228,184,15)" rx="2" ry="2" />
<text  x="178.84" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment@plt (3 samples, 0.03%)</title><rect x="1185.6" y="741" width="0.4" height="15.0" fill="rgb(250,167,51)" rx="2" ry="2" />
<text  x="1188.64" y="751.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;int, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::__allocated_ptr (1 samples, 0.01%)</title><rect x="943.5" y="501" width="0.2" height="15.0" fill="rgb(225,176,50)" rx="2" ry="2" />
<text  x="946.54" y="511.5" ></text>
</g>
<g >
<title>std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;::~pair (2 samples, 0.02%)</title><rect x="957.1" y="485" width="0.3" height="15.0" fill="rgb(248,60,24)" rx="2" ry="2" />
<text  x="960.13" y="495.5" ></text>
</g>
<g >
<title>Game_Character::GetSpriteY (1 samples, 0.01%)</title><rect x="1098.0" y="741" width="0.1" height="15.0" fill="rgb(244,46,11)" rx="2" ry="2" />
<text  x="1100.98" y="751.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="166.5" y="645" width="0.1" height="15.0" fill="rgb(247,68,32)" rx="2" ry="2" />
<text  x="169.49" y="655.5" ></text>
</g>
<g >
<title>std::__alloc_on_move&lt;std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; (1 samples, 0.01%)</title><rect x="1097.3" y="677" width="0.2" height="15.0" fill="rgb(211,138,7)" rx="2" ry="2" />
<text  x="1100.34" y="687.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (2 samples, 0.02%)</title><rect x="225.3" y="645" width="0.3" height="15.0" fill="rgb(214,208,33)" rx="2" ry="2" />
<text  x="228.31" y="655.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (6 samples, 0.07%)</title><rect x="155.7" y="741" width="0.8" height="15.0" fill="rgb(234,226,3)" rx="2" ry="2" />
<text  x="158.72" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;short, std::allocator&lt;short&gt; &gt;::end (2 samples, 0.02%)</title><rect x="1107.6" y="677" width="0.2" height="15.0" fill="rgb(225,72,39)" rx="2" ry="2" />
<text  x="1110.59" y="687.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (3 samples, 0.03%)</title><rect x="190.2" y="661" width="0.4" height="15.0" fill="rgb(247,135,51)" rx="2" ry="2" />
<text  x="193.20" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;BaseUi, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (1 samples, 0.01%)</title><rect x="305.2" y="741" width="0.1" height="15.0" fill="rgb(216,38,35)" rx="2" ry="2" />
<text  x="308.16" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_M_lower_bound (4 samples, 0.04%)</title><rect x="949.1" y="357" width="0.5" height="15.0" fill="rgb(218,203,42)" rx="2" ry="2" />
<text  x="952.05" y="367.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.01%)</title><rect x="957.6" y="373" width="0.2" height="15.0" fill="rgb(227,137,8)" rx="2" ry="2" />
<text  x="960.64" y="383.5" ></text>
</g>
<g >
<title>pixman_image_create_solid_fill (1 samples, 0.01%)</title><rect x="225.8" y="677" width="0.2" height="15.0" fill="rgb(233,210,19)" rx="2" ry="2" />
<text  x="228.83" y="687.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (1 samples, 0.01%)</title><rect x="1111.2" y="661" width="0.1" height="15.0" fill="rgb(219,31,13)" rx="2" ry="2" />
<text  x="1114.18" y="671.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (1 samples, 0.01%)</title><rect x="165.7" y="101" width="0.1" height="15.0" fill="rgb(247,84,11)" rx="2" ry="2" />
<text  x="168.72" y="111.5" ></text>
</g>
<g >
<title>usb_hcd_submit_urb (1 samples, 0.01%)</title><rect x="582.5" y="389" width="0.1" height="15.0" fill="rgb(235,122,45)" rx="2" ry="2" />
<text  x="585.51" y="399.5" ></text>
</g>
<g >
<title>Game_Interpreter::ValueOrVariable (2 samples, 0.02%)</title><rect x="961.1" y="661" width="0.3" height="15.0" fill="rgb(246,202,4)" rx="2" ry="2" />
<text  x="964.10" y="671.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (80 samples, 0.87%)</title><rect x="60.9" y="837" width="10.2" height="15.0" fill="rgb(230,184,29)" rx="2" ry="2" />
<text  x="63.88" y="847.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt; (28 samples, 0.30%)</title><rect x="1040.7" y="661" width="3.6" height="15.0" fill="rgb(232,22,45)" rx="2" ry="2" />
<text  x="1043.69" y="671.5" ></text>
</g>
<g >
<title>Game_Screen::Update (53 samples, 0.58%)</title><rect x="1099.4" y="757" width="6.8" height="15.0" fill="rgb(216,225,16)" rx="2" ry="2" />
<text  x="1102.39" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.01%)</title><rect x="84.7" y="901" width="0.1" height="15.0" fill="rgb(226,0,7)" rx="2" ry="2" />
<text  x="87.72" y="911.5" ></text>
</g>
<g >
<title>reschedule_interrupt (1 samples, 0.01%)</title><rect x="73.8" y="917" width="0.2" height="15.0" fill="rgb(208,96,7)" rx="2" ry="2" />
<text  x="76.83" y="927.5" ></text>
</g>
<g >
<title>Bitmap::EffectsBlit (348 samples, 3.78%)</title><rect x="182.9" y="725" width="44.6" height="15.0" fill="rgb(219,123,27)" rx="2" ry="2" />
<text  x="185.89" y="735.5" >Bitm..</text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="918.4" y="629" width="0.2" height="15.0" fill="rgb(238,226,18)" rx="2" ry="2" />
<text  x="921.42" y="639.5" ></text>
</g>
<g >
<title>Bitmap::CheckOpacity (1 samples, 0.01%)</title><rect x="177.0" y="661" width="0.1" height="15.0" fill="rgb(223,209,40)" rx="2" ry="2" />
<text  x="180.00" y="671.5" ></text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.01%)</title><rect x="1127.3" y="437" width="0.2" height="15.0" fill="rgb(251,218,39)" rx="2" ry="2" />
<text  x="1130.33" y="447.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="159.1" y="709" width="0.1" height="15.0" fill="rgb(207,33,23)" rx="2" ry="2" />
<text  x="162.05" y="719.5" ></text>
</g>
<g >
<title>main (7,880 samples, 85.59%)</title><rect x="178.9" y="885" width="1009.9" height="15.0" fill="rgb(247,32,36)" rx="2" ry="2" />
<text  x="181.92" y="895.5" >main</text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Bitmap, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (1 samples, 0.01%)</title><rect x="960.1" y="629" width="0.1" height="15.0" fill="rgb(254,31,9)" rx="2" ry="2" />
<text  x="963.07" y="639.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="477.9" y="597" width="0.2" height="15.0" fill="rgb(232,117,27)" rx="2" ry="2" />
<text  x="480.92" y="607.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 0ul, 3ul&gt;::__less (2 samples, 0.02%)</title><rect x="166.0" y="469" width="0.2" height="15.0" fill="rgb(218,111,44)" rx="2" ry="2" />
<text  x="168.97" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (17 samples, 0.18%)</title><rect x="976.6" y="629" width="2.2" height="15.0" fill="rgb(242,195,37)" rx="2" ry="2" />
<text  x="979.61" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;Scene&gt;, std::allocator&lt;std::shared_ptr&lt;Scene&gt; &gt; &gt;::clear (1 samples, 0.01%)</title><rect x="1188.7" y="853" width="0.1" height="15.0" fill="rgb(222,210,13)" rx="2" ry="2" />
<text  x="1191.72" y="863.5" ></text>
</g>
<g >
<title>copy_page_to_iter (1 samples, 0.01%)</title><rect x="156.0" y="261" width="0.1" height="15.0" fill="rgb(245,204,49)" rx="2" ry="2" />
<text  x="158.98" y="271.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;int, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::~__allocated_ptr (5 samples, 0.05%)</title><rect x="958.2" y="533" width="0.6" height="15.0" fill="rgb(211,13,34)" rx="2" ry="2" />
<text  x="961.15" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (31 samples, 0.34%)</title><rect x="161.4" y="437" width="3.9" height="15.0" fill="rgb(249,77,2)" rx="2" ry="2" />
<text  x="164.36" y="447.5" ></text>
</g>
<g >
<title>usb_hcd_giveback_urb (1 samples, 0.01%)</title><rect x="998.5" y="421" width="0.2" height="15.0" fill="rgb(232,225,47)" rx="2" ry="2" />
<text  x="1001.52" y="431.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="160.0" y="357" width="0.2" height="15.0" fill="rgb(215,77,43)" rx="2" ry="2" />
<text  x="162.95" y="367.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Bitmap, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (11 samples, 0.12%)</title><rect x="305.5" y="725" width="1.5" height="15.0" fill="rgb(227,152,10)" rx="2" ry="2" />
<text  x="308.54" y="735.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (13 samples, 0.14%)</title><rect x="167.3" y="629" width="1.6" height="15.0" fill="rgb(237,50,22)" rx="2" ry="2" />
<text  x="170.26" y="639.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (8 samples, 0.09%)</title><rect x="1121.0" y="453" width="1.1" height="15.0" fill="rgb(209,8,4)" rx="2" ry="2" />
<text  x="1124.05" y="463.5" ></text>
</g>
<g >
<title>Tilemap::Update (1 samples, 0.01%)</title><rect x="1108.7" y="757" width="0.2" height="15.0" fill="rgb(241,209,40)" rx="2" ry="2" />
<text  x="1111.74" y="767.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.01%)</title><rect x="805.9" y="549" width="0.1" height="15.0" fill="rgb(209,85,43)" rx="2" ry="2" />
<text  x="808.89" y="559.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (23 samples, 0.25%)</title><rect x="1123.4" y="533" width="2.9" height="15.0" fill="rgb(246,92,46)" rx="2" ry="2" />
<text  x="1126.36" y="543.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.01%)</title><rect x="167.1" y="421" width="0.2" height="15.0" fill="rgb(246,32,29)" rx="2" ry="2" />
<text  x="170.13" y="431.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (6 samples, 0.07%)</title><rect x="476.3" y="741" width="0.7" height="15.0" fill="rgb(209,67,20)" rx="2" ry="2" />
<text  x="479.26" y="751.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.25 (23 samples, 0.25%)</title><rect x="1123.4" y="517" width="2.9" height="15.0" fill="rgb(214,227,9)" rx="2" ry="2" />
<text  x="1126.36" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (21 samples, 0.23%)</title><rect x="892.1" y="645" width="2.7" height="15.0" fill="rgb(233,8,12)" rx="2" ry="2" />
<text  x="895.15" y="655.5" ></text>
</g>
<g >
<title>Game_Interpreter_Map::ExecuteCommand (2 samples, 0.02%)</title><rect x="174.8" y="709" width="0.3" height="15.0" fill="rgb(249,215,50)" rx="2" ry="2" />
<text  x="177.82" y="719.5" ></text>
</g>
<g >
<title>__libc_recvmsg (6 samples, 0.07%)</title><rect x="1119.1" y="581" width="0.8" height="15.0" fill="rgb(241,205,9)" rx="2" ry="2" />
<text  x="1122.13" y="591.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (2 samples, 0.02%)</title><rect x="170.8" y="773" width="0.3" height="15.0" fill="rgb(211,27,20)" rx="2" ry="2" />
<text  x="173.85" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (153 samples, 1.66%)</title><rect x="965.6" y="661" width="19.6" height="15.0" fill="rgb(237,78,14)" rx="2" ry="2" />
<text  x="968.59" y="671.5" ></text>
</g>
<g >
<title>posix_get_monotonic_raw (1 samples, 0.01%)</title><rect x="1122.5" y="597" width="0.1" height="15.0" fill="rgb(218,170,4)" rx="2" ry="2" />
<text  x="1125.46" y="607.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="1189.9" y="853" width="0.1" height="15.0" fill="rgb(223,126,10)" rx="2" ry="2" />
<text  x="1192.87" y="863.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="166.5" y="709" width="0.1" height="15.0" fill="rgb(248,183,15)" rx="2" ry="2" />
<text  x="169.49" y="719.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="155.2" y="821" width="0.3" height="15.0" fill="rgb(229,163,19)" rx="2" ry="2" />
<text  x="158.21" y="831.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::reset (3 samples, 0.03%)</title><rect x="231.0" y="725" width="0.3" height="15.0" fill="rgb(243,182,30)" rx="2" ry="2" />
<text  x="233.95" y="735.5" ></text>
</g>
<g >
<title>Graphics::IsTransitionPending (3 samples, 0.03%)</title><rect x="178.9" y="853" width="0.4" height="15.0" fill="rgb(226,64,21)" rx="2" ry="2" />
<text  x="181.92" y="863.5" ></text>
</g>
<g >
<title>FileFinder::FindImage (1 samples, 0.01%)</title><rect x="155.3" y="709" width="0.2" height="15.0" fill="rgb(240,108,53)" rx="2" ry="2" />
<text  x="158.34" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (37 samples, 0.40%)</title><rect x="896.1" y="661" width="4.8" height="15.0" fill="rgb(248,84,14)" rx="2" ry="2" />
<text  x="899.12" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.01%)</title><rect x="231.6" y="709" width="0.1" height="15.0" fill="rgb(225,95,6)" rx="2" ry="2" />
<text  x="234.59" y="719.5" ></text>
</g>
<g >
<title>Game_Picture::Show (1 samples, 0.01%)</title><rect x="168.9" y="757" width="0.2" height="15.0" fill="rgb(247,99,47)" rx="2" ry="2" />
<text  x="171.92" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.01%)</title><rect x="166.6" y="693" width="0.1" height="15.0" fill="rgb(248,63,23)" rx="2" ry="2" />
<text  x="169.62" y="703.5" ></text>
</g>
<g >
<title>__update_load_avg_se (1 samples, 0.01%)</title><rect x="1129.3" y="581" width="0.1" height="15.0" fill="rgb(226,47,44)" rx="2" ry="2" />
<text  x="1132.25" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="481.5" y="773" width="0.1" height="15.0" fill="rgb(235,0,9)" rx="2" ry="2" />
<text  x="484.51" y="783.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;Drawable*&gt; (2 samples, 0.02%)</title><rect x="166.2" y="405" width="0.3" height="15.0" fill="rgb(224,11,25)" rx="2" ry="2" />
<text  x="169.23" y="415.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="1059.0" y="629" width="0.1" height="15.0" fill="rgb(212,87,40)" rx="2" ry="2" />
<text  x="1062.02" y="639.5" ></text>
</g>
<g >
<title>usb_hcd_link_urb_to_ep (1 samples, 0.01%)</title><rect x="582.5" y="325" width="0.1" height="15.0" fill="rgb(251,224,16)" rx="2" ry="2" />
<text  x="585.51" y="335.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="74.9" y="837" width="0.1" height="15.0" fill="rgb(242,203,40)" rx="2" ry="2" />
<text  x="77.85" y="847.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (5 samples, 0.05%)</title><rect x="169.2" y="741" width="0.6" height="15.0" fill="rgb(215,25,12)" rx="2" ry="2" />
<text  x="172.18" y="751.5" ></text>
</g>
<g >
<title>vmacache_find (1 samples, 0.01%)</title><rect x="177.0" y="437" width="0.1" height="15.0" fill="rgb(223,45,10)" rx="2" ry="2" />
<text  x="180.00" y="447.5" ></text>
</g>
<g >
<title>Cache::SystemOrBlack (10 samples, 0.11%)</title><rect x="1110.8" y="725" width="1.3" height="15.0" fill="rgb(228,28,21)" rx="2" ry="2" />
<text  x="1113.80" y="735.5" ></text>
</g>
<g >
<title>tlb_is_not_lazy (1 samples, 0.01%)</title><rect x="165.8" y="181" width="0.2" height="15.0" fill="rgb(236,129,20)" rx="2" ry="2" />
<text  x="168.85" y="191.5" ></text>
</g>
<g >
<title>do_wp_page (3 samples, 0.03%)</title><rect x="165.6" y="261" width="0.4" height="15.0" fill="rgb(242,48,12)" rx="2" ry="2" />
<text  x="168.59" y="271.5" ></text>
</g>
<g >
<title>__interceptor_free (2 samples, 0.02%)</title><rect x="189.8" y="677" width="0.3" height="15.0" fill="rgb(232,124,37)" rx="2" ry="2" />
<text  x="192.81" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment@plt (5 samples, 0.05%)</title><rect x="1166.0" y="757" width="0.7" height="15.0" fill="rgb(247,66,32)" rx="2" ry="2" />
<text  x="1169.03" y="767.5" ></text>
</g>
<g >
<title>ktime_get_raw_ts64 (2 samples, 0.02%)</title><rect x="1116.7" y="661" width="0.2" height="15.0" fill="rgb(208,74,2)" rx="2" ry="2" />
<text  x="1119.69" y="671.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, FileRequestResult*&amp;&amp;&gt; (1 samples, 0.01%)</title><rect x="947.5" y="469" width="0.1" height="15.0" fill="rgb(245,228,27)" rx="2" ry="2" />
<text  x="950.51" y="479.5" ></text>
</g>
<g >
<title>__update_load_avg_se (1 samples, 0.01%)</title><rect x="1082.3" y="517" width="0.2" height="15.0" fill="rgb(214,8,24)" rx="2" ry="2" />
<text  x="1085.34" y="527.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (6 samples, 0.07%)</title><rect x="1119.1" y="629" width="0.8" height="15.0" fill="rgb(232,107,40)" rx="2" ry="2" />
<text  x="1122.13" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 0.05%)</title><rect x="155.8" y="405" width="0.7" height="15.0" fill="rgb(225,228,43)" rx="2" ry="2" />
<text  x="158.85" y="415.5" ></text>
</g>
<g >
<title>__GI___getpid (1 samples, 0.01%)</title><rect x="114.8" y="901" width="0.2" height="15.0" fill="rgb(206,90,30)" rx="2" ry="2" />
<text  x="117.84" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::cbegin (1 samples, 0.01%)</title><rect x="480.9" y="773" width="0.1" height="15.0" fill="rgb(220,128,0)" rx="2" ry="2" />
<text  x="483.87" y="783.5" ></text>
</g>
<g >
<title>__x2apic_send_IPI_dest (1 samples, 0.01%)</title><rect x="165.7" y="69" width="0.1" height="15.0" fill="rgb(234,15,39)" rx="2" ry="2" />
<text  x="168.72" y="79.5" ></text>
</g>
<g >
<title>Game_Interpreter::ExecuteCommand (4 samples, 0.04%)</title><rect x="159.1" y="869" width="0.5" height="15.0" fill="rgb(254,89,10)" rx="2" ry="2" />
<text  x="162.05" y="879.5" ></text>
</g>
<g >
<title>smp_call_function_single (1 samples, 0.01%)</title><rect x="165.7" y="133" width="0.1" height="15.0" fill="rgb(218,45,19)" rx="2" ry="2" />
<text  x="168.72" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (4 samples, 0.04%)</title><rect x="654.1" y="613" width="0.6" height="15.0" fill="rgb(208,99,32)" rx="2" ry="2" />
<text  x="657.15" y="623.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (4 samples, 0.04%)</title><rect x="1128.2" y="741" width="0.5" height="15.0" fill="rgb(235,197,47)" rx="2" ry="2" />
<text  x="1131.23" y="751.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="548.7" y="629" width="0.1" height="15.0" fill="rgb(253,88,9)" rx="2" ry="2" />
<text  x="551.67" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Game_CommonEvent*, std::vector&lt;Game_CommonEvent, std::allocator&lt;Game_CommonEvent&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="1099.1" y="709" width="0.2" height="15.0" fill="rgb(219,1,4)" rx="2" ry="2" />
<text  x="1102.13" y="719.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.01%)</title><rect x="957.6" y="389" width="0.2" height="15.0" fill="rgb(254,2,52)" rx="2" ry="2" />
<text  x="960.64" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (5 samples, 0.05%)</title><rect x="1010.3" y="677" width="0.7" height="15.0" fill="rgb(223,206,19)" rx="2" ry="2" />
<text  x="1013.31" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="166.5" y="757" width="0.1" height="15.0" fill="rgb(205,31,46)" rx="2" ry="2" />
<text  x="169.49" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (6 samples, 0.07%)</title><rect x="573.1" y="677" width="0.8" height="15.0" fill="rgb(248,186,44)" rx="2" ry="2" />
<text  x="576.15" y="687.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="189.9" y="629" width="0.2" height="15.0" fill="rgb(232,216,46)" rx="2" ry="2" />
<text  x="192.94" y="639.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="806.4" y="501" width="0.1" height="15.0" fill="rgb(226,145,14)" rx="2" ry="2" />
<text  x="809.41" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_S_key (12 samples, 0.13%)</title><rect x="313.0" y="693" width="1.5" height="15.0" fill="rgb(234,78,7)" rx="2" ry="2" />
<text  x="315.98" y="703.5" ></text>
</g>
<g >
<title>main (2 samples, 0.02%)</title><rect x="174.8" y="885" width="0.3" height="15.0" fill="rgb(220,113,0)" rx="2" ry="2" />
<text  x="177.82" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;short&gt;::operator== (1 samples, 0.01%)</title><rect x="305.0" y="741" width="0.2" height="15.0" fill="rgb(238,45,44)" rx="2" ry="2" />
<text  x="308.03" y="751.5" ></text>
</g>
<g >
<title>Game_Interpreter::Update (2 samples, 0.02%)</title><rect x="167.0" y="805" width="0.3" height="15.0" fill="rgb(223,153,16)" rx="2" ry="2" />
<text  x="170.00" y="815.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::reset (2 samples, 0.02%)</title><rect x="960.3" y="645" width="0.3" height="15.0" fill="rgb(241,3,52)" rx="2" ry="2" />
<text  x="963.33" y="655.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.01%)</title><rect x="940.0" y="389" width="0.1" height="15.0" fill="rgb(220,84,33)" rx="2" ry="2" />
<text  x="942.95" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="1111.6" y="549" width="0.1" height="15.0" fill="rgb(243,155,17)" rx="2" ry="2" />
<text  x="1114.56" y="559.5" ></text>
</g>
<g >
<title>__task_pid_nr_ns (1 samples, 0.01%)</title><rect x="59.2" y="885" width="0.1" height="15.0" fill="rgb(212,173,50)" rx="2" ry="2" />
<text  x="62.21" y="895.5" ></text>
</g>
<g >
<title>Bitmap::ConvertImage (1 samples, 0.01%)</title><rect x="155.2" y="549" width="0.1" height="15.0" fill="rgb(223,99,21)" rx="2" ry="2" />
<text  x="158.21" y="559.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="806.4" y="565" width="0.1" height="15.0" fill="rgb(234,215,19)" rx="2" ry="2" />
<text  x="809.41" y="575.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.01%)</title><rect x="166.1" y="389" width="0.1" height="15.0" fill="rgb(254,217,40)" rx="2" ry="2" />
<text  x="169.10" y="399.5" ></text>
</g>
<g >
<title>prepare_outbound_urb (1 samples, 0.01%)</title><rect x="998.5" y="373" width="0.2" height="15.0" fill="rgb(229,220,9)" rx="2" ry="2" />
<text  x="1001.52" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="174.8" y="501" width="0.3" height="15.0" fill="rgb(245,102,7)" rx="2" ry="2" />
<text  x="177.82" y="511.5" ></text>
</g>
<g >
<title>__sched_text_start (1 samples, 0.01%)</title><rect x="156.1" y="229" width="0.1" height="15.0" fill="rgb(209,66,50)" rx="2" ry="2" />
<text  x="159.11" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;int, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (3 samples, 0.03%)</title><rect x="943.7" y="501" width="0.4" height="15.0" fill="rgb(224,216,25)" rx="2" ry="2" />
<text  x="946.67" y="511.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="582.5" y="581" width="0.1" height="15.0" fill="rgb(218,141,50)" rx="2" ry="2" />
<text  x="585.51" y="591.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="935.7" y="533" width="0.2" height="15.0" fill="rgb(227,34,8)" rx="2" ry="2" />
<text  x="938.72" y="543.5" ></text>
</g>
<g >
<title>std::find_if&lt;std::_Deque_iterator&lt;MessageOverlayItem, MessageOverlayItem const&amp;, MessageOverlayItem const*&gt;, MessageOverlay::IsAnyMessageVisible() const::{lambda(MessageOverlayItem const&amp;)#1}&gt; (1 samples, 0.01%)</title><rect x="180.5" y="709" width="0.1" height="15.0" fill="rgb(226,71,23)" rx="2" ry="2" />
<text  x="183.46" y="719.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;Bitmap&gt;, Rect, bool, bool, Tone, Color&gt;::tuple&lt;std::shared_ptr&lt;Bitmap&gt; const&amp;, Rect const&amp;, bool&amp;, bool&amp;, Tone const&amp;, Color const&amp;, true&gt; (2 samples, 0.02%)</title><rect x="230.1" y="709" width="0.2" height="15.0" fill="rgb(251,145,23)" rx="2" ry="2" />
<text  x="233.06" y="719.5" ></text>
</g>
<g >
<title>pollwake (7 samples, 0.08%)</title><rect x="72.0" y="773" width="0.9" height="15.0" fill="rgb(223,5,52)" rx="2" ry="2" />
<text  x="75.03" y="783.5" ></text>
</g>
<g >
<title>__sched_text_start (26 samples, 0.28%)</title><rect x="1123.1" y="613" width="3.3" height="15.0" fill="rgb(248,171,19)" rx="2" ry="2" />
<text  x="1126.10" y="623.5" ></text>
</g>
<g >
<title>variables (4 samples, 0.04%)</title><rect x="876.0" y="645" width="0.5" height="15.0" fill="rgb(220,173,11)" rx="2" ry="2" />
<text  x="879.00" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="181.4" y="709" width="0.1" height="15.0" fill="rgb(216,110,23)" rx="2" ry="2" />
<text  x="184.35" y="719.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="1051.7" y="645" width="0.1" height="15.0" fill="rgb(229,137,42)" rx="2" ry="2" />
<text  x="1054.71" y="655.5" ></text>
</g>
<g >
<title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="1126.3" y="597" width="0.1" height="15.0" fill="rgb(239,107,31)" rx="2" ry="2" />
<text  x="1129.30" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Graphics::State, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (1 samples, 0.01%)</title><rect x="180.7" y="757" width="0.1" height="15.0" fill="rgb(241,103,15)" rx="2" ry="2" />
<text  x="183.71" y="767.5" ></text>
</g>
<g >
<title>Game_Variables_Class::Get (2 samples, 0.02%)</title><rect x="80.0" y="901" width="0.2" height="15.0" fill="rgb(214,185,46)" rx="2" ry="2" />
<text  x="82.98" y="911.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="481.6" y="773" width="0.2" height="15.0" fill="rgb(239,1,25)" rx="2" ry="2" />
<text  x="484.64" y="783.5" ></text>
</g>
<g >
<title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="122.3" y="789" width="0.1" height="15.0" fill="rgb(254,183,33)" rx="2" ry="2" />
<text  x="125.27" y="799.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1033.9" y="645" width="0.1" height="15.0" fill="rgb(241,150,6)" rx="2" ry="2" />
<text  x="1036.90" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (14 samples, 0.15%)</title><rect x="1183.8" y="741" width="1.8" height="15.0" fill="rgb(239,7,2)" rx="2" ry="2" />
<text  x="1186.85" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;RPG::SaveEventExecFrame const*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt; (4 samples, 0.04%)</title><rect x="758.6" y="613" width="0.5" height="15.0" fill="rgb(213,18,12)" rx="2" ry="2" />
<text  x="761.60" y="623.5" ></text>
</g>
<g >
<title>xhci_td_cleanup (1 samples, 0.01%)</title><rect x="70.7" y="581" width="0.2" height="15.0" fill="rgb(212,114,48)" rx="2" ry="2" />
<text  x="73.75" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="229.7" y="629" width="0.1" height="15.0" fill="rgb(208,129,6)" rx="2" ry="2" />
<text  x="232.67" y="639.5" ></text>
</g>
<g >
<title>page_fault (5 samples, 0.05%)</title><rect x="73.2" y="917" width="0.6" height="15.0" fill="rgb(253,56,49)" rx="2" ry="2" />
<text  x="76.18" y="927.5" ></text>
</g>
<g >
<title>AsyncHandler::RequestFile (3 samples, 0.03%)</title><rect x="1110.8" y="677" width="0.4" height="15.0" fill="rgb(239,113,9)" rx="2" ry="2" />
<text  x="1113.80" y="687.5" ></text>
</g>
<g >
<title>handle_tx_event (1 samples, 0.01%)</title><rect x="582.5" y="517" width="0.1" height="15.0" fill="rgb(242,10,8)" rx="2" ry="2" />
<text  x="585.51" y="527.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.01%)</title><rect x="159.6" y="357" width="0.1" height="15.0" fill="rgb(240,224,27)" rx="2" ry="2" />
<text  x="162.57" y="367.5" ></text>
</g>
<g >
<title>FileFinder::FindSound (2 samples, 0.02%)</title><rect x="166.6" y="725" width="0.3" height="15.0" fill="rgb(241,23,16)" rx="2" ry="2" />
<text  x="169.62" y="735.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned int*, unsigned long&gt; (4 samples, 0.04%)</title><rect x="158.2" y="373" width="0.5" height="15.0" fill="rgb(219,130,17)" rx="2" ry="2" />
<text  x="161.16" y="383.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (3 samples, 0.03%)</title><rect x="159.2" y="789" width="0.4" height="15.0" fill="rgb(238,61,49)" rx="2" ry="2" />
<text  x="162.18" y="799.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned int*, unsigned long, unsigned int&gt; (4 samples, 0.04%)</title><rect x="158.2" y="341" width="0.5" height="15.0" fill="rgb(233,227,48)" rx="2" ry="2" />
<text  x="161.16" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.01%)</title><rect x="155.2" y="501" width="0.1" height="15.0" fill="rgb(238,77,33)" rx="2" ry="2" />
<text  x="158.21" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (71 samples, 0.77%)</title><rect x="833.7" y="661" width="9.1" height="15.0" fill="rgb(251,6,3)" rx="2" ry="2" />
<text  x="836.71" y="671.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.01%)</title><rect x="225.7" y="597" width="0.1" height="15.0" fill="rgb(248,98,51)" rx="2" ry="2" />
<text  x="228.70" y="607.5" ></text>
</g>
<g >
<title>std::_Bit_const_iterator::_Bit_const_iterator (1 samples, 0.01%)</title><rect x="483.7" y="661" width="0.1" height="15.0" fill="rgb(205,15,36)" rx="2" ry="2" />
<text  x="486.69" y="671.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt; (1 samples, 0.01%)</title><rect x="1104.3" y="645" width="0.1" height="15.0" fill="rgb(226,158,9)" rx="2" ry="2" />
<text  x="1107.26" y="655.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1006.2" y="677" width="0.1" height="15.0" fill="rgb(232,10,11)" rx="2" ry="2" />
<text  x="1009.21" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_ptr (5 samples, 0.05%)</title><rect x="1181.4" y="725" width="0.7" height="15.0" fill="rgb(227,229,7)" rx="2" ry="2" />
<text  x="1184.41" y="735.5" ></text>
</g>
<g >
<title>__fget (1 samples, 0.01%)</title><rect x="1120.4" y="469" width="0.1" height="15.0" fill="rgb(251,132,12)" rx="2" ry="2" />
<text  x="1123.41" y="479.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (9 samples, 0.10%)</title><rect x="1117.5" y="725" width="1.1" height="15.0" fill="rgb(232,147,50)" rx="2" ry="2" />
<text  x="1120.46" y="735.5" ></text>
</g>
<g >
<title>Sprite::SetY (2 samples, 0.02%)</title><rect x="1103.5" y="709" width="0.2" height="15.0" fill="rgb(206,200,7)" rx="2" ry="2" />
<text  x="1106.49" y="719.5" ></text>
</g>
<g >
<title>deactivate_task (2 samples, 0.02%)</title><rect x="61.1" y="773" width="0.3" height="15.0" fill="rgb(253,34,49)" rx="2" ry="2" />
<text  x="64.14" y="783.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="954.9" y="245" width="0.2" height="15.0" fill="rgb(222,203,54)" rx="2" ry="2" />
<text  x="957.95" y="255.5" ></text>
</g>
<g >
<title>xcb_poll_for_reply64 (4 samples, 0.04%)</title><rect x="1120.0" y="661" width="0.5" height="15.0" fill="rgb(226,134,46)" rx="2" ry="2" />
<text  x="1123.02" y="671.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (8 samples, 0.09%)</title><rect x="1121.0" y="389" width="1.1" height="15.0" fill="rgb(236,229,45)" rx="2" ry="2" />
<text  x="1124.05" y="399.5" ></text>
</g>
<g >
<title>memcmp@plt (1 samples, 0.01%)</title><rect x="942.4" y="517" width="0.1" height="15.0" fill="rgb(231,31,13)" rx="2" ry="2" />
<text  x="945.39" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned int&gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="177.0" y="597" width="0.1" height="15.0" fill="rgb(250,183,22)" rx="2" ry="2" />
<text  x="180.00" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SavePicture, std::allocator&lt;RPG::SavePicture&gt; &gt;::size (1 samples, 0.01%)</title><rect x="959.2" y="597" width="0.1" height="15.0" fill="rgb(253,70,20)" rx="2" ry="2" />
<text  x="962.18" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::get (1 samples, 0.01%)</title><rect x="323.2" y="741" width="0.2" height="15.0" fill="rgb(215,104,51)" rx="2" ry="2" />
<text  x="326.23" y="751.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="189.2" y="645" width="0.1" height="15.0" fill="rgb(234,90,14)" rx="2" ry="2" />
<text  x="192.17" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (17 samples, 0.18%)</title><rect x="156.5" y="581" width="2.2" height="15.0" fill="rgb(237,78,3)" rx="2" ry="2" />
<text  x="159.49" y="591.5" ></text>
</g>
<g >
<title>prepare_playback_urb (1 samples, 0.01%)</title><rect x="998.5" y="357" width="0.2" height="15.0" fill="rgb(210,61,23)" rx="2" ry="2" />
<text  x="1001.52" y="367.5" ></text>
</g>
<g >
<title>Sprite::SetBitmap (3 samples, 0.03%)</title><rect x="952.9" y="421" width="0.4" height="15.0" fill="rgb(223,100,16)" rx="2" ry="2" />
<text  x="955.90" y="431.5" ></text>
</g>
<g >
<title>xhci_get_frame (1 samples, 0.01%)</title><rect x="70.7" y="437" width="0.2" height="15.0" fill="rgb(246,202,14)" rx="2" ry="2" />
<text  x="73.75" y="447.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="952.3" y="357" width="0.1" height="15.0" fill="rgb(247,103,5)" rx="2" ry="2" />
<text  x="955.26" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;unsigned int const*, unsigned int*, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt; &gt; (4 samples, 0.04%)</title><rect x="157.0" y="437" width="0.5" height="15.0" fill="rgb(243,168,54)" rx="2" ry="2" />
<text  x="160.00" y="447.5" ></text>
</g>
<g >
<title>udev_monitor_get_fd (1 samples, 0.01%)</title><rect x="118.8" y="901" width="0.1" height="15.0" fill="rgb(212,14,20)" rx="2" ry="2" />
<text  x="121.81" y="911.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;FileRequestResult*&gt; (1 samples, 0.01%)</title><rect x="956.7" y="533" width="0.2" height="15.0" fill="rgb(224,148,16)" rx="2" ry="2" />
<text  x="959.74" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;short&gt;::_Rb_tree_const_iterator (3 samples, 0.03%)</title><rect x="319.8" y="725" width="0.4" height="15.0" fill="rgb(225,111,27)" rx="2" ry="2" />
<text  x="322.77" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator* (8 samples, 0.09%)</title><rect x="1168.1" y="789" width="1.0" height="15.0" fill="rgb(205,40,54)" rx="2" ry="2" />
<text  x="1171.08" y="799.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_init_functor (4 samples, 0.04%)</title><rect x="944.8" y="581" width="0.5" height="15.0" fill="rgb(231,11,24)" rx="2" ry="2" />
<text  x="947.82" y="591.5" ></text>
</g>
<g >
<title>xhci_giveback_urb_in_irq.isra.43 (1 samples, 0.01%)</title><rect x="582.5" y="469" width="0.1" height="15.0" fill="rgb(253,218,13)" rx="2" ry="2" />
<text  x="585.51" y="479.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="161.1" y="453" width="0.3" height="15.0" fill="rgb(253,75,21)" rx="2" ry="2" />
<text  x="164.10" y="463.5" ></text>
</g>
<g >
<title>prepare_playback_urb (1 samples, 0.01%)</title><rect x="74.1" y="645" width="0.1" height="15.0" fill="rgb(253,51,38)" rx="2" ry="2" />
<text  x="77.08" y="655.5" ></text>
</g>
<g >
<title>Game_Map::UpdateMapEvents (1 samples, 0.01%)</title><rect x="1097.7" y="757" width="0.2" height="15.0" fill="rgb(220,168,11)" rx="2" ry="2" />
<text  x="1100.72" y="767.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="954.2" y="341" width="0.1" height="15.0" fill="rgb(207,124,3)" rx="2" ry="2" />
<text  x="957.18" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (2 samples, 0.02%)</title><rect x="965.3" y="661" width="0.3" height="15.0" fill="rgb(234,46,37)" rx="2" ry="2" />
<text  x="968.33" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="122.0" y="885" width="0.4" height="15.0" fill="rgb(239,20,8)" rx="2" ry="2" />
<text  x="125.01" y="895.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (2 samples, 0.02%)</title><rect x="167.0" y="725" width="0.3" height="15.0" fill="rgb(208,198,13)" rx="2" ry="2" />
<text  x="170.00" y="735.5" ></text>
</g>
<g >
<title>task_ctx_sched_out (1 samples, 0.01%)</title><rect x="156.1" y="197" width="0.1" height="15.0" fill="rgb(223,35,10)" rx="2" ry="2" />
<text  x="159.11" y="207.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::~shared_ptr (1 samples, 0.01%)</title><rect x="231.6" y="741" width="0.1" height="15.0" fill="rgb(226,225,6)" rx="2" ry="2" />
<text  x="234.59" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator* (21 samples, 0.23%)</title><rect x="1179.4" y="757" width="2.7" height="15.0" fill="rgb(214,216,47)" rx="2" ry="2" />
<text  x="1182.36" y="767.5" ></text>
</g>
<g >
<title>std::tuple&lt;int const&amp;, int const&amp;, int const&amp;, int const&amp;&gt;::tuple&lt;void, true&gt; (1 samples, 0.01%)</title><rect x="229.9" y="597" width="0.2" height="15.0" fill="rgb(222,11,26)" rx="2" ry="2" />
<text  x="232.93" y="607.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (2 samples, 0.02%)</title><rect x="475.6" y="693" width="0.3" height="15.0" fill="rgb(232,6,8)" rx="2" ry="2" />
<text  x="478.62" y="703.5" ></text>
</g>
<g >
<title>___sys_recvmsg (2 samples, 0.02%)</title><rect x="1119.5" y="501" width="0.3" height="15.0" fill="rgb(244,140,43)" rx="2" ry="2" />
<text  x="1122.51" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;short&gt;::_Rb_tree_iterator (2 samples, 0.02%)</title><rect x="318.7" y="693" width="0.3" height="15.0" fill="rgb(246,184,52)" rx="2" ry="2" />
<text  x="321.75" y="703.5" ></text>
</g>
<g >
<title>ksys_write (11 samples, 0.12%)</title><rect x="71.8" y="869" width="1.4" height="15.0" fill="rgb(217,42,16)" rx="2" ry="2" />
<text  x="74.77" y="879.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="468.3" y="629" width="0.1" height="15.0" fill="rgb(237,87,12)" rx="2" ry="2" />
<text  x="471.31" y="639.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1082.3" y="661" width="0.2" height="15.0" fill="rgb(253,57,39)" rx="2" ry="2" />
<text  x="1085.34" y="671.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (4 samples, 0.04%)</title><rect x="160.0" y="389" width="0.5" height="15.0" fill="rgb(247,84,38)" rx="2" ry="2" />
<text  x="162.95" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (1 samples, 0.01%)</title><rect x="166.5" y="821" width="0.1" height="15.0" fill="rgb(205,63,50)" rx="2" ry="2" />
<text  x="169.49" y="831.5" ></text>
</g>
<g >
<title>Bitmap::GetOperator (6 samples, 0.07%)</title><rect x="264.1" y="709" width="0.8" height="15.0" fill="rgb(213,14,20)" rx="2" ry="2" />
<text  x="267.15" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt;, std::allocator&lt;std::vector&lt;Bitmap::TileOpacity, std::allocator&lt;Bitmap::TileOpacity&gt; &gt; &gt; &gt;::end (12 samples, 0.13%)</title><rect x="291.8" y="693" width="1.6" height="15.0" fill="rgb(208,80,21)" rx="2" ry="2" />
<text  x="294.83" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::Variable, std::allocator&lt;RPG::Variable&gt; &gt;::size (12 samples, 0.13%)</title><rect x="890.0" y="645" width="1.5" height="15.0" fill="rgb(231,11,43)" rx="2" ry="2" />
<text  x="892.97" y="655.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_out (1 samples, 0.01%)</title><rect x="156.1" y="213" width="0.1" height="15.0" fill="rgb(214,16,23)" rx="2" ry="2" />
<text  x="159.11" y="223.5" ></text>
</g>
<g >
<title>do_sched_yield (2 samples, 0.02%)</title><rect x="122.1" y="837" width="0.3" height="15.0" fill="rgb(218,148,18)" rx="2" ry="2" />
<text  x="125.14" y="847.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.7" y="629" width="0.1" height="15.0" fill="rgb(234,170,30)" rx="2" ry="2" />
<text  x="178.72" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.01%)</title><rect x="159.6" y="629" width="0.1" height="15.0" fill="rgb(251,207,38)" rx="2" ry="2" />
<text  x="162.57" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (2 samples, 0.02%)</title><rect x="155.2" y="869" width="0.3" height="15.0" fill="rgb(220,118,27)" rx="2" ry="2" />
<text  x="158.21" y="879.5" ></text>
</g>
<g >
<title>Bitmap::Create (1 samples, 0.01%)</title><rect x="229.7" y="693" width="0.1" height="15.0" fill="rgb(240,2,31)" rx="2" ry="2" />
<text  x="232.67" y="703.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.02%)</title><rect x="226.1" y="629" width="0.2" height="15.0" fill="rgb(242,49,2)" rx="2" ry="2" />
<text  x="229.08" y="639.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (18 samples, 0.20%)</title><rect x="156.5" y="741" width="2.3" height="15.0" fill="rgb(242,132,23)" rx="2" ry="2" />
<text  x="159.49" y="751.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.03%)</title><rect x="943.7" y="469" width="0.4" height="15.0" fill="rgb(208,133,17)" rx="2" ry="2" />
<text  x="946.67" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator!= (2 samples, 0.02%)</title><rect x="1167.8" y="789" width="0.3" height="15.0" fill="rgb(208,53,5)" rx="2" ry="2" />
<text  x="1170.83" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator* (3 samples, 0.03%)</title><rect x="1186.7" y="773" width="0.4" height="15.0" fill="rgb(206,20,8)" rx="2" ry="2" />
<text  x="1189.67" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Game_Event*, std::vector&lt;Game_Event, std::allocator&lt;Game_Event&gt; &gt; &gt; (14 samples, 0.15%)</title><rect x="1065.3" y="693" width="1.8" height="15.0" fill="rgb(225,144,5)" rx="2" ry="2" />
<text  x="1068.30" y="703.5" ></text>
</g>
<g >
<title>__get_vma_policy (1 samples, 0.01%)</title><rect x="954.3" y="261" width="0.1" height="15.0" fill="rgb(225,152,27)" rx="2" ry="2" />
<text  x="957.31" y="271.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1082.3" y="645" width="0.2" height="15.0" fill="rgb(246,147,8)" rx="2" ry="2" />
<text  x="1085.34" y="655.5" ></text>
</g>
<g >
<title>Cache::System (10 samples, 0.11%)</title><rect x="1110.8" y="709" width="1.3" height="15.0" fill="rgb(224,169,42)" rx="2" ry="2" />
<text  x="1113.80" y="719.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1078.2" y="677" width="0.2" height="15.0" fill="rgb(209,204,9)" rx="2" ry="2" />
<text  x="1081.24" y="687.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="121.8" y="741" width="0.1" height="15.0" fill="rgb(205,202,31)" rx="2" ry="2" />
<text  x="124.76" y="751.5" ></text>
</g>
<g >
<title>Scene_Map::Update (2 samples, 0.02%)</title><rect x="167.0" y="885" width="0.3" height="15.0" fill="rgb(245,211,41)" rx="2" ry="2" />
<text  x="170.00" y="895.5" ></text>
</g>
<g >
<title>Cache::Picture (2 samples, 0.02%)</title><rect x="175.6" y="773" width="0.2" height="15.0" fill="rgb(245,38,10)" rx="2" ry="2" />
<text  x="178.59" y="783.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.01%)</title><rect x="954.3" y="373" width="0.1" height="15.0" fill="rgb(205,108,33)" rx="2" ry="2" />
<text  x="957.31" y="383.5" ></text>
</g>
<g >
<title>do_sys_poll (2 samples, 0.02%)</title><rect x="1128.5" y="645" width="0.2" height="15.0" fill="rgb(250,156,43)" rx="2" ry="2" />
<text  x="1131.48" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Scene, (__gnu_cxx::_Lock_policy)2&gt;::get (2 samples, 0.02%)</title><rect x="98.9" y="901" width="0.3" height="15.0" fill="rgb(215,175,28)" rx="2" ry="2" />
<text  x="101.95" y="911.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (16 samples, 0.17%)</title><rect x="935.9" y="517" width="2.0" height="15.0" fill="rgb(220,77,14)" rx="2" ry="2" />
<text  x="938.85" y="527.5" ></text>
</g>
<g >
<title>Game_Map::UpdateCommonEvents (45 samples, 0.49%)</title><rect x="160.7" y="901" width="5.8" height="15.0" fill="rgb(207,161,1)" rx="2" ry="2" />
<text  x="163.72" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="169.2" y="485" width="0.4" height="15.0" fill="rgb(231,182,37)" rx="2" ry="2" />
<text  x="172.18" y="495.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (2 samples, 0.02%)</title><rect x="161.1" y="501" width="0.3" height="15.0" fill="rgb(244,15,21)" rx="2" ry="2" />
<text  x="164.10" y="511.5" ></text>
</g>
<g >
<title>xhci_td_cleanup (1 samples, 0.01%)</title><rect x="998.5" y="453" width="0.2" height="15.0" fill="rgb(206,5,30)" rx="2" ry="2" />
<text  x="1001.52" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sprite, std::default_delete&lt;Sprite&gt; &gt;::get (1 samples, 0.01%)</title><rect x="1104.4" y="709" width="0.1" height="15.0" fill="rgb(209,27,46)" rx="2" ry="2" />
<text  x="1107.39" y="719.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (6 samples, 0.07%)</title><rect x="160.0" y="709" width="0.7" height="15.0" fill="rgb(215,66,39)" rx="2" ry="2" />
<text  x="162.95" y="719.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (2 samples, 0.02%)</title><rect x="166.6" y="869" width="0.3" height="15.0" fill="rgb(211,78,49)" rx="2" ry="2" />
<text  x="169.62" y="879.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="167.0" y="453" width="0.1" height="15.0" fill="rgb(210,190,43)" rx="2" ry="2" />
<text  x="170.00" y="463.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="482.2" y="645" width="0.1" height="15.0" fill="rgb(247,128,25)" rx="2" ry="2" />
<text  x="485.15" y="655.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (4 samples, 0.04%)</title><rect x="160.0" y="517" width="0.5" height="15.0" fill="rgb(254,120,43)" rx="2" ry="2" />
<text  x="162.95" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (42 samples, 0.46%)</title><rect x="993.3" y="645" width="5.4" height="15.0" fill="rgb(222,101,38)" rx="2" ry="2" />
<text  x="996.27" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator- (2 samples, 0.02%)</title><rect x="753.1" y="629" width="0.2" height="15.0" fill="rgb(242,158,34)" rx="2" ry="2" />
<text  x="756.09" y="639.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="998.5" y="629" width="0.2" height="15.0" fill="rgb(243,201,52)" rx="2" ry="2" />
<text  x="1001.52" y="639.5" ></text>
</g>
<g >
<title>Transition::Update (1 samples, 0.01%)</title><rect x="478.2" y="789" width="0.1" height="15.0" fill="rgb(211,34,39)" rx="2" ry="2" />
<text  x="481.18" y="799.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (3 samples, 0.03%)</title><rect x="83.2" y="901" width="0.4" height="15.0" fill="rgb(243,88,37)" rx="2" ry="2" />
<text  x="86.18" y="911.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Bitmap, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator* (13 samples, 0.14%)</title><rect x="305.3" y="741" width="1.7" height="15.0" fill="rgb(217,22,16)" rx="2" ry="2" />
<text  x="308.29" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Scene, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (2 samples, 0.02%)</title><rect x="1188.5" y="837" width="0.2" height="15.0" fill="rgb(217,40,5)" rx="2" ry="2" />
<text  x="1191.46" y="847.5" ></text>
</g>
<g >
<title>security_file_permission (1 samples, 0.01%)</title><rect x="71.6" y="821" width="0.2" height="15.0" fill="rgb(226,84,54)" rx="2" ry="2" />
<text  x="74.65" y="831.5" ></text>
</g>
<g >
<title>do_syscall_64 (27 samples, 0.29%)</title><rect x="1123.1" y="693" width="3.5" height="15.0" fill="rgb(224,117,7)" rx="2" ry="2" />
<text  x="1126.10" y="703.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="174.9" y="341" width="0.2" height="15.0" fill="rgb(246,87,16)" rx="2" ry="2" />
<text  x="177.95" y="351.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (3 samples, 0.03%)</title><rect x="1108.9" y="629" width="0.4" height="15.0" fill="rgb(251,107,20)" rx="2" ry="2" />
<text  x="1111.87" y="639.5" ></text>
</g>
<g >
<title>std::move&lt;std::shared_ptr&lt;Bitmap&gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="1109.6" y="677" width="0.2" height="15.0" fill="rgb(231,213,28)" rx="2" ry="2" />
<text  x="1112.64" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="477.0" y="677" width="0.3" height="15.0" fill="rgb(206,189,42)" rx="2" ry="2" />
<text  x="480.03" y="687.5" ></text>
</g>
<g >
<title>Game_Interpreter_Map::ExecuteCommand (6 samples, 0.07%)</title><rect x="169.1" y="821" width="0.7" height="15.0" fill="rgb(249,166,7)" rx="2" ry="2" />
<text  x="172.05" y="831.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="155.5" y="773" width="0.2" height="15.0" fill="rgb(214,54,36)" rx="2" ry="2" />
<text  x="158.47" y="783.5" ></text>
</g>
<g >
<title>activate_task (1 samples, 0.01%)</title><rect x="828.6" y="501" width="0.1" height="15.0" fill="rgb(235,163,19)" rx="2" ry="2" />
<text  x="831.58" y="511.5" ></text>
</g>
<g >
<title>FileFinder::FindSound (1 samples, 0.01%)</title><rect x="159.1" y="661" width="0.1" height="15.0" fill="rgb(228,105,44)" rx="2" ry="2" />
<text  x="162.05" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="481.5" y="709" width="0.1" height="15.0" fill="rgb(230,22,22)" rx="2" ry="2" />
<text  x="484.51" y="719.5" ></text>
</g>
<g >
<title>rb_insert_color_cached (1 samples, 0.01%)</title><rect x="72.2" y="661" width="0.1" height="15.0" fill="rgb(254,68,50)" rx="2" ry="2" />
<text  x="75.16" y="671.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1111.7" y="645" width="0.1" height="15.0" fill="rgb(252,186,17)" rx="2" ry="2" />
<text  x="1114.69" y="655.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="1130.9" y="709" width="0.1" height="15.0" fill="rgb(213,59,41)" rx="2" ry="2" />
<text  x="1133.92" y="719.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.7" y="597" width="0.1" height="15.0" fill="rgb(228,78,4)" rx="2" ry="2" />
<text  x="178.72" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator* (1 samples, 0.01%)</title><rect x="89.2" y="901" width="0.1" height="15.0" fill="rgb(241,28,31)" rx="2" ry="2" />
<text  x="92.20" y="911.5" ></text>
</g>
<g >
<title>trb_in_td (1 samples, 0.01%)</title><rect x="1051.7" y="485" width="0.1" height="15.0" fill="rgb(248,48,28)" rx="2" ry="2" />
<text  x="1054.71" y="495.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1127.1" y="597" width="0.1" height="15.0" fill="rgb(214,211,16)" rx="2" ry="2" />
<text  x="1130.07" y="607.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="156.1" y="245" width="0.1" height="15.0" fill="rgb(234,183,46)" rx="2" ry="2" />
<text  x="159.11" y="255.5" ></text>
</g>
<g >
<title>Game_Character::IsFlying (1 samples, 0.01%)</title><rect x="1108.1" y="709" width="0.1" height="15.0" fill="rgb(245,60,45)" rx="2" ry="2" />
<text  x="1111.10" y="719.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="225.7" y="533" width="0.1" height="15.0" fill="rgb(222,192,11)" rx="2" ry="2" />
<text  x="228.70" y="543.5" ></text>
</g>
<g >
<title>FileRequestAsync::DownloadDone (2 samples, 0.02%)</title><rect x="167.0" y="709" width="0.3" height="15.0" fill="rgb(232,125,5)" rx="2" ry="2" />
<text  x="170.00" y="719.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator() (1 samples, 0.01%)</title><rect x="103.3" y="901" width="0.1" height="15.0" fill="rgb(254,114,37)" rx="2" ry="2" />
<text  x="106.30" y="911.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="926.6" y="629" width="0.2" height="15.0" fill="rgb(235,221,48)" rx="2" ry="2" />
<text  x="929.62" y="639.5" ></text>
</g>
<g >
<title>Bitmap::GetWidth (4 samples, 0.04%)</title><rect x="1102.5" y="709" width="0.5" height="15.0" fill="rgb(249,200,35)" rx="2" ry="2" />
<text  x="1105.46" y="719.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (1 samples, 0.01%)</title><rect x="166.5" y="693" width="0.1" height="15.0" fill="rgb(230,99,3)" rx="2" ry="2" />
<text  x="169.49" y="703.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (18 samples, 0.20%)</title><rect x="156.5" y="773" width="2.3" height="15.0" fill="rgb(239,182,44)" rx="2" ry="2" />
<text  x="159.49" y="783.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (3 samples, 0.03%)</title><rect x="176.5" y="901" width="0.4" height="15.0" fill="rgb(214,65,26)" rx="2" ry="2" />
<text  x="179.48" y="911.5" ></text>
</g>
<g >
<title>[libicuuc.so.63.1] (1 samples, 0.01%)</title><rect x="158.7" y="565" width="0.1" height="15.0" fill="rgb(244,36,37)" rx="2" ry="2" />
<text  x="161.67" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;int, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_destroy (5 samples, 0.05%)</title><rect x="958.2" y="549" width="0.6" height="15.0" fill="rgb(208,21,0)" rx="2" ry="2" />
<text  x="961.15" y="559.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="806.4" y="613" width="0.1" height="15.0" fill="rgb(254,160,27)" rx="2" ry="2" />
<text  x="809.41" y="623.5" ></text>
</g>
<g >
<title>Bitmap::Create (1 samples, 0.01%)</title><rect x="177.0" y="837" width="0.1" height="15.0" fill="rgb(228,174,27)" rx="2" ry="2" />
<text  x="180.00" y="847.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (1 samples, 0.01%)</title><rect x="101.9" y="885" width="0.1" height="15.0" fill="rgb(216,202,37)" rx="2" ry="2" />
<text  x="104.89" y="895.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1004.9" y="629" width="0.2" height="15.0" fill="rgb(247,77,50)" rx="2" ry="2" />
<text  x="1007.93" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="935.7" y="549" width="0.2" height="15.0" fill="rgb(212,47,40)" rx="2" ry="2" />
<text  x="938.72" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (1 samples, 0.01%)</title><rect x="159.1" y="597" width="0.1" height="15.0" fill="rgb(210,28,49)" rx="2" ry="2" />
<text  x="162.05" y="607.5" ></text>
</g>
<g >
<title>Sdl2Ui::GetTicks (1 samples, 0.01%)</title><rect x="949.7" y="405" width="0.1" height="15.0" fill="rgb(209,87,48)" rx="2" ry="2" />
<text  x="952.69" y="415.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, RPG::Map*, false&gt;::_M_head (4 samples, 0.04%)</title><rect x="92.0" y="901" width="0.5" height="15.0" fill="rgb(242,215,50)" rx="2" ry="2" />
<text  x="95.02" y="911.5" ></text>
</g>
<g >
<title>Game_Map::Refresh (2 samples, 0.02%)</title><rect x="79.3" y="901" width="0.3" height="15.0" fill="rgb(236,15,39)" rx="2" ry="2" />
<text  x="82.34" y="911.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (1 samples, 0.01%)</title><rect x="229.7" y="213" width="0.1" height="15.0" fill="rgb(224,228,30)" rx="2" ry="2" />
<text  x="232.67" y="223.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, RPG::Map*, std::default_delete&lt;RPG::Map&gt; &gt;::_M_head (5 samples, 0.05%)</title><rect x="245.6" y="645" width="0.6" height="15.0" fill="rgb(242,69,23)" rx="2" ry="2" />
<text  x="248.56" y="655.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (1 samples, 0.01%)</title><rect x="1127.1" y="613" width="0.1" height="15.0" fill="rgb(246,16,34)" rx="2" ry="2" />
<text  x="1130.07" y="623.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 3ul, 3ul&gt;::__less (1 samples, 0.01%)</title><rect x="100.0" y="901" width="0.1" height="15.0" fill="rgb(215,134,27)" rx="2" ry="2" />
<text  x="102.97" y="911.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="918.4" y="581" width="0.2" height="15.0" fill="rgb(228,161,4)" rx="2" ry="2" />
<text  x="921.42" y="591.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="468.4" y="597" width="0.2" height="15.0" fill="rgb(209,115,53)" rx="2" ry="2" />
<text  x="471.44" y="607.5" ></text>
</g>
<g >
<title>Game_CommonEvent::Update (6 samples, 0.07%)</title><rect x="169.1" y="853" width="0.7" height="15.0" fill="rgb(218,186,4)" rx="2" ry="2" />
<text  x="172.05" y="863.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="940.0" y="469" width="0.1" height="15.0" fill="rgb(253,52,32)" rx="2" ry="2" />
<text  x="942.95" y="479.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1111.4" y="661" width="0.2" height="15.0" fill="rgb(220,45,27)" rx="2" ry="2" />
<text  x="1114.44" y="671.5" ></text>
</g>
<g >
<title>Tone::Tone (1 samples, 0.01%)</title><rect x="1106.1" y="725" width="0.1" height="15.0" fill="rgb(250,32,1)" rx="2" ry="2" />
<text  x="1109.05" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.01%)</title><rect x="177.3" y="501" width="0.1" height="15.0" fill="rgb(250,204,8)" rx="2" ry="2" />
<text  x="180.25" y="511.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="1158.9" y="693" width="0.1" height="15.0" fill="rgb(246,229,47)" rx="2" ry="2" />
<text  x="1161.86" y="703.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (31 samples, 0.34%)</title><rect x="324.6" y="725" width="4.0" height="15.0" fill="rgb(233,63,54)" rx="2" ry="2" />
<text  x="327.64" y="735.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::operator()&lt;FileRequestResult*, void&gt; (5 samples, 0.05%)</title><rect x="160.7" y="709" width="0.7" height="15.0" fill="rgb(214,72,39)" rx="2" ry="2" />
<text  x="163.72" y="719.5" ></text>
</g>
<g >
<title>pixman_image_create_solid_fill (1 samples, 0.01%)</title><rect x="189.4" y="693" width="0.2" height="15.0" fill="rgb(241,188,41)" rx="2" ry="2" />
<text  x="192.43" y="703.5" ></text>
</g>
<g >
<title>Player::Update (7,425 samples, 80.65%)</title><rect x="179.7" y="821" width="951.6" height="15.0" fill="rgb(243,91,39)" rx="2" ry="2" />
<text  x="182.69" y="831.5" >Player::Update</text>
</g>
<g >
<title>xcb_writev (1 samples, 0.01%)</title><rect x="1120.9" y="629" width="0.1" height="15.0" fill="rgb(222,49,31)" rx="2" ry="2" />
<text  x="1123.92" y="639.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="259.4" y="661" width="0.1" height="15.0" fill="rgb(253,66,54)" rx="2" ry="2" />
<text  x="262.41" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (5 samples, 0.05%)</title><rect x="935.1" y="661" width="0.6" height="15.0" fill="rgb(249,42,0)" rx="2" ry="2" />
<text  x="938.08" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned char&gt;::allocate (2 samples, 0.02%)</title><rect x="161.1" y="533" width="0.3" height="15.0" fill="rgb(228,31,28)" rx="2" ry="2" />
<text  x="164.10" y="543.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (6 samples, 0.07%)</title><rect x="155.7" y="709" width="0.8" height="15.0" fill="rgb(222,43,8)" rx="2" ry="2" />
<text  x="158.72" y="719.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.01%)</title><rect x="178.7" y="901" width="0.1" height="15.0" fill="rgb(253,224,9)" rx="2" ry="2" />
<text  x="181.66" y="911.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (3 samples, 0.03%)</title><rect x="83.8" y="901" width="0.4" height="15.0" fill="rgb(223,135,18)" rx="2" ry="2" />
<text  x="86.82" y="911.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="952.3" y="389" width="0.1" height="15.0" fill="rgb(227,217,23)" rx="2" ry="2" />
<text  x="955.26" y="399.5" ></text>
</g>
<g >
<title>Bitmap::Bitmap (1 samples, 0.01%)</title><rect x="177.0" y="693" width="0.1" height="15.0" fill="rgb(231,161,51)" rx="2" ry="2" />
<text  x="180.00" y="703.5" ></text>
</g>
<g >
<title>Game_Interpreter::SkipTo (7 samples, 0.08%)</title><rect x="1005.1" y="677" width="0.9" height="15.0" fill="rgb(212,93,26)" rx="2" ry="2" />
<text  x="1008.06" y="687.5" ></text>
</g>
<g >
<title>tzset_internal (1 samples, 0.01%)</title><rect x="160.7" y="549" width="0.1" height="15.0" fill="rgb(247,13,47)" rx="2" ry="2" />
<text  x="163.72" y="559.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, Drawable**, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (34 samples, 0.37%)</title><rect x="324.3" y="741" width="4.3" height="15.0" fill="rgb(206,11,20)" rx="2" ry="2" />
<text  x="327.26" y="751.5" ></text>
</g>
<g >
<title>usb_hcd_giveback_urb (1 samples, 0.01%)</title><rect x="957.6" y="405" width="0.2" height="15.0" fill="rgb(235,154,2)" rx="2" ry="2" />
<text  x="960.64" y="415.5" ></text>
</g>
<g >
<title>std::none_of&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, Input::UiSource::Update()::{lambda(int)#1}&gt; (13 samples, 0.14%)</title><rect x="478.9" y="757" width="1.7" height="15.0" fill="rgb(236,59,54)" rx="2" ry="2" />
<text  x="481.95" y="767.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (1 samples, 0.01%)</title><rect x="1120.2" y="501" width="0.1" height="15.0" fill="rgb(250,110,0)" rx="2" ry="2" />
<text  x="1123.15" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;AudioSeData, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (1 samples, 0.01%)</title><rect x="99.3" y="901" width="0.2" height="15.0" fill="rgb(224,1,7)" rx="2" ry="2" />
<text  x="102.33" y="911.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.02%)</title><rect x="482.2" y="725" width="0.2" height="15.0" fill="rgb(241,89,54)" rx="2" ry="2" />
<text  x="485.15" y="735.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="548.5" y="629" width="0.2" height="15.0" fill="rgb(231,85,11)" rx="2" ry="2" />
<text  x="551.54" y="639.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (4 samples, 0.04%)</title><rect x="165.5" y="373" width="0.5" height="15.0" fill="rgb(253,6,14)" rx="2" ry="2" />
<text  x="168.46" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::_M_move_assign (2 samples, 0.02%)</title><rect x="1097.2" y="693" width="0.3" height="15.0" fill="rgb(206,72,30)" rx="2" ry="2" />
<text  x="1100.21" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="1109.4" y="677" width="0.1" height="15.0" fill="rgb(241,66,35)" rx="2" ry="2" />
<text  x="1112.39" y="687.5" ></text>
</g>
<g >
<title>blk_flush_plug_list (1 samples, 0.01%)</title><rect x="156.2" y="181" width="0.2" height="15.0" fill="rgb(208,71,52)" rx="2" ry="2" />
<text  x="159.23" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (6 samples, 0.07%)</title><rect x="155.7" y="725" width="0.8" height="15.0" fill="rgb(253,161,11)" rx="2" ry="2" />
<text  x="158.72" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="939.4" y="597" width="0.2" height="15.0" fill="rgb(245,190,26)" rx="2" ry="2" />
<text  x="942.44" y="607.5" ></text>
</g>
<g >
<title>Game_Picture::OnPictureSpriteReady (3 samples, 0.03%)</title><rect x="159.2" y="613" width="0.4" height="15.0" fill="rgb(238,14,9)" rx="2" ry="2" />
<text  x="162.18" y="623.5" ></text>
</g>
<g >
<title>Game_Screen::GetFlashColor (1 samples, 0.01%)</title><rect x="959.9" y="629" width="0.2" height="15.0" fill="rgb(225,221,3)" rx="2" ry="2" />
<text  x="962.95" y="639.5" ></text>
</g>
<g >
<title>__blk_mq_run_hw_queue (1 samples, 0.01%)</title><rect x="156.2" y="101" width="0.2" height="15.0" fill="rgb(249,110,26)" rx="2" ry="2" />
<text  x="159.23" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator* (5 samples, 0.05%)</title><rect x="1016.7" y="661" width="0.7" height="15.0" fill="rgb(226,119,8)" rx="2" ry="2" />
<text  x="1019.72" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt;, std::_Select1st&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt;, std::less&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; &gt;, std::allocator&lt;std::pair&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; const, (anonymous namespace)::CacheItem&gt; &gt; &gt;::_S_right (1 samples, 0.01%)</title><rect x="951.2" y="373" width="0.2" height="15.0" fill="rgb(208,3,2)" rx="2" ry="2" />
<text  x="954.23" y="383.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="1110.3" y="565" width="0.1" height="15.0" fill="rgb(237,200,42)" rx="2" ry="2" />
<text  x="1113.28" y="575.5" ></text>
</g>
<g >
<title>PicPointerPatch::AdjustShowParams (1 samples, 0.01%)</title><rect x="81.1" y="901" width="0.2" height="15.0" fill="rgb(224,56,32)" rx="2" ry="2" />
<text  x="84.13" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::empty (39 samples, 0.42%)</title><rect x="757.2" y="629" width="5.0" height="15.0" fill="rgb(246,213,16)" rx="2" ry="2" />
<text  x="760.19" y="639.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.02%)</title><rect x="1058.9" y="661" width="0.2" height="15.0" fill="rgb(206,213,31)" rx="2" ry="2" />
<text  x="1061.89" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;int&gt;::shared_ptr&lt;std::allocator&lt;int&gt;, int&gt; (6 samples, 0.07%)</title><rect x="943.3" y="565" width="0.8" height="15.0" fill="rgb(218,64,9)" rx="2" ry="2" />
<text  x="946.29" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="155.5" y="629" width="0.2" height="15.0" fill="rgb(236,187,7)" rx="2" ry="2" />
<text  x="158.47" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int&gt; (1 samples, 0.01%)</title><rect x="943.4" y="501" width="0.1" height="15.0" fill="rgb(220,222,2)" rx="2" ry="2" />
<text  x="946.41" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_manager (5 samples, 0.05%)</title><rect x="944.2" y="597" width="0.6" height="15.0" fill="rgb(211,174,1)" rx="2" ry="2" />
<text  x="947.18" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (5 samples, 0.05%)</title><rect x="953.8" y="389" width="0.6" height="15.0" fill="rgb(205,171,12)" rx="2" ry="2" />
<text  x="956.79" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Bitmap&gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="177.0" y="709" width="0.1" height="15.0" fill="rgb(227,226,18)" rx="2" ry="2" />
<text  x="180.00" y="719.5" ></text>
</g>
<g >
<title>_IO_new_do_write (1 samples, 0.01%)</title><rect x="935.9" y="373" width="0.1" height="15.0" fill="rgb(252,25,29)" rx="2" ry="2" />
<text  x="938.85" y="383.5" ></text>
</g>
<g >
<title>sock_recvmsg (3 samples, 0.03%)</title><rect x="1127.2" y="517" width="0.4" height="15.0" fill="rgb(249,29,34)" rx="2" ry="2" />
<text  x="1130.20" y="527.5" ></text>
</g>
<g >
<title>Sprite::GetZ (1 samples, 0.01%)</title><rect x="325.7" y="645" width="0.1" height="15.0" fill="rgb(245,17,45)" rx="2" ry="2" />
<text  x="328.67" y="655.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="155.5" y="789" width="0.2" height="15.0" fill="rgb(253,46,19)" rx="2" ry="2" />
<text  x="158.47" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (3 samples, 0.03%)</title><rect x="962.4" y="661" width="0.4" height="15.0" fill="rgb(240,129,0)" rx="2" ry="2" />
<text  x="965.38" y="671.5" ></text>
</g>
<g >
<title>Game_Interpreter::ValueOrVariable (3 samples, 0.03%)</title><rect x="932.0" y="661" width="0.4" height="15.0" fill="rgb(227,55,1)" rx="2" ry="2" />
<text  x="935.01" y="671.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.01%)</title><rect x="159.6" y="437" width="0.1" height="15.0" fill="rgb(226,200,20)" rx="2" ry="2" />
<text  x="162.57" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SavePicture, std::allocator&lt;RPG::SavePicture&gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="932.9" y="613" width="0.1" height="15.0" fill="rgb(222,87,32)" rx="2" ry="2" />
<text  x="935.90" y="623.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="155.2" y="693" width="0.1" height="15.0" fill="rgb(209,152,20)" rx="2" ry="2" />
<text  x="158.21" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;short&gt;::_M_ptr (1 samples, 0.01%)</title><rect x="317.6" y="661" width="0.1" height="15.0" fill="rgb(229,121,30)" rx="2" ry="2" />
<text  x="320.59" y="671.5" ></text>
</g>
<g >
<title>Game_Picture::Show (2 samples, 0.02%)</title><rect x="174.8" y="661" width="0.3" height="15.0" fill="rgb(233,70,10)" rx="2" ry="2" />
<text  x="177.82" y="671.5" ></text>
</g>
<g >
<title>Bitmap::Clear (1 samples, 0.01%)</title><rect x="155.2" y="533" width="0.1" height="15.0" fill="rgb(242,108,14)" rx="2" ry="2" />
<text  x="158.21" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="175.8" y="629" width="0.3" height="15.0" fill="rgb(242,206,46)" rx="2" ry="2" />
<text  x="178.84" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;AudioSeData, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (1 samples, 0.01%)</title><rect x="99.5" y="901" width="0.1" height="15.0" fill="rgb(227,150,27)" rx="2" ry="2" />
<text  x="102.46" y="911.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1122.3" y="629" width="0.3" height="15.0" fill="rgb(213,141,30)" rx="2" ry="2" />
<text  x="1125.33" y="639.5" ></text>
</g>
<g >
<title>MessageOverlay::IsAnyMessageVisible (2 samples, 0.02%)</title><rect x="180.3" y="757" width="0.3" height="15.0" fill="rgb(216,11,17)" rx="2" ry="2" />
<text  x="183.33" y="767.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="477.9" y="629" width="0.2" height="15.0" fill="rgb(250,14,32)" rx="2" ry="2" />
<text  x="480.92" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (6 samples, 0.07%)</title><rect x="155.7" y="565" width="0.8" height="15.0" fill="rgb(218,189,39)" rx="2" ry="2" />
<text  x="158.72" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="229.7" y="581" width="0.1" height="15.0" fill="rgb(251,83,46)" rx="2" ry="2" />
<text  x="232.67" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;AudioSeCache, std::default_delete&lt;AudioSeCache&gt; &gt;::~unique_ptr (2 samples, 0.02%)</title><rect x="167.0" y="549" width="0.3" height="15.0" fill="rgb(226,126,39)" rx="2" ry="2" />
<text  x="170.00" y="559.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.04%)</title><rect x="1119.3" y="549" width="0.5" height="15.0" fill="rgb(216,76,47)" rx="2" ry="2" />
<text  x="1122.25" y="559.5" ></text>
</g>
<g >
<title>Sprite::~Sprite (2 samples, 0.02%)</title><rect x="166.2" y="533" width="0.3" height="15.0" fill="rgb(228,58,18)" rx="2" ry="2" />
<text  x="169.23" y="543.5" ></text>
</g>
<g >
<title>TilemapLayer::Update (1 samples, 0.01%)</title><rect x="1108.7" y="741" width="0.2" height="15.0" fill="rgb(208,205,27)" rx="2" ry="2" />
<text  x="1111.74" y="751.5" ></text>
</g>
<g >
<title>iconv_open (1 samples, 0.01%)</title><rect x="477.8" y="725" width="0.1" height="15.0" fill="rgb(242,153,13)" rx="2" ry="2" />
<text  x="480.80" y="735.5" ></text>
</g>
<g >
<title>Bitmap::Create (1 samples, 0.01%)</title><rect x="155.2" y="709" width="0.1" height="15.0" fill="rgb(254,177,54)" rx="2" ry="2" />
<text  x="158.21" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (2 samples, 0.02%)</title><rect x="227.9" y="709" width="0.2" height="15.0" fill="rgb(223,204,9)" rx="2" ry="2" />
<text  x="230.88" y="719.5" ></text>
</g>
<g >
<title>strlen@plt (1 samples, 0.01%)</title><rect x="1111.8" y="645" width="0.1" height="15.0" fill="rgb(216,16,25)" rx="2" ry="2" />
<text  x="1114.82" y="655.5" ></text>
</g>
<g >
<title>TilemapLayer::Draw (70 samples, 0.76%)</title><rect x="231.7" y="757" width="9.0" height="15.0" fill="rgb(244,229,8)" rx="2" ry="2" />
<text  x="234.72" y="767.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="1128.1" y="725" width="0.1" height="15.0" fill="rgb(230,20,26)" rx="2" ry="2" />
<text  x="1131.10" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_S_key (1 samples, 0.01%)</title><rect x="1110.0" y="597" width="0.2" height="15.0" fill="rgb(218,64,23)" rx="2" ry="2" />
<text  x="1113.03" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::operator bool (4 samples, 0.04%)</title><rect x="98.4" y="901" width="0.5" height="15.0" fill="rgb(231,91,0)" rx="2" ry="2" />
<text  x="101.43" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="328.0" y="677" width="0.2" height="15.0" fill="rgb(216,136,35)" rx="2" ry="2" />
<text  x="330.97" y="687.5" ></text>
</g>
<g >
<title>std::default_delete&lt;AudioDecoder&gt;::operator() (1 samples, 0.01%)</title><rect x="169.1" y="517" width="0.1" height="15.0" fill="rgb(220,97,51)" rx="2" ry="2" />
<text  x="172.05" y="527.5" ></text>
</g>
<g >
<title>Game_Map::Update (4,863 samples, 52.82%)</title><rect x="483.2" y="773" width="623.2" height="15.0" fill="rgb(243,6,0)" rx="2" ry="2" />
<text  x="486.18" y="783.5" >Game_Map::Update</text>
</g>
<g >
<title>std::operator&lt; &lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (2 samples, 0.02%)</title><rect x="166.0" y="485" width="0.2" height="15.0" fill="rgb(248,3,43)" rx="2" ry="2" />
<text  x="168.97" y="495.5" ></text>
</g>
<g >
<title>ReaderUtil::GetElement&lt;RPG::SavePicture&gt; (1 samples, 0.01%)</title><rect x="959.2" y="613" width="0.1" height="15.0" fill="rgb(229,9,48)" rx="2" ry="2" />
<text  x="962.18" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;BaseUi, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (9 samples, 0.10%)</title><rect x="295.7" y="725" width="1.1" height="15.0" fill="rgb(250,223,31)" rx="2" ry="2" />
<text  x="298.68" y="735.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (4 samples, 0.04%)</title><rect x="170.6" y="853" width="0.5" height="15.0" fill="rgb(235,15,19)" rx="2" ry="2" />
<text  x="173.59" y="863.5" ></text>
</g>
<g >
<title>Scene_Map::UpdateStage1 (2 samples, 0.02%)</title><rect x="174.8" y="789" width="0.3" height="15.0" fill="rgb(229,171,14)" rx="2" ry="2" />
<text  x="177.82" y="799.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul, 2ul, 3ul&gt; (13 samples, 0.14%)</title><rect x="167.3" y="645" width="1.6" height="15.0" fill="rgb(230,30,20)" rx="2" ry="2" />
<text  x="170.26" y="655.5" ></text>
</g>
<g >
<title>Game_Interpreter_Map::ExecuteCommand (14 samples, 0.15%)</title><rect x="167.3" y="805" width="1.8" height="15.0" fill="rgb(240,33,5)" rx="2" ry="2" />
<text  x="170.26" y="815.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (10 samples, 0.11%)</title><rect x="285.6" y="677" width="1.2" height="15.0" fill="rgb(228,58,10)" rx="2" ry="2" />
<text  x="288.55" y="687.5" ></text>
</g>
<g >
<title>eventfd_write (7 samples, 0.08%)</title><rect x="72.0" y="821" width="0.9" height="15.0" fill="rgb(238,218,9)" rx="2" ry="2" />
<text  x="75.03" y="831.5" ></text>
</g>
<g >
<title>memmove (1 samples, 0.01%)</title><rect x="159.6" y="485" width="0.1" height="15.0" fill="rgb(208,196,6)" rx="2" ry="2" />
<text  x="162.57" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::operator (5 samples, 0.05%)</title><rect x="105.1" y="901" width="0.6" height="15.0" fill="rgb(234,101,6)" rx="2" ry="2" />
<text  x="108.10" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="107.9" y="901" width="0.1" height="15.0" fill="rgb(209,14,51)" rx="2" ry="2" />
<text  x="110.92" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (26 samples, 0.28%)</title><rect x="981.9" y="629" width="3.3" height="15.0" fill="rgb(249,74,31)" rx="2" ry="2" />
<text  x="984.86" y="639.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1188.8" y="917" width="0.2" height="15.0" fill="rgb(222,95,52)" rx="2" ry="2" />
<text  x="1191.85" y="927.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="1100.4" y="709" width="0.1" height="15.0" fill="rgb(245,60,37)" rx="2" ry="2" />
<text  x="1103.41" y="719.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.01%)</title><rect x="548.5" y="533" width="0.2" height="15.0" fill="rgb(206,53,54)" rx="2" ry="2" />
<text  x="551.54" y="543.5" ></text>
</g>
<g >
<title>blk_mq_flush_plug_list (1 samples, 0.01%)</title><rect x="156.2" y="165" width="0.2" height="15.0" fill="rgb(222,188,53)" rx="2" ry="2" />
<text  x="159.23" y="175.5" ></text>
</g>
<g >
<title>generic_file_read_iter (5 samples, 0.05%)</title><rect x="155.8" y="293" width="0.7" height="15.0" fill="rgb(226,0,33)" rx="2" ry="2" />
<text  x="158.85" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.01%)</title><rect x="1111.1" y="629" width="0.1" height="15.0" fill="rgb(220,108,11)" rx="2" ry="2" />
<text  x="1114.05" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Screen, std::default_delete&lt;Game_Screen&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="104.6" y="901" width="0.1" height="15.0" fill="rgb(235,137,42)" rx="2" ry="2" />
<text  x="107.58" y="911.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (3 samples, 0.03%)</title><rect x="159.2" y="565" width="0.4" height="15.0" fill="rgb(244,161,44)" rx="2" ry="2" />
<text  x="162.18" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::__normal_iterator (6 samples, 0.07%)</title><rect x="88.3" y="901" width="0.8" height="15.0" fill="rgb(219,127,9)" rx="2" ry="2" />
<text  x="91.31" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;short, std::allocator&lt;short&gt; &gt;::empty (2 samples, 0.02%)</title><rect x="962.0" y="645" width="0.3" height="15.0" fill="rgb(213,22,1)" rx="2" ry="2" />
<text  x="965.00" y="655.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (1 samples, 0.01%)</title><rect x="169.1" y="757" width="0.1" height="15.0" fill="rgb(222,146,3)" rx="2" ry="2" />
<text  x="172.05" y="767.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (2 samples, 0.02%)</title><rect x="123.8" y="917" width="0.3" height="15.0" fill="rgb(223,156,24)" rx="2" ry="2" />
<text  x="126.81" y="927.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::reset (4 samples, 0.04%)</title><rect x="925.6" y="645" width="0.5" height="15.0" fill="rgb(241,64,36)" rx="2" ry="2" />
<text  x="928.60" y="655.5" ></text>
</g>
<g >
<title>handle_tx_event (1 samples, 0.01%)</title><rect x="1051.7" y="501" width="0.1" height="15.0" fill="rgb(253,118,49)" rx="2" ry="2" />
<text  x="1054.71" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (*&amp;)(FileRequestResult*, int, int, bool), FileRequestResult*, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="169.1" y="629" width="0.1" height="15.0" fill="rgb(214,210,36)" rx="2" ry="2" />
<text  x="172.05" y="639.5" ></text>
</g>
<g >
<title>__tzfile_read (1 samples, 0.01%)</title><rect x="160.7" y="533" width="0.1" height="15.0" fill="rgb(247,190,2)" rx="2" ry="2" />
<text  x="163.72" y="543.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.01%)</title><rect x="1109.4" y="629" width="0.1" height="15.0" fill="rgb(249,227,38)" rx="2" ry="2" />
<text  x="1112.39" y="639.5" ></text>
</g>
<g >
<title>pipe_write (2 samples, 0.02%)</title><rect x="72.9" y="805" width="0.3" height="15.0" fill="rgb(227,219,11)" rx="2" ry="2" />
<text  x="75.93" y="815.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (1 samples, 0.01%)</title><rect x="1113.6" y="709" width="0.1" height="15.0" fill="rgb(252,196,23)" rx="2" ry="2" />
<text  x="1116.61" y="719.5" ></text>
</g>
<g >
<title>std::__tuple_compare&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;, 0ul, 3ul&gt;::__less (2 samples, 0.02%)</title><rect x="1110.2" y="581" width="0.2" height="15.0" fill="rgb(211,228,15)" rx="2" ry="2" />
<text  x="1113.15" y="591.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.01%)</title><rect x="889.8" y="565" width="0.2" height="15.0" fill="rgb(248,186,24)" rx="2" ry="2" />
<text  x="892.84" y="575.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="481.5" y="741" width="0.1" height="15.0" fill="rgb(234,126,1)" rx="2" ry="2" />
<text  x="484.51" y="751.5" ></text>
</g>
<g >
<title>posix_ktime_get_ts (1 samples, 0.01%)</title><rect x="123.3" y="853" width="0.1" height="15.0" fill="rgb(225,161,10)" rx="2" ry="2" />
<text  x="126.30" y="863.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="1109.4" y="581" width="0.1" height="15.0" fill="rgb(222,172,52)" rx="2" ry="2" />
<text  x="1112.39" y="591.5" ></text>
</g>
<g >
<title>smp_reschedule_interrupt (1 samples, 0.01%)</title><rect x="73.8" y="901" width="0.2" height="15.0" fill="rgb(227,198,53)" rx="2" ry="2" />
<text  x="76.83" y="911.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, Game_Picture*, std::default_delete&lt;Game_Picture&gt; &gt;::_M_head (1 samples, 0.01%)</title><rect x="934.1" y="581" width="0.1" height="15.0" fill="rgb(247,180,44)" rx="2" ry="2" />
<text  x="937.06" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (9 samples, 0.10%)</title><rect x="324.9" y="677" width="1.2" height="15.0" fill="rgb(214,190,38)" rx="2" ry="2" />
<text  x="327.90" y="687.5" ></text>
</g>
<g >
<title>finish_td (1 samples, 0.01%)</title><rect x="998.5" y="469" width="0.2" height="15.0" fill="rgb(205,190,53)" rx="2" ry="2" />
<text  x="1001.52" y="479.5" ></text>
</g>
<g >
<title>std::get_temporary_buffer&lt;Drawable*&gt; (5 samples, 0.05%)</title><rect x="323.5" y="725" width="0.6" height="15.0" fill="rgb(227,116,0)" rx="2" ry="2" />
<text  x="326.49" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy (3 samples, 0.03%)</title><rect x="116.1" y="901" width="0.4" height="15.0" fill="rgb(214,32,5)" rx="2" ry="2" />
<text  x="119.12" y="911.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (1 samples, 0.01%)</title><rect x="582.5" y="357" width="0.1" height="15.0" fill="rgb(218,157,43)" rx="2" ry="2" />
<text  x="585.51" y="367.5" ></text>
</g>
<g >
<title>clock_gettime (1 samples, 0.01%)</title><rect x="1118.6" y="773" width="0.1" height="15.0" fill="rgb(207,94,44)" rx="2" ry="2" />
<text  x="1121.61" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="106.3" y="901" width="0.1" height="15.0" fill="rgb(237,157,45)" rx="2" ry="2" />
<text  x="109.25" y="911.5" ></text>
</g>
<g >
<title>std::ostream::sentry::~sentry@plt (1 samples, 0.01%)</title><rect x="481.6" y="757" width="0.2" height="15.0" fill="rgb(243,103,24)" rx="2" ry="2" />
<text  x="484.64" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="935.7" y="613" width="0.2" height="15.0" fill="rgb(241,132,0)" rx="2" ry="2" />
<text  x="938.72" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_valptr (23 samples, 0.25%)</title><rect x="1156.0" y="757" width="3.0" height="15.0" fill="rgb(216,75,10)" rx="2" ry="2" />
<text  x="1159.04" y="767.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.01%)</title><rect x="121.9" y="885" width="0.1" height="15.0" fill="rgb(210,216,34)" rx="2" ry="2" />
<text  x="124.89" y="895.5" ></text>
</g>
<g >
<title>Game_Map::LoopVertical (1 samples, 0.01%)</title><rect x="1108.0" y="693" width="0.1" height="15.0" fill="rgb(207,214,15)" rx="2" ry="2" />
<text  x="1110.98" y="703.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (1 samples, 0.01%)</title><rect x="1120.8" y="581" width="0.1" height="15.0" fill="rgb(250,78,0)" rx="2" ry="2" />
<text  x="1123.79" y="591.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (40 samples, 0.43%)</title><rect x="161.4" y="773" width="5.1" height="15.0" fill="rgb(250,3,13)" rx="2" ry="2" />
<text  x="164.36" y="783.5" ></text>
</g>
<g >
<title>Sprite::~Sprite (2 samples, 0.02%)</title><rect x="166.2" y="517" width="0.3" height="15.0" fill="rgb(230,129,14)" rx="2" ry="2" />
<text  x="169.23" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="1109.3" y="693" width="0.1" height="15.0" fill="rgb(237,150,25)" rx="2" ry="2" />
<text  x="1112.26" y="703.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt; &gt;::_M_invoke (3 samples, 0.03%)</title><rect x="159.2" y="741" width="0.4" height="15.0" fill="rgb(228,149,51)" rx="2" ry="2" />
<text  x="162.18" y="751.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (1 samples, 0.01%)</title><rect x="229.7" y="501" width="0.1" height="15.0" fill="rgb(253,44,23)" rx="2" ry="2" />
<text  x="232.67" y="511.5" ></text>
</g>
<g >
<title>native_write_msr (23 samples, 0.25%)</title><rect x="1123.4" y="501" width="2.9" height="15.0" fill="rgb(208,47,35)" rx="2" ry="2" />
<text  x="1126.36" y="511.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.01%)</title><rect x="159.8" y="453" width="0.2" height="15.0" fill="rgb(222,193,26)" rx="2" ry="2" />
<text  x="162.82" y="463.5" ></text>
</g>
<g >
<title>Game_Picture::SetNonEffectParams (3 samples, 0.03%)</title><rect x="958.9" y="645" width="0.4" height="15.0" fill="rgb(230,173,42)" rx="2" ry="2" />
<text  x="961.92" y="655.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.05%)</title><rect x="941.2" y="613" width="0.7" height="15.0" fill="rgb(246,164,19)" rx="2" ry="2" />
<text  x="944.23" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Transition, std::default_delete&lt;Transition&gt; &gt;::get (1 samples, 0.01%)</title><rect x="1189.9" y="917" width="0.1" height="15.0" fill="rgb(223,10,9)" rx="2" ry="2" />
<text  x="1192.87" y="927.5" ></text>
</g>
<g >
<title>_copy_to_user (1 samples, 0.01%)</title><rect x="1116.9" y="661" width="0.2" height="15.0" fill="rgb(250,38,54)" rx="2" ry="2" />
<text  x="1119.95" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (2 samples, 0.02%)</title><rect x="175.8" y="693" width="0.3" height="15.0" fill="rgb(254,25,54)" rx="2" ry="2" />
<text  x="178.84" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Game_Event*, std::vector&lt;Game_Event, std::allocator&lt;Game_Event&gt; &gt; &gt;::__normal_iterator (11 samples, 0.12%)</title><rect x="1072.1" y="677" width="1.4" height="15.0" fill="rgb(243,33,42)" rx="2" ry="2" />
<text  x="1075.09" y="687.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.01%)</title><rect x="548.5" y="517" width="0.2" height="15.0" fill="rgb(253,43,47)" rx="2" ry="2" />
<text  x="551.54" y="527.5" ></text>
</g>
<g >
<title>XGetEventData (1 samples, 0.01%)</title><rect x="1120.7" y="693" width="0.1" height="15.0" fill="rgb(215,177,33)" rx="2" ry="2" />
<text  x="1123.66" y="703.5" ></text>
</g>
<g >
<title>AsyncHandler::IsImportantFilePending (2 samples, 0.02%)</title><rect x="482.8" y="789" width="0.3" height="15.0" fill="rgb(221,195,15)" rx="2" ry="2" />
<text  x="485.79" y="799.5" ></text>
</g>
<g >
<title>usb_hcd_giveback_urb (1 samples, 0.01%)</title><rect x="74.1" y="709" width="0.1" height="15.0" fill="rgb(252,172,18)" rx="2" ry="2" />
<text  x="77.08" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::operator[] (1 samples, 0.01%)</title><rect x="322.7" y="741" width="0.1" height="15.0" fill="rgb(240,164,11)" rx="2" ry="2" />
<text  x="325.72" y="751.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="259.4" y="725" width="0.1" height="15.0" fill="rgb(223,208,23)" rx="2" ry="2" />
<text  x="262.41" y="735.5" ></text>
</g>
<g >
<title>ustrcase_internalToLower_63 (1 samples, 0.01%)</title><rect x="158.7" y="581" width="0.1" height="15.0" fill="rgb(234,228,4)" rx="2" ry="2" />
<text  x="161.67" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (3 samples, 0.03%)</title><rect x="159.2" y="517" width="0.4" height="15.0" fill="rgb(236,73,1)" rx="2" ry="2" />
<text  x="162.18" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="955.7" y="293" width="0.1" height="15.0" fill="rgb(245,161,8)" rx="2" ry="2" />
<text  x="958.72" y="303.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="477.9" y="549" width="0.2" height="15.0" fill="rgb(245,88,34)" rx="2" ry="2" />
<text  x="480.92" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_default_append (4 samples, 0.04%)</title><rect x="158.2" y="421" width="0.5" height="15.0" fill="rgb(207,195,36)" rx="2" ry="2" />
<text  x="161.16" y="431.5" ></text>
</g>
<g >
<title>Opacity::IsOpaque (2 samples, 0.02%)</title><rect x="183.3" y="693" width="0.2" height="15.0" fill="rgb(215,198,4)" rx="2" ry="2" />
<text  x="186.28" y="703.5" ></text>
</g>
<g >
<title>finish_task_switch (8 samples, 0.09%)</title><rect x="1121.0" y="405" width="1.1" height="15.0" fill="rgb(208,150,33)" rx="2" ry="2" />
<text  x="1124.05" y="415.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.25 (8 samples, 0.09%)</title><rect x="1121.0" y="325" width="1.1" height="15.0" fill="rgb(250,12,16)" rx="2" ry="2" />
<text  x="1124.05" y="335.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator() (1 samples, 0.01%)</title><rect x="935.7" y="581" width="0.2" height="15.0" fill="rgb(212,68,52)" rx="2" ry="2" />
<text  x="938.72" y="591.5" ></text>
</g>
<g >
<title>std::min&lt;long&gt; (1 samples, 0.01%)</title><rect x="327.6" y="693" width="0.1" height="15.0" fill="rgb(209,229,25)" rx="2" ry="2" />
<text  x="330.59" y="703.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;Drawable**, __gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (6 samples, 0.07%)</title><rect x="326.8" y="693" width="0.8" height="15.0" fill="rgb(231,183,54)" rx="2" ry="2" />
<text  x="329.82" y="703.5" ></text>
</g>
<g >
<title>Bitmap::GetHeight (2 samples, 0.02%)</title><rect x="228.6" y="725" width="0.3" height="15.0" fill="rgb(237,219,52)" rx="2" ry="2" />
<text  x="231.65" y="735.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (40 samples, 0.43%)</title><rect x="161.4" y="629" width="5.1" height="15.0" fill="rgb(224,165,18)" rx="2" ry="2" />
<text  x="164.36" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (2 samples, 0.02%)</title><rect x="1082.6" y="709" width="0.3" height="15.0" fill="rgb(224,143,31)" rx="2" ry="2" />
<text  x="1085.60" y="719.5" ></text>
</g>
<g >
<title>dequeue_entity (1 samples, 0.01%)</title><rect x="1129.3" y="613" width="0.1" height="15.0" fill="rgb(210,44,22)" rx="2" ry="2" />
<text  x="1132.25" y="623.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (3 samples, 0.03%)</title><rect x="159.2" y="725" width="0.4" height="15.0" fill="rgb(210,33,36)" rx="2" ry="2" />
<text  x="162.18" y="735.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="941.4" y="581" width="0.3" height="15.0" fill="rgb(222,146,21)" rx="2" ry="2" />
<text  x="944.36" y="591.5" ></text>
</g>
<g >
<title>std::forward&lt;Rect const&amp;&gt; (1 samples, 0.01%)</title><rect x="230.2" y="693" width="0.1" height="15.0" fill="rgb(212,155,34)" rx="2" ry="2" />
<text  x="233.18" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (4 samples, 0.04%)</title><rect x="160.0" y="469" width="0.5" height="15.0" fill="rgb(242,170,35)" rx="2" ry="2" />
<text  x="162.95" y="479.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.6" y="469" width="0.1" height="15.0" fill="rgb(229,223,5)" rx="2" ry="2" />
<text  x="178.59" y="479.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (5 samples, 0.05%)</title><rect x="169.2" y="597" width="0.6" height="15.0" fill="rgb(213,152,45)" rx="2" ry="2" />
<text  x="172.18" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="229.7" y="373" width="0.1" height="15.0" fill="rgb(240,97,47)" rx="2" ry="2" />
<text  x="232.67" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::operator (1 samples, 0.01%)</title><rect x="961.7" y="629" width="0.2" height="15.0" fill="rgb(239,116,8)" rx="2" ry="2" />
<text  x="964.74" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (2 samples, 0.02%)</title><rect x="1084.1" y="709" width="0.3" height="15.0" fill="rgb(224,162,24)" rx="2" ry="2" />
<text  x="1087.14" y="719.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (87 samples, 0.94%)</title><rect x="650.6" y="661" width="11.1" height="15.0" fill="rgb(248,87,42)" rx="2" ry="2" />
<text  x="653.56" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::construct&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (3 samples, 0.03%)</title><rect x="159.2" y="469" width="0.4" height="15.0" fill="rgb(238,58,3)" rx="2" ry="2" />
<text  x="162.18" y="479.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="1148.6" y="741" width="0.1" height="15.0" fill="rgb(211,88,24)" rx="2" ry="2" />
<text  x="1151.60" y="751.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (1 samples, 0.01%)</title><rect x="155.2" y="677" width="0.1" height="15.0" fill="rgb(217,144,40)" rx="2" ry="2" />
<text  x="158.21" y="687.5" ></text>
</g>
<g >
<title>ext4_lookup (1 samples, 0.01%)</title><rect x="155.5" y="325" width="0.1" height="15.0" fill="rgb(227,94,26)" rx="2" ry="2" />
<text  x="158.47" y="335.5" ></text>
</g>
<g >
<title>do_mmap (1 samples, 0.01%)</title><rect x="161.1" y="293" width="0.1" height="15.0" fill="rgb(230,46,8)" rx="2" ry="2" />
<text  x="164.10" y="303.5" ></text>
</g>
<g >
<title>blk_mq_do_dispatch_sched (1 samples, 0.01%)</title><rect x="156.2" y="69" width="0.2" height="15.0" fill="rgb(223,36,44)" rx="2" ry="2" />
<text  x="159.23" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt;::begin (1 samples, 0.01%)</title><rect x="177.6" y="901" width="0.2" height="15.0" fill="rgb(242,164,50)" rx="2" ry="2" />
<text  x="180.64" y="911.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (48 samples, 0.52%)</title><rect x="1112.5" y="741" width="6.1" height="15.0" fill="rgb(244,201,7)" rx="2" ry="2" />
<text  x="1115.46" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::_S_left (1 samples, 0.01%)</title><rect x="942.1" y="565" width="0.2" height="15.0" fill="rgb(232,48,27)" rx="2" ry="2" />
<text  x="945.13" y="575.5" ></text>
</g>
<g >
<title>std::_Mem_fn_base&lt;void (Game_Picture::*)(FileRequestResult*), true&gt;::operator()&lt;Game_Picture*&amp;, FileRequestResult*&gt; (2 samples, 0.02%)</title><rect x="175.8" y="821" width="0.3" height="15.0" fill="rgb(225,193,33)" rx="2" ry="2" />
<text  x="178.84" y="831.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.01%)</title><rect x="60.2" y="837" width="0.2" height="15.0" fill="rgb(252,203,50)" rx="2" ry="2" />
<text  x="63.24" y="847.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.01%)</title><rect x="957.6" y="597" width="0.2" height="15.0" fill="rgb(216,194,18)" rx="2" ry="2" />
<text  x="960.64" y="607.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.03%)</title><rect x="943.7" y="437" width="0.4" height="15.0" fill="rgb(239,103,26)" rx="2" ry="2" />
<text  x="946.67" y="447.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, Game_Screen*, std::default_delete&lt;Game_Screen&gt; &gt; (1 samples, 0.01%)</title><rect x="935.0" y="597" width="0.1" height="15.0" fill="rgb(241,215,27)" rx="2" ry="2" />
<text  x="937.95" y="607.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.01%)</title><rect x="70.7" y="533" width="0.2" height="15.0" fill="rgb(246,141,30)" rx="2" ry="2" />
<text  x="73.75" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char32_t&gt;::allocate (2 samples, 0.02%)</title><rect x="155.0" y="757" width="0.2" height="15.0" fill="rgb(239,196,31)" rx="2" ry="2" />
<text  x="157.95" y="767.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (3 samples, 0.03%)</title><rect x="159.2" y="629" width="0.4" height="15.0" fill="rgb(216,200,50)" rx="2" ry="2" />
<text  x="162.18" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.01%)</title><rect x="97.0" y="901" width="0.2" height="15.0" fill="rgb(219,190,46)" rx="2" ry="2" />
<text  x="100.02" y="911.5" ></text>
</g>
<g >
<title>Game_Interpreter::GetFrame (1 samples, 0.01%)</title><rect x="158.8" y="901" width="0.1" height="15.0" fill="rgb(224,46,15)" rx="2" ry="2" />
<text  x="161.80" y="911.5" ></text>
</g>
<g >
<title>Bitmap::height (1 samples, 0.01%)</title><rect x="159.2" y="389" width="0.1" height="15.0" fill="rgb(211,14,38)" rx="2" ry="2" />
<text  x="162.18" y="399.5" ></text>
</g>
<g >
<title>std::make_shared&lt;Bitmap, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (6 samples, 0.07%)</title><rect x="155.7" y="661" width="0.8" height="15.0" fill="rgb(225,187,6)" rx="2" ry="2" />
<text  x="158.72" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt;&amp;, Game_Picture*&amp;, FileRequestResult*&gt; (5 samples, 0.05%)</title><rect x="169.2" y="613" width="0.6" height="15.0" fill="rgb(223,18,32)" rx="2" ry="2" />
<text  x="172.18" y="623.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.02%)</title><rect x="1078.1" y="709" width="0.3" height="15.0" fill="rgb(206,102,18)" rx="2" ry="2" />
<text  x="1081.11" y="719.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="1148.7" y="757" width="0.2" height="15.0" fill="rgb(251,97,19)" rx="2" ry="2" />
<text  x="1151.73" y="767.5" ></text>
</g>
<g >
<title>std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Drawable const*, Drawable const*)&gt; &gt; (3 samples, 0.03%)</title><rect x="326.2" y="677" width="0.4" height="15.0" fill="rgb(209,65,23)" rx="2" ry="2" />
<text  x="329.18" y="687.5" ></text>
</g>
<g >
<title>__x64_sys_poll (9 samples, 0.10%)</title><rect x="1121.0" y="517" width="1.2" height="15.0" fill="rgb(210,127,51)" rx="2" ry="2" />
<text  x="1124.05" y="527.5" ></text>
</g>
<g >
<title>pixman_image_composite32 (4 samples, 0.04%)</title><rect x="190.2" y="693" width="0.5" height="15.0" fill="rgb(243,124,29)" rx="2" ry="2" />
<text  x="193.20" y="703.5" ></text>
</g>
<g >
<title>std::_Base_bitset&lt;1ul&gt;::_S_maskbit (2 samples, 0.02%)</title><rect x="929.4" y="597" width="0.3" height="15.0" fill="rgb(229,94,26)" rx="2" ry="2" />
<text  x="932.44" y="607.5" ></text>
</g>
<g >
<title>__GI___pthread_getspecific (2 samples, 0.02%)</title><rect x="276.1" y="645" width="0.2" height="15.0" fill="rgb(210,125,41)" rx="2" ry="2" />
<text  x="279.07" y="655.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="477.9" y="613" width="0.2" height="15.0" fill="rgb(243,122,49)" rx="2" ry="2" />
<text  x="480.92" y="623.5" ></text>
</g>
<g >
<title>Sprite::Flash (2 samples, 0.02%)</title><rect x="952.0" y="405" width="0.3" height="15.0" fill="rgb(226,200,27)" rx="2" ry="2" />
<text  x="955.00" y="415.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (3 samples, 0.03%)</title><rect x="1122.2" y="661" width="0.4" height="15.0" fill="rgb(246,77,8)" rx="2" ry="2" />
<text  x="1125.20" y="671.5" ></text>
</g>
<g >
<title>dequeue_task_fair (2 samples, 0.02%)</title><rect x="61.1" y="757" width="0.3" height="15.0" fill="rgb(240,12,35)" rx="2" ry="2" />
<text  x="64.14" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;short, short, std::_Identity&lt;short&gt;, std::less&lt;short&gt;, std::allocator&lt;short&gt; &gt;::_M_begin (1 samples, 0.01%)</title><rect x="92.7" y="901" width="0.1" height="15.0" fill="rgb(217,115,26)" rx="2" ry="2" />
<text  x="95.67" y="911.5" ></text>
</g>
<g >
<title>__fget (1 samples, 0.01%)</title><rect x="1127.6" y="485" width="0.1" height="15.0" fill="rgb(221,127,13)" rx="2" ry="2" />
<text  x="1130.58" y="495.5" ></text>
</g>
<g >
<title>[libnvidia-glcore.so.390.116] (3 samples, 0.03%)</title><rect x="170.7" y="837" width="0.4" height="15.0" fill="rgb(224,33,21)" rx="2" ry="2" />
<text  x="173.72" y="847.5" ></text>
</g>
<g >
<title>posix_get_monotonic_raw (1 samples, 0.01%)</title><rect x="1109.1" y="565" width="0.2" height="15.0" fill="rgb(231,61,27)" rx="2" ry="2" />
<text  x="1112.13" y="575.5" ></text>
</g>
<g >
<title>Game_System::OnSeReady (2 samples, 0.02%)</title><rect x="166.6" y="741" width="0.3" height="15.0" fill="rgb(205,149,44)" rx="2" ry="2" />
<text  x="169.62" y="751.5" ></text>
</g>
<g >
<title>speex_resampler_process_interleaved_int (1 samples, 0.01%)</title><rect x="161.0" y="533" width="0.1" height="15.0" fill="rgb(224,167,12)" rx="2" ry="2" />
<text  x="163.98" y="543.5" ></text>
</g>
<g >
<title>do_nanosleep (26 samples, 0.28%)</title><rect x="1123.1" y="645" width="3.3" height="15.0" fill="rgb(219,47,11)" rx="2" ry="2" />
<text  x="1126.10" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt; &gt;::find (1 samples, 0.01%)</title><rect x="1111.1" y="645" width="0.1" height="15.0" fill="rgb(219,52,4)" rx="2" ry="2" />
<text  x="1114.05" y="655.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (1 samples, 0.01%)</title><rect x="155.8" y="261" width="0.2" height="15.0" fill="rgb(212,37,31)" rx="2" ry="2" />
<text  x="158.85" y="271.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="1078.2" y="661" width="0.2" height="15.0" fill="rgb(222,75,20)" rx="2" ry="2" />
<text  x="1081.24" y="671.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.01%)</title><rect x="957.1" y="453" width="0.2" height="15.0" fill="rgb(225,168,4)" rx="2" ry="2" />
<text  x="960.13" y="463.5" ></text>
</g>
<g >
<title>Game_Screen::GetPicture (1 samples, 0.01%)</title><rect x="79.8" y="901" width="0.2" height="15.0" fill="rgb(240,201,7)" rx="2" ry="2" />
<text  x="82.85" y="911.5" ></text>
</g>
<g >
<title>Bitmap::Create (1 samples, 0.01%)</title><rect x="166.5" y="661" width="0.1" height="15.0" fill="rgb(227,127,0)" rx="2" ry="2" />
<text  x="169.49" y="671.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.01%)</title><rect x="159.6" y="453" width="0.1" height="15.0" fill="rgb(214,214,24)" rx="2" ry="2" />
<text  x="162.57" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;RPG::SaveEventExecFrame*, std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt; &gt;::operator* (3 samples, 0.03%)</title><rect x="964.9" y="661" width="0.4" height="15.0" fill="rgb(246,57,16)" rx="2" ry="2" />
<text  x="967.95" y="671.5" ></text>
</g>
<g >
<title>LibsndfileDecoder::~LibsndfileDecoder (1 samples, 0.01%)</title><rect x="169.1" y="437" width="0.1" height="15.0" fill="rgb(249,138,46)" rx="2" ry="2" />
<text  x="172.05" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (FileRequestResult*), std::_Bind&lt;void (*(std::_Placeholder&lt;1&gt;, int, int, bool))(FileRequestResult*, int, int, bool)&gt; &gt;::_M_invoke (5 samples, 0.05%)</title><rect x="160.7" y="725" width="0.7" height="15.0" fill="rgb(226,143,2)" rx="2" ry="2" />
<text  x="163.72" y="735.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="1006.2" y="613" width="0.1" height="15.0" fill="rgb(234,78,49)" rx="2" ry="2" />
<text  x="1009.21" y="623.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::__call&lt;void, FileRequestResult*&amp;&amp;, 0ul, 1ul&gt; (1 samples, 0.01%)</title><rect x="177.3" y="853" width="0.1" height="15.0" fill="rgb(249,87,31)" rx="2" ry="2" />
<text  x="180.25" y="863.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, unsigned char*, unsigned char*&gt; (1 samples, 0.01%)</title><rect x="159.6" y="533" width="0.1" height="15.0" fill="rgb(251,7,44)" rx="2" ry="2" />
<text  x="162.57" y="543.5" ></text>
</g>
<g >
<title>TilemapLayer::Draw(int)::{lambda(int, int)#2}::operator() (24 samples, 0.26%)</title><rect x="256.5" y="741" width="3.0" height="15.0" fill="rgb(205,98,6)" rx="2" ry="2" />
<text  x="259.46" y="751.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::operator= (1 samples, 0.01%)</title><rect x="953.2" y="405" width="0.1" height="15.0" fill="rgb(252,42,44)" rx="2" ry="2" />
<text  x="956.15" y="415.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="177.3" y="437" width="0.1" height="15.0" fill="rgb(211,209,43)" rx="2" ry="2" />
<text  x="180.25" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::operator!= (2 samples, 0.02%)</title><rect x="1186.4" y="773" width="0.3" height="15.0" fill="rgb(224,10,19)" rx="2" ry="2" />
<text  x="1189.41" y="783.5" ></text>
</g>
<g >
<title>FileFinder::FindImage (1 samples, 0.01%)</title><rect x="165.3" y="549" width="0.2" height="15.0" fill="rgb(252,134,53)" rx="2" ry="2" />
<text  x="168.33" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Bitmap, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (16 samples, 0.17%)</title><rect x="302.7" y="709" width="2.1" height="15.0" fill="rgb(241,149,23)" rx="2" ry="2" />
<text  x="305.73" y="719.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, unsigned char*, unsigned char*&gt; (1 samples, 0.01%)</title><rect x="159.6" y="517" width="0.1" height="15.0" fill="rgb(234,128,43)" rx="2" ry="2" />
<text  x="162.57" y="527.5" ></text>
</g>
<g >
<title>std::_Bind&lt;std::_Mem_fn&lt;void (Game_Picture::*)(FileRequestResult*)&gt; (Game_Picture*, std::_Placeholder&lt;1&gt;)&gt;::operator()&lt;FileRequestResult*, void&gt; (40 samples, 0.43%)</title><rect x="161.4" y="693" width="5.1" height="15.0" fill="rgb(216,123,2)" rx="2" ry="2" />
<text  x="164.36" y="703.5" ></text>
</g>
<g >
<title>Game_Character::GetScreenZ (2 samples, 0.02%)</title><rect x="1108.0" y="725" width="0.2" height="15.0" fill="rgb(213,179,25)" rx="2" ry="2" />
<text  x="1110.98" y="735.5" ></text>
</g>
<g >
<title>FpsOverlay::AddFrame (1 samples, 0.01%)</title><rect x="180.2" y="789" width="0.1" height="15.0" fill="rgb(240,68,46)" rx="2" ry="2" />
<text  x="183.20" y="799.5" ></text>
</g>
<g >
<title>Player::Update (2 samples, 0.02%)</title><rect x="167.0" y="901" width="0.3" height="15.0" fill="rgb(245,59,37)" rx="2" ry="2" />
<text  x="170.00" y="911.5" ></text>
</g>
<g >
<title>std::function&lt;void (FileRequestResult*)&gt;::operator() (1 samples, 0.01%)</title><rect x="166.5" y="837" width="0.1" height="15.0" fill="rgb(220,27,3)" rx="2" ry="2" />
<text  x="169.49" y="847.5" ></text>
</g>
<g >
<title>Window::Draw (1 samples, 0.01%)</title><rect x="323.4" y="773" width="0.1" height="15.0" fill="rgb(224,118,12)" rx="2" ry="2" />
<text  x="326.36" y="783.5" ></text>
</g>
<g >
<title>speex_resampler_process_int (1 samples, 0.01%)</title><rect x="161.0" y="517" width="0.1" height="15.0" fill="rgb(233,117,18)" rx="2" ry="2" />
<text  x="163.98" y="527.5" ></text>
</g>
<g >
<title>__sys_recvmsg (4 samples, 0.04%)</title><rect x="1120.0" y="533" width="0.5" height="15.0" fill="rgb(205,121,8)" rx="2" ry="2" />
<text  x="1123.02" y="543.5" ></text>
</g>
<g >
<title>_XEventsQueued (8 samples, 0.09%)</title><rect x="1127.1" y="725" width="1.0" height="15.0" fill="rgb(233,208,2)" rx="2" ry="2" />
<text  x="1130.07" y="735.5" ></text>
</g>
<g >
<title>FileRequestAsync::Start (6 samples, 0.07%)</title><rect x="155.7" y="901" width="0.8" height="15.0" fill="rgb(242,40,28)" rx="2" ry="2" />
<text  x="158.72" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::EventCommand, std::allocator&lt;RPG::EventCommand&gt; &gt;::operator[] (343 samples, 3.73%)</title><rect x="762.6" y="645" width="43.9" height="15.0" fill="rgb(242,79,13)" rx="2" ry="2" />
<text  x="765.58" y="655.5" >std:..</text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, FileRequestAsync&gt; &gt;::_M_valptr (2 samples, 0.02%)</title><rect x="1186.0" y="757" width="0.3" height="15.0" fill="rgb(214,101,6)" rx="2" ry="2" />
<text  x="1189.03" y="767.5" ></text>
</g>
<g >
<title>update_blocked_averages (1 samples, 0.01%)</title><rect x="1078.2" y="629" width="0.2" height="15.0" fill="rgb(245,219,26)" rx="2" ry="2" />
<text  x="1081.24" y="639.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandConditionalBranch (1,611 samples, 17.50%)</title><rect x="642.1" y="677" width="206.5" height="15.0" fill="rgb(250,129,6)" rx="2" ry="2" />
<text  x="645.10" y="687.5" >Game_Interpreter::CommandCo..</text>
</g>
<g >
<title>update_cfs_group (1 samples, 0.01%)</title><rect x="948.9" y="197" width="0.2" height="15.0" fill="rgb(249,9,39)" rx="2" ry="2" />
<text  x="951.92" y="207.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="175.6" y="389" width="0.1" height="15.0" fill="rgb(214,170,10)" rx="2" ry="2" />
<text  x="178.59" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Game_Picture, std::default_delete&lt;Game_Picture&gt; &gt;::operator bool (3 samples, 0.03%)</title><rect x="933.8" y="645" width="0.4" height="15.0" fill="rgb(214,181,4)" rx="2" ry="2" />
<text  x="936.80" y="655.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (44 samples, 0.48%)</title><rect x="183.7" y="677" width="5.6" height="15.0" fill="rgb(251,193,13)" rx="2" ry="2" />
<text  x="186.66" y="687.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (9 samples, 0.10%)</title><rect x="1121.0" y="677" width="1.2" height="15.0" fill="rgb(245,36,18)" rx="2" ry="2" />
<text  x="1124.05" y="687.5" ></text>
</g>
<g >
<title>__GI___writev (1 samples, 0.01%)</title><rect x="1120.9" y="549" width="0.1" height="15.0" fill="rgb(252,196,36)" rx="2" ry="2" />
<text  x="1123.92" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::Variable, std::allocator&lt;RPG::Variable&gt; &gt;::size (4 samples, 0.04%)</title><rect x="831.8" y="645" width="0.5" height="15.0" fill="rgb(234,96,42)" rx="2" ry="2" />
<text  x="834.78" y="655.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="178.7" y="885" width="0.1" height="15.0" fill="rgb(220,5,0)" rx="2" ry="2" />
<text  x="181.66" y="895.5" ></text>
</g>
<g >
<title>std::vector&lt;RPG::SaveEventExecFrame, std::allocator&lt;RPG::SaveEventExecFrame&gt; &gt;::back (30 samples, 0.33%)</title><rect x="753.3" y="629" width="3.9" height="15.0" fill="rgb(215,117,50)" rx="2" ry="2" />
<text  x="756.35" y="639.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="1120.8" y="533" width="0.1" height="15.0" fill="rgb(215,193,48)" rx="2" ry="2" />
<text  x="1123.79" y="543.5" ></text>
</g>
<g >
<title>Game_Interpreter::CommandPlaySound (1 samples, 0.01%)</title><rect x="159.1" y="853" width="0.1" height="15.0" fill="rgb(236,63,47)" rx="2" ry="2" />
<text  x="162.05" y="863.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;RPG::Map, std::default_delete&lt;RPG::Map&gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="961.6" y="581" width="0.1" height="15.0" fill="rgb(253,10,20)" rx="2" ry="2" />
<text  x="964.61" y="591.5" ></text>
</g>
<g >
<title>[libSDL2-2.0.so.0.9.0] (2 samples, 0.02%)</title><rect x="477.8" y="757" width="0.3" height="15.0" fill="rgb(209,27,4)" rx="2" ry="2" />
<text  x="480.80" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (1 samples, 0.01%)</title><rect x="958.0" y="533" width="0.2" height="15.0" fill="rgb(254,156,43)" rx="2" ry="2" />
<text  x="961.02" y="543.5" ></text>
</g>
<g >
<title>task_tick_fair (1 samples, 0.01%)</title><rect x="1082.3" y="533" width="0.2" height="15.0" fill="rgb(247,188,8)" rx="2" ry="2" />
<text  x="1085.34" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="950.0" y="405" width="0.1" height="15.0" fill="rgb(223,97,7)" rx="2" ry="2" />
<text  x="952.95" y="415.5" ></text>
</g>
<g >
<title>Scene_Map::UpdateStage1 (2 samples, 0.02%)</title><rect x="167.0" y="869" width="0.3" height="15.0" fill="rgb(223,77,38)" rx="2" ry="2" />
<text  x="170.00" y="879.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="84.2" y="885" width="0.1" height="15.0" fill="rgb(244,157,28)" rx="2" ry="2" />
<text  x="87.21" y="895.5" ></text>
</g>
<g >
<title>std::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt; &gt;::pair&lt;std::weak_ptr&lt;int&gt;, std::function&lt;void (FileRequestResult*)&gt;&amp;, true&gt; (4 samples, 0.04%)</title><rect x="942.8" y="581" width="0.5" height="15.0" fill="rgb(212,223,6)" rx="2" ry="2" />
<text  x="945.77" y="591.5" ></text>
</g>
<g >
<title>malloc (7 samples, 0.08%)</title><rect x="226.5" y="661" width="0.9" height="15.0" fill="rgb(215,103,39)" rx="2" ry="2" />
<text  x="229.47" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Bitmap&gt; &gt;::destroy&lt;Bitmap&gt; (4 samples, 0.04%)</title><rect x="165.5" y="469" width="0.5" height="15.0" fill="rgb(246,85,54)" rx="2" ry="2" />
<text  x="168.46" y="479.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="806.4" y="629" width="0.1" height="15.0" fill="rgb(210,105,48)" rx="2" ry="2" />
<text  x="809.41" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void (Game_Picture::* const&amp;)(FileRequestResult*), Game_Picture*&amp;, FileRequestResult*&gt; (5 samples, 0.05%)</title><rect x="169.2" y="565" width="0.6" height="15.0" fill="rgb(252,179,39)" rx="2" ry="2" />
<text  x="172.18" y="575.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.01%)</title><rect x="1189.7" y="789" width="0.2" height="15.0" fill="rgb(237,115,29)" rx="2" ry="2" />
<text  x="1192.74" y="799.5" ></text>
</g>
<g >
<title>finish_td (1 samples, 0.01%)</title><rect x="957.6" y="453" width="0.2" height="15.0" fill="rgb(236,166,42)" rx="2" ry="2" />
<text  x="960.64" y="463.5" ></text>
</g>
<g >
<title>wake_up_process (1 samples, 0.01%)</title><rect x="828.6" y="549" width="0.1" height="15.0" fill="rgb(218,57,24)" rx="2" ry="2" />
<text  x="831.58" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;Bitmap, std::allocator&lt;Bitmap&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (3 samples, 0.03%)</title><rect x="159.2" y="485" width="0.4" height="15.0" fill="rgb(226,105,25)" rx="2" ry="2" />
<text  x="162.18" y="495.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;Bitmap, std::allocator&lt;Bitmap&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool&amp;, unsigned int&amp;&gt; (6 samples, 0.07%)</title><rect x="155.7" y="597" width="0.8" height="15.0" fill="rgb(221,46,45)" rx="2" ry="2" />
<text  x="158.72" y="607.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded (1 samples, 0.01%)</title><rect x="115.0" y="901" width="0.1" height="15.0" fill="rgb(223,215,11)" rx="2" ry="2" />
<text  x="117.97" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.01%)</title><rect x="159.8" y="565" width="0.2" height="15.0" fill="rgb(253,40,5)" rx="2" ry="2" />
<text  x="162.82" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Bitmap&gt;::shared_ptr&lt;std::allocator&lt;Bitmap&gt;, int&amp;, int&amp;, bool&amp;&gt; (1 samples, 0.01%)</title><rect x="229.7" y="645" width="0.1" height="15.0" fill="rgb(251,157,32)" rx="2" ry="2" />
<text  x="232.67" y="655.5" ></text>
</g>
<g >
<title>handle_irq (1 samples, 0.01%)</title><rect x="74.9" y="853" width="0.1" height="15.0" fill="rgb(219,214,29)" rx="2" ry="2" />
<text  x="77.85" y="863.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="948.9" y="357" width="0.2" height="15.0" fill="rgb(224,40,27)" rx="2" ry="2" />
<text  x="951.92" y="367.5" ></text>
</g>
<g >
<title>Opacity::IsSplit (2 samples, 0.02%)</title><rect x="265.4" y="693" width="0.3" height="15.0" fill="rgb(217,146,29)" rx="2" ry="2" />
<text  x="268.43" y="703.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;int&gt;::weak_ptr (1 samples, 0.01%)</title><rect x="943.2" y="565" width="0.1" height="15.0" fill="rgb(238,37,40)" rx="2" ry="2" />
<text  x="946.16" y="575.5" ></text>
</g>
<g >
<title>[libpixman-1.so.0.36.0] (23 samples, 0.25%)</title><rect x="171.1" y="901" width="2.9" height="15.0" fill="rgb(212,13,30)" rx="2" ry="2" />
<text  x="174.10" y="911.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.01%)</title><rect x="481.5" y="757" width="0.1" height="15.0" fill="rgb(240,84,47)" rx="2" ry="2" />
<text  x="484.51" y="767.5" ></text>
</g>
<g >
<title>Window_Selectable::Update (5 samples, 0.05%)</title><rect x="1110.0" y="741" width="0.7" height="15.0" fill="rgb(210,208,25)" rx="2" ry="2" />
<text  x="1113.03" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;Drawable* const&gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;Drawable**, std::vector&lt;Drawable*, std::allocator&lt;Drawable*&gt; &gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="955.2" y="293" width="0.3" height="15.0" fill="rgb(253,201,36)" rx="2" ry="2" />
<text  x="958.20" y="303.5" ></text>
</g>
</g>
</svg>
